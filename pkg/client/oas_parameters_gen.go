// Code generated by ogen, DO NOT EDIT.

package client

import (
	"net/url"
)

// AddGalleryImageParams is parameters of addGalleryImage operation.
type AddGalleryImageParams struct {
	// Image extension.
	Ext AddGalleryImageExt
	// Whether an image is featured.
	Featured bool
	// Title of the image.
	Title OptString
	// Description of the image.
	Description OptString
	// Ordering of the image.
	Ordering OptInt
	// The ID or slug of the project.
	IDSlug string
}

// AddTeamMemberParams is parameters of addTeamMember operation.
type AddTeamMemberParams struct {
	// The ID of the team.
	ID string
}

// ChangeProjectIconParams is parameters of changeProjectIcon operation.
type ChangeProjectIconParams struct {
	// Image extension.
	Ext ChangeProjectIconExt
	// The ID or slug of the project.
	IDSlug string
}

// ChangeUserIconParams is parameters of changeUserIcon operation.
type ChangeUserIconParams struct {
	// The ID or username of the user.
	IDUsername string
}

// CheckProjectValidityParams is parameters of checkProjectValidity operation.
type CheckProjectValidityParams struct {
	// The ID or slug of the project.
	IDSlug string
}

// DeleteFileFromHashParams is parameters of deleteFileFromHash operation.
type DeleteFileFromHashParams struct {
	// Version ID to delete the version from, if multiple files of the same hash exist.
	VersionID OptString
	// The hash of the file, considering its byte content, and encoded in hexadecimal.
	Hash string
	// The algorithm of the hash.
	Algorithm AlgorithmIdentifier
}

// DeleteGalleryImageParams is parameters of deleteGalleryImage operation.
type DeleteGalleryImageParams struct {
	// URL link of the image to delete.
	URL url.URL
	// The ID or slug of the project.
	IDSlug string
}

// DeleteNotificationParams is parameters of deleteNotification operation.
type DeleteNotificationParams struct {
	// The ID of the notification.
	ID string
}

// DeleteNotificationsParams is parameters of deleteNotifications operation.
type DeleteNotificationsParams struct {
	// The IDs of the notifications.
	Ids string
}

// DeleteProjectParams is parameters of deleteProject operation.
type DeleteProjectParams struct {
	// The ID or slug of the project.
	IDSlug string
}

// DeleteProjectIconParams is parameters of deleteProjectIcon operation.
type DeleteProjectIconParams struct {
	// The ID or slug of the project.
	IDSlug string
}

// DeleteTeamMemberParams is parameters of deleteTeamMember operation.
type DeleteTeamMemberParams struct {
	// The ID of the team.
	ID string
	// The ID or username of the user.
	IDUsername string
}

// DeleteThreadMessageParams is parameters of deleteThreadMessage operation.
type DeleteThreadMessageParams struct {
	// The ID of the message.
	ID string
}

// DeleteUserIconParams is parameters of deleteUserIcon operation.
type DeleteUserIconParams struct {
	// The ID or username of the user.
	IDUsername string
}

// DeleteVersionParams is parameters of deleteVersion operation.
type DeleteVersionParams struct {
	// The ID of the version.
	ID string
}

// FollowProjectParams is parameters of followProject operation.
type FollowProjectParams struct {
	// The ID or slug of the project.
	IDSlug string
}

// ForgeUpdatesParams is parameters of forgeUpdates operation.
type ForgeUpdatesParams struct {
	// The ID or slug of the project.
	IDSlug string
}

// GetDependenciesParams is parameters of getDependencies operation.
type GetDependenciesParams struct {
	// The ID or slug of the project.
	IDSlug string
}

// GetFollowedProjectsParams is parameters of getFollowedProjects operation.
type GetFollowedProjectsParams struct {
	// The ID or username of the user.
	IDUsername string
}

// GetLatestVersionFromHashParams is parameters of getLatestVersionFromHash operation.
type GetLatestVersionFromHashParams struct {
	// The hash of the file, considering its byte content, and encoded in hexadecimal.
	Hash string
	// The algorithm of the hash.
	Algorithm AlgorithmIdentifier
}

// GetNotificationParams is parameters of getNotification operation.
type GetNotificationParams struct {
	// The ID of the notification.
	ID string
}

// GetNotificationsParams is parameters of getNotifications operation.
type GetNotificationsParams struct {
	// The IDs of the notifications.
	Ids string
}

// GetOpenReportsParams is parameters of getOpenReports operation.
type GetOpenReportsParams struct {
	Count OptInt
}

// GetPayoutHistoryParams is parameters of getPayoutHistory operation.
type GetPayoutHistoryParams struct {
	// The ID or username of the user.
	IDUsername string
}

// GetProjectParams is parameters of getProject operation.
type GetProjectParams struct {
	// The ID or slug of the project.
	IDSlug string
}

// GetProjectTeamMembersParams is parameters of getProjectTeamMembers operation.
type GetProjectTeamMembersParams struct {
	// The ID or slug of the project.
	IDSlug string
}

// GetProjectVersionsParams is parameters of getProjectVersions operation.
type GetProjectVersionsParams struct {
	// The types of loaders to filter for.
	Loaders OptString
	// The game versions to filter for.
	GameVersions OptString
	// Allows to filter for featured or non-featured versions only.
	Featured OptBool
	// The ID or slug of the project.
	IDSlug string
}

// GetProjectsParams is parameters of getProjects operation.
type GetProjectsParams struct {
	// The IDs and/or slugs of the projects.
	Ids string
}

// GetReportParams is parameters of getReport operation.
type GetReportParams struct {
	// The ID of the report.
	ID string
}

// GetReportsParams is parameters of getReports operation.
type GetReportsParams struct {
	// The IDs of the reports.
	Ids string
}

// GetTeamMembersParams is parameters of getTeamMembers operation.
type GetTeamMembersParams struct {
	// The ID of the team.
	ID string
}

// GetTeamsParams is parameters of getTeams operation.
type GetTeamsParams struct {
	// The IDs of the teams.
	Ids string
}

// GetThreadParams is parameters of getThread operation.
type GetThreadParams struct {
	// The ID of the thread.
	ID string
}

// GetThreadsParams is parameters of getThreads operation.
type GetThreadsParams struct {
	// The IDs of the threads.
	Ids string
}

// GetUserParams is parameters of getUser operation.
type GetUserParams struct {
	// The ID or username of the user.
	IDUsername string
}

// GetUserNotificationsParams is parameters of getUserNotifications operation.
type GetUserNotificationsParams struct {
	// The ID or username of the user.
	IDUsername string
}

// GetUserProjectsParams is parameters of getUserProjects operation.
type GetUserProjectsParams struct {
	// The ID or username of the user.
	IDUsername string
}

// GetUsersParams is parameters of getUsers operation.
type GetUsersParams struct {
	// The IDs of the users.
	Ids string
}

// GetVersionParams is parameters of getVersion operation.
type GetVersionParams struct {
	// The ID of the version.
	ID string
}

// GetVersionFromIdOrNumberParams is parameters of getVersionFromIdOrNumber operation.
type GetVersionFromIdOrNumberParams struct {
	// The ID or slug of the project.
	IDSlug string
	// The version ID or version number.
	IDNumber string
}

// GetVersionsParams is parameters of getVersions operation.
type GetVersionsParams struct {
	// The IDs of the versions.
	Ids string
}

// JoinTeamParams is parameters of joinTeam operation.
type JoinTeamParams struct {
	// The ID of the team.
	ID string
}

// LicenseTextParams is parameters of licenseText operation.
type LicenseTextParams struct {
	// The license ID to get the text of.
	ID string
}

// ModifyGalleryImageParams is parameters of modifyGalleryImage operation.
type ModifyGalleryImageParams struct {
	// URL link of the image to modify.
	URL url.URL
	// Whether the image is featured.
	Featured OptBool
	// New title of the image.
	Title OptString
	// New description of the image.
	Description OptString
	// New ordering of the image.
	Ordering OptInt
	// The ID or slug of the project.
	IDSlug string
}

// ModifyProjectParams is parameters of modifyProject operation.
type ModifyProjectParams struct {
	// The ID or slug of the project.
	IDSlug string
}

// ModifyReportParams is parameters of modifyReport operation.
type ModifyReportParams struct {
	// The ID of the report.
	ID string
}

// ModifyTeamMemberParams is parameters of modifyTeamMember operation.
type ModifyTeamMemberParams struct {
	// The ID of the team.
	ID string
	// The ID or username of the user.
	IDUsername string
}

// ModifyUserParams is parameters of modifyUser operation.
type ModifyUserParams struct {
	// The ID or username of the user.
	IDUsername string
}

// ModifyVersionParams is parameters of modifyVersion operation.
type ModifyVersionParams struct {
	// The ID of the version.
	ID string
}

// PatchProjectsParams is parameters of patchProjects operation.
type PatchProjectsParams struct {
	// The IDs and/or slugs of the projects.
	Ids string
}

// RandomProjectsParams is parameters of randomProjects operation.
type RandomProjectsParams struct {
	// The number of random projects to return.
	Count int
}

// ReadNotificationParams is parameters of readNotification operation.
type ReadNotificationParams struct {
	// The ID of the notification.
	ID string
}

// ReadNotificationsParams is parameters of readNotifications operation.
type ReadNotificationsParams struct {
	// The IDs of the notifications.
	Ids string
}

// ScheduleProjectParams is parameters of scheduleProject operation.
type ScheduleProjectParams struct {
	// The ID or slug of the project.
	IDSlug string
}

// ScheduleVersionParams is parameters of scheduleVersion operation.
type ScheduleVersionParams struct {
	// The ID of the version.
	ID string
}

// SearchProjectsParams is parameters of searchProjects operation.
type SearchProjectsParams struct {
	// The query to search for.
	Query OptString
	// Facets are an essential concept for understanding how to filter out results.
	// These are the most commonly used facet types:
	// - `project_type`
	// - `categories` (loaders are lumped in with categories in search)
	// - `versions`
	// - `client_side`
	// - `server_side`
	// - `open_source`
	// Several others are also available for use, though these should not be used outside very specific
	// use cases.
	// - `title`
	// - `author`
	// - `follows`
	// - `project_id`
	// - `license`
	// - `downloads`
	// - `color`
	// - `created_timestamp`
	// - `modified_timestamp`
	// In order to then use these facets, you need a value to filter by, as well as an operation to
	// perform on this value.
	// The most common operation is `:` (same as `=`), though you can also use `!=`, `>=`, `>`, `<=`, and
	// `<`.
	// Join together the type, operation, and value, and you've got your string.
	// ```
	// {type} {operation} {value}
	// ```
	// Examples:
	// ```
	// categories = adventure
	// versions != 1.20.1
	// downloads <= 100
	// ```
	// You then join these strings together in arrays to signal `AND` and `OR` operators.
	// ##### OR
	// All elements in a single array are considered to be joined by OR statements.
	// For example, the search `[["versions:1.16.5", "versions:1.17.1"]]` translates to `Projects that
	// support 1.16.5 OR 1.17.1`.
	// ##### AND
	// Separate arrays are considered to be joined by AND statements.
	// For example, the search `[["versions:1.16.5"], ["project_type:modpack"]]` translates to `Projects
	// that support 1.16.5 AND are modpacks`.
	Facets OptString
	// The sorting method used for sorting search results.
	Index OptSearchProjectsIndex
	// The offset into the search. Skips this number of results.
	Offset OptInt
	// The number of results returned by the search.
	Limit OptInt
}

// SendThreadMessageParams is parameters of sendThreadMessage operation.
type SendThreadMessageParams struct {
	// The ID of the thread.
	ID string
}

// TransferTeamOwnershipParams is parameters of transferTeamOwnership operation.
type TransferTeamOwnershipParams struct {
	// The ID of the team.
	ID string
}

// UnfollowProjectParams is parameters of unfollowProject operation.
type UnfollowProjectParams struct {
	// The ID or slug of the project.
	IDSlug string
}

// VersionFromHashParams is parameters of versionFromHash operation.
type VersionFromHashParams struct {
	// Whether to return multiple results when looking for this hash.
	Multiple OptBool
	// The hash of the file, considering its byte content, and encoded in hexadecimal.
	Hash string
	// The algorithm of the hash.
	Algorithm AlgorithmIdentifier
}

// WithdrawPayoutParams is parameters of withdrawPayout operation.
type WithdrawPayoutParams struct {
	// Amount to withdraw.
	Amount int
	// The ID or username of the user.
	IDUsername string
}
