// Code generated by ogen, DO NOT EDIT.

package client

import (
	"io"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

type AddGalleryImageExt string

const (
	AddGalleryImageExtPNG  AddGalleryImageExt = "png"
	AddGalleryImageExtJPG  AddGalleryImageExt = "jpg"
	AddGalleryImageExtJpeg AddGalleryImageExt = "jpeg"
	AddGalleryImageExtBmp  AddGalleryImageExt = "bmp"
	AddGalleryImageExtGIF  AddGalleryImageExt = "gif"
	AddGalleryImageExtWEBP AddGalleryImageExt = "webp"
	AddGalleryImageExtSvg  AddGalleryImageExt = "svg"
	AddGalleryImageExtSvgz AddGalleryImageExt = "svgz"
	AddGalleryImageExtRgb  AddGalleryImageExt = "rgb"
)

// AllValues returns all AddGalleryImageExt values.
func (AddGalleryImageExt) AllValues() []AddGalleryImageExt {
	return []AddGalleryImageExt{
		AddGalleryImageExtPNG,
		AddGalleryImageExtJPG,
		AddGalleryImageExtJpeg,
		AddGalleryImageExtBmp,
		AddGalleryImageExtGIF,
		AddGalleryImageExtWEBP,
		AddGalleryImageExtSvg,
		AddGalleryImageExtSvgz,
		AddGalleryImageExtRgb,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AddGalleryImageExt) MarshalText() ([]byte, error) {
	switch s {
	case AddGalleryImageExtPNG:
		return []byte(s), nil
	case AddGalleryImageExtJPG:
		return []byte(s), nil
	case AddGalleryImageExtJpeg:
		return []byte(s), nil
	case AddGalleryImageExtBmp:
		return []byte(s), nil
	case AddGalleryImageExtGIF:
		return []byte(s), nil
	case AddGalleryImageExtWEBP:
		return []byte(s), nil
	case AddGalleryImageExtSvg:
		return []byte(s), nil
	case AddGalleryImageExtSvgz:
		return []byte(s), nil
	case AddGalleryImageExtRgb:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AddGalleryImageExt) UnmarshalText(data []byte) error {
	switch AddGalleryImageExt(data) {
	case AddGalleryImageExtPNG:
		*s = AddGalleryImageExtPNG
		return nil
	case AddGalleryImageExtJPG:
		*s = AddGalleryImageExtJPG
		return nil
	case AddGalleryImageExtJpeg:
		*s = AddGalleryImageExtJpeg
		return nil
	case AddGalleryImageExtBmp:
		*s = AddGalleryImageExtBmp
		return nil
	case AddGalleryImageExtGIF:
		*s = AddGalleryImageExtGIF
		return nil
	case AddGalleryImageExtWEBP:
		*s = AddGalleryImageExtWEBP
		return nil
	case AddGalleryImageExtSvg:
		*s = AddGalleryImageExtSvg
		return nil
	case AddGalleryImageExtSvgz:
		*s = AddGalleryImageExtSvgz
		return nil
	case AddGalleryImageExtRgb:
		*s = AddGalleryImageExtRgb
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// AddGalleryImageNoContent is response for AddGalleryImage operation.
type AddGalleryImageNoContent struct{}

func (*AddGalleryImageNoContent) addGalleryImageRes() {}

// AddGalleryImageNotFound is response for AddGalleryImage operation.
type AddGalleryImageNotFound struct{}

func (*AddGalleryImageNotFound) addGalleryImageRes() {}

type AddGalleryImageReqEmptyBody struct{}

func (*AddGalleryImageReqEmptyBody) addGalleryImageReq() {}

type AddGalleryImageReqImageBmp struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AddGalleryImageReqImageBmp) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AddGalleryImageReqImageBmp) addGalleryImageReq() {}

type AddGalleryImageReqImageGIF struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AddGalleryImageReqImageGIF) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AddGalleryImageReqImageGIF) addGalleryImageReq() {}

type AddGalleryImageReqImageJpeg struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AddGalleryImageReqImageJpeg) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AddGalleryImageReqImageJpeg) addGalleryImageReq() {}

type AddGalleryImageReqImagePNG struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AddGalleryImageReqImagePNG) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AddGalleryImageReqImagePNG) addGalleryImageReq() {}

type AddGalleryImageReqImageRgb struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AddGalleryImageReqImageRgb) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AddGalleryImageReqImageRgb) addGalleryImageReq() {}

type AddGalleryImageReqImageSvg struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AddGalleryImageReqImageSvg) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AddGalleryImageReqImageSvg) addGalleryImageReq() {}

type AddGalleryImageReqImageSvgz struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AddGalleryImageReqImageSvgz) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AddGalleryImageReqImageSvgz) addGalleryImageReq() {}

type AddGalleryImageReqImageWEBP struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s AddGalleryImageReqImageWEBP) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*AddGalleryImageReqImageWEBP) addGalleryImageReq() {}

// AddTeamMemberNoContent is response for AddTeamMember operation.
type AddTeamMemberNoContent struct{}

func (*AddTeamMemberNoContent) addTeamMemberRes() {}

// AddTeamMemberNotFound is response for AddTeamMember operation.
type AddTeamMemberNotFound struct{}

func (*AddTeamMemberNotFound) addTeamMemberRes() {}

type AlgorithmIdentifier string

const (
	AlgorithmIdentifierSHA1   AlgorithmIdentifier = "sha1"
	AlgorithmIdentifierSha512 AlgorithmIdentifier = "sha512"
)

// AllValues returns all AlgorithmIdentifier values.
func (AlgorithmIdentifier) AllValues() []AlgorithmIdentifier {
	return []AlgorithmIdentifier{
		AlgorithmIdentifierSHA1,
		AlgorithmIdentifierSha512,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AlgorithmIdentifier) MarshalText() ([]byte, error) {
	switch s {
	case AlgorithmIdentifierSHA1:
		return []byte(s), nil
	case AlgorithmIdentifierSha512:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AlgorithmIdentifier) UnmarshalText(data []byte) error {
	switch AlgorithmIdentifier(data) {
	case AlgorithmIdentifierSHA1:
		*s = AlgorithmIdentifierSHA1
		return nil
	case AlgorithmIdentifierSha512:
		*s = AlgorithmIdentifierSha512
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AuthError
type AuthError struct {
	// The name of the error.
	Error string `json:"error"`
	// The contents of the error.
	Description string `json:"description"`
}

// GetError returns the value of Error.
func (s *AuthError) GetError() string {
	return s.Error
}

// GetDescription returns the value of Description.
func (s *AuthError) GetDescription() string {
	return s.Description
}

// SetError sets the value of Error.
func (s *AuthError) SetError(val string) {
	s.Error = val
}

// SetDescription sets the value of Description.
func (s *AuthError) SetDescription(val string) {
	s.Description = val
}

func (*AuthError) addGalleryImageRes()       {}
func (*AuthError) addTeamMemberRes()         {}
func (*AuthError) createVersionRes()         {}
func (*AuthError) deleteFileFromHashRes()    {}
func (*AuthError) deleteGalleryImageRes()    {}
func (*AuthError) deleteNotificationRes()    {}
func (*AuthError) deleteNotificationsRes()   {}
func (*AuthError) deleteProjectIconRes()     {}
func (*AuthError) deleteProjectRes()         {}
func (*AuthError) deleteTeamMemberRes()      {}
func (*AuthError) deleteThreadMessageRes()   {}
func (*AuthError) deleteVersionRes()         {}
func (*AuthError) followProjectRes()         {}
func (*AuthError) getFollowedProjectsRes()   {}
func (*AuthError) getNotificationRes()       {}
func (*AuthError) getNotificationsRes()      {}
func (*AuthError) getOpenReportsRes()        {}
func (*AuthError) getPayoutHistoryRes()      {}
func (*AuthError) getReportRes()             {}
func (*AuthError) getReportsRes()            {}
func (*AuthError) getUserFromAuthRes()       {}
func (*AuthError) getUserNotificationsRes()  {}
func (*AuthError) joinTeamRes()              {}
func (*AuthError) modifyGalleryImageRes()    {}
func (*AuthError) modifyProjectRes()         {}
func (*AuthError) modifyReportRes()          {}
func (*AuthError) modifyTeamMemberRes()      {}
func (*AuthError) modifyUserRes()            {}
func (*AuthError) modifyVersionRes()         {}
func (*AuthError) patchProjectsRes()         {}
func (*AuthError) readNotificationRes()      {}
func (*AuthError) readNotificationsRes()     {}
func (*AuthError) scheduleProjectRes()       {}
func (*AuthError) scheduleVersionRes()       {}
func (*AuthError) submitReportRes()          {}
func (*AuthError) transferTeamOwnershipRes() {}
func (*AuthError) unfollowProjectRes()       {}
func (*AuthError) withdrawPayoutRes()        {}

// Ref: #/components/schemas/CategoryTag
type CategoryTag struct {
	// The SVG icon of a category.
	Icon string `json:"icon"`
	// The name of the category.
	Name string `json:"name"`
	// The project type this category is applicable to.
	ProjectType string `json:"project_type"`
	// The header under which the category should go.
	Header string `json:"header"`
}

// GetIcon returns the value of Icon.
func (s *CategoryTag) GetIcon() string {
	return s.Icon
}

// GetName returns the value of Name.
func (s *CategoryTag) GetName() string {
	return s.Name
}

// GetProjectType returns the value of ProjectType.
func (s *CategoryTag) GetProjectType() string {
	return s.ProjectType
}

// GetHeader returns the value of Header.
func (s *CategoryTag) GetHeader() string {
	return s.Header
}

// SetIcon sets the value of Icon.
func (s *CategoryTag) SetIcon(val string) {
	s.Icon = val
}

// SetName sets the value of Name.
func (s *CategoryTag) SetName(val string) {
	s.Name = val
}

// SetProjectType sets the value of ProjectType.
func (s *CategoryTag) SetProjectType(val string) {
	s.ProjectType = val
}

// SetHeader sets the value of Header.
func (s *CategoryTag) SetHeader(val string) {
	s.Header = val
}

type ChangeProjectIconExt string

const (
	ChangeProjectIconExtPNG  ChangeProjectIconExt = "png"
	ChangeProjectIconExtJPG  ChangeProjectIconExt = "jpg"
	ChangeProjectIconExtJpeg ChangeProjectIconExt = "jpeg"
	ChangeProjectIconExtBmp  ChangeProjectIconExt = "bmp"
	ChangeProjectIconExtGIF  ChangeProjectIconExt = "gif"
	ChangeProjectIconExtWEBP ChangeProjectIconExt = "webp"
	ChangeProjectIconExtSvg  ChangeProjectIconExt = "svg"
	ChangeProjectIconExtSvgz ChangeProjectIconExt = "svgz"
	ChangeProjectIconExtRgb  ChangeProjectIconExt = "rgb"
)

// AllValues returns all ChangeProjectIconExt values.
func (ChangeProjectIconExt) AllValues() []ChangeProjectIconExt {
	return []ChangeProjectIconExt{
		ChangeProjectIconExtPNG,
		ChangeProjectIconExtJPG,
		ChangeProjectIconExtJpeg,
		ChangeProjectIconExtBmp,
		ChangeProjectIconExtGIF,
		ChangeProjectIconExtWEBP,
		ChangeProjectIconExtSvg,
		ChangeProjectIconExtSvgz,
		ChangeProjectIconExtRgb,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChangeProjectIconExt) MarshalText() ([]byte, error) {
	switch s {
	case ChangeProjectIconExtPNG:
		return []byte(s), nil
	case ChangeProjectIconExtJPG:
		return []byte(s), nil
	case ChangeProjectIconExtJpeg:
		return []byte(s), nil
	case ChangeProjectIconExtBmp:
		return []byte(s), nil
	case ChangeProjectIconExtGIF:
		return []byte(s), nil
	case ChangeProjectIconExtWEBP:
		return []byte(s), nil
	case ChangeProjectIconExtSvg:
		return []byte(s), nil
	case ChangeProjectIconExtSvgz:
		return []byte(s), nil
	case ChangeProjectIconExtRgb:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChangeProjectIconExt) UnmarshalText(data []byte) error {
	switch ChangeProjectIconExt(data) {
	case ChangeProjectIconExtPNG:
		*s = ChangeProjectIconExtPNG
		return nil
	case ChangeProjectIconExtJPG:
		*s = ChangeProjectIconExtJPG
		return nil
	case ChangeProjectIconExtJpeg:
		*s = ChangeProjectIconExtJpeg
		return nil
	case ChangeProjectIconExtBmp:
		*s = ChangeProjectIconExtBmp
		return nil
	case ChangeProjectIconExtGIF:
		*s = ChangeProjectIconExtGIF
		return nil
	case ChangeProjectIconExtWEBP:
		*s = ChangeProjectIconExtWEBP
		return nil
	case ChangeProjectIconExtSvg:
		*s = ChangeProjectIconExtSvg
		return nil
	case ChangeProjectIconExtSvgz:
		*s = ChangeProjectIconExtSvgz
		return nil
	case ChangeProjectIconExtRgb:
		*s = ChangeProjectIconExtRgb
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ChangeProjectIconNoContent is response for ChangeProjectIcon operation.
type ChangeProjectIconNoContent struct{}

func (*ChangeProjectIconNoContent) changeProjectIconRes() {}

type ChangeProjectIconReqEmptyBody struct{}

func (*ChangeProjectIconReqEmptyBody) changeProjectIconReq() {}

type ChangeProjectIconReqImageBmp struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ChangeProjectIconReqImageBmp) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ChangeProjectIconReqImageBmp) changeProjectIconReq() {}

type ChangeProjectIconReqImageGIF struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ChangeProjectIconReqImageGIF) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ChangeProjectIconReqImageGIF) changeProjectIconReq() {}

type ChangeProjectIconReqImageJpeg struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ChangeProjectIconReqImageJpeg) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ChangeProjectIconReqImageJpeg) changeProjectIconReq() {}

type ChangeProjectIconReqImagePNG struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ChangeProjectIconReqImagePNG) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ChangeProjectIconReqImagePNG) changeProjectIconReq() {}

type ChangeProjectIconReqImageRgb struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ChangeProjectIconReqImageRgb) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ChangeProjectIconReqImageRgb) changeProjectIconReq() {}

type ChangeProjectIconReqImageSvg struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ChangeProjectIconReqImageSvg) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ChangeProjectIconReqImageSvg) changeProjectIconReq() {}

type ChangeProjectIconReqImageSvgz struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ChangeProjectIconReqImageSvgz) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ChangeProjectIconReqImageSvgz) changeProjectIconReq() {}

type ChangeProjectIconReqImageWEBP struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ChangeProjectIconReqImageWEBP) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ChangeProjectIconReqImageWEBP) changeProjectIconReq() {}

// ChangeUserIconNoContent is response for ChangeUserIcon operation.
type ChangeUserIconNoContent struct{}

func (*ChangeUserIconNoContent) changeUserIconRes() {}

// ChangeUserIconNotFound is response for ChangeUserIcon operation.
type ChangeUserIconNotFound struct{}

func (*ChangeUserIconNotFound) changeUserIconRes() {}

type ChangeUserIconReqEmptyBody struct{}

func (*ChangeUserIconReqEmptyBody) changeUserIconReq() {}

type ChangeUserIconReqImageBmp struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ChangeUserIconReqImageBmp) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ChangeUserIconReqImageBmp) changeUserIconReq() {}

type ChangeUserIconReqImageGIF struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ChangeUserIconReqImageGIF) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ChangeUserIconReqImageGIF) changeUserIconReq() {}

type ChangeUserIconReqImageJpeg struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ChangeUserIconReqImageJpeg) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ChangeUserIconReqImageJpeg) changeUserIconReq() {}

type ChangeUserIconReqImagePNG struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ChangeUserIconReqImagePNG) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ChangeUserIconReqImagePNG) changeUserIconReq() {}

type ChangeUserIconReqImageRgb struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ChangeUserIconReqImageRgb) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ChangeUserIconReqImageRgb) changeUserIconReq() {}

type ChangeUserIconReqImageSvg struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ChangeUserIconReqImageSvg) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ChangeUserIconReqImageSvg) changeUserIconReq() {}

type ChangeUserIconReqImageSvgz struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ChangeUserIconReqImageSvgz) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ChangeUserIconReqImageSvgz) changeUserIconReq() {}

type ChangeUserIconReqImageWEBP struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ChangeUserIconReqImageWEBP) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ChangeUserIconReqImageWEBP) changeUserIconReq() {}

// CheckProjectValidityNotFound is response for CheckProjectValidity operation.
type CheckProjectValidityNotFound struct{}

func (*CheckProjectValidityNotFound) checkProjectValidityRes() {}

// Ref: #/components/schemas/CreatableReport
type CreatableReport struct {
	// The type of the report being sent.
	ReportType string `json:"report_type"`
	// The ID of the item (project, version, or user) being reported.
	ItemID string `json:"item_id"`
	// The type of the item being reported.
	ItemType CreatableReportItemType `json:"item_type"`
	// The extended explanation of the report.
	Body string `json:"body"`
}

// GetReportType returns the value of ReportType.
func (s *CreatableReport) GetReportType() string {
	return s.ReportType
}

// GetItemID returns the value of ItemID.
func (s *CreatableReport) GetItemID() string {
	return s.ItemID
}

// GetItemType returns the value of ItemType.
func (s *CreatableReport) GetItemType() CreatableReportItemType {
	return s.ItemType
}

// GetBody returns the value of Body.
func (s *CreatableReport) GetBody() string {
	return s.Body
}

// SetReportType sets the value of ReportType.
func (s *CreatableReport) SetReportType(val string) {
	s.ReportType = val
}

// SetItemID sets the value of ItemID.
func (s *CreatableReport) SetItemID(val string) {
	s.ItemID = val
}

// SetItemType sets the value of ItemType.
func (s *CreatableReport) SetItemType(val CreatableReportItemType) {
	s.ItemType = val
}

// SetBody sets the value of Body.
func (s *CreatableReport) SetBody(val string) {
	s.Body = val
}

// The type of the item being reported.
type CreatableReportItemType string

const (
	CreatableReportItemTypeProject CreatableReportItemType = "project"
	CreatableReportItemTypeUser    CreatableReportItemType = "user"
	CreatableReportItemTypeVersion CreatableReportItemType = "version"
)

// AllValues returns all CreatableReportItemType values.
func (CreatableReportItemType) AllValues() []CreatableReportItemType {
	return []CreatableReportItemType{
		CreatableReportItemTypeProject,
		CreatableReportItemTypeUser,
		CreatableReportItemTypeVersion,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatableReportItemType) MarshalText() ([]byte, error) {
	switch s {
	case CreatableReportItemTypeProject:
		return []byte(s), nil
	case CreatableReportItemTypeUser:
		return []byte(s), nil
	case CreatableReportItemTypeVersion:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatableReportItemType) UnmarshalText(data []byte) error {
	switch CreatableReportItemType(data) {
	case CreatableReportItemTypeProject:
		*s = CreatableReportItemTypeProject
		return nil
	case CreatableReportItemTypeUser:
		*s = CreatableReportItemTypeUser
		return nil
	case CreatableReportItemTypeVersion:
		*s = CreatableReportItemTypeVersion
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/CreatableVersion
type CreatableVersion struct {
	// The name of this version.
	Name string `json:"name"`
	// The version number. Ideally will follow semantic versioning.
	VersionNumber string `json:"version_number"`
	// The changelog for this version.
	Changelog OptNilString `json:"changelog"`
	// A list of specific versions of projects that this version depends on.
	Dependencies []VersionDependency `json:"dependencies"`
	// A list of versions of Minecraft that this version supports.
	GameVersions []string `json:"game_versions"`
	// The release channel for this version.
	VersionType CreatableVersionVersionType `json:"version_type"`
	// The mod loaders that this version supports. In case of resource packs, use "minecraft".
	Loaders []string `json:"loaders"`
	// Whether the version is featured or not.
	Featured        bool                                  `json:"featured"`
	Status          OptCreatableVersionStatus             `json:"status"`
	RequestedStatus OptNilCreatableVersionRequestedStatus `json:"requested_status"`
	// The ID of the project this version is for.
	ProjectID string `json:"project_id"`
	// An array of the multipart field names of each file that goes with this version.
	FileParts []string `json:"file_parts"`
	// The multipart field name of the primary file.
	PrimaryFile OptString `json:"primary_file"`
}

// GetName returns the value of Name.
func (s *CreatableVersion) GetName() string {
	return s.Name
}

// GetVersionNumber returns the value of VersionNumber.
func (s *CreatableVersion) GetVersionNumber() string {
	return s.VersionNumber
}

// GetChangelog returns the value of Changelog.
func (s *CreatableVersion) GetChangelog() OptNilString {
	return s.Changelog
}

// GetDependencies returns the value of Dependencies.
func (s *CreatableVersion) GetDependencies() []VersionDependency {
	return s.Dependencies
}

// GetGameVersions returns the value of GameVersions.
func (s *CreatableVersion) GetGameVersions() []string {
	return s.GameVersions
}

// GetVersionType returns the value of VersionType.
func (s *CreatableVersion) GetVersionType() CreatableVersionVersionType {
	return s.VersionType
}

// GetLoaders returns the value of Loaders.
func (s *CreatableVersion) GetLoaders() []string {
	return s.Loaders
}

// GetFeatured returns the value of Featured.
func (s *CreatableVersion) GetFeatured() bool {
	return s.Featured
}

// GetStatus returns the value of Status.
func (s *CreatableVersion) GetStatus() OptCreatableVersionStatus {
	return s.Status
}

// GetRequestedStatus returns the value of RequestedStatus.
func (s *CreatableVersion) GetRequestedStatus() OptNilCreatableVersionRequestedStatus {
	return s.RequestedStatus
}

// GetProjectID returns the value of ProjectID.
func (s *CreatableVersion) GetProjectID() string {
	return s.ProjectID
}

// GetFileParts returns the value of FileParts.
func (s *CreatableVersion) GetFileParts() []string {
	return s.FileParts
}

// GetPrimaryFile returns the value of PrimaryFile.
func (s *CreatableVersion) GetPrimaryFile() OptString {
	return s.PrimaryFile
}

// SetName sets the value of Name.
func (s *CreatableVersion) SetName(val string) {
	s.Name = val
}

// SetVersionNumber sets the value of VersionNumber.
func (s *CreatableVersion) SetVersionNumber(val string) {
	s.VersionNumber = val
}

// SetChangelog sets the value of Changelog.
func (s *CreatableVersion) SetChangelog(val OptNilString) {
	s.Changelog = val
}

// SetDependencies sets the value of Dependencies.
func (s *CreatableVersion) SetDependencies(val []VersionDependency) {
	s.Dependencies = val
}

// SetGameVersions sets the value of GameVersions.
func (s *CreatableVersion) SetGameVersions(val []string) {
	s.GameVersions = val
}

// SetVersionType sets the value of VersionType.
func (s *CreatableVersion) SetVersionType(val CreatableVersionVersionType) {
	s.VersionType = val
}

// SetLoaders sets the value of Loaders.
func (s *CreatableVersion) SetLoaders(val []string) {
	s.Loaders = val
}

// SetFeatured sets the value of Featured.
func (s *CreatableVersion) SetFeatured(val bool) {
	s.Featured = val
}

// SetStatus sets the value of Status.
func (s *CreatableVersion) SetStatus(val OptCreatableVersionStatus) {
	s.Status = val
}

// SetRequestedStatus sets the value of RequestedStatus.
func (s *CreatableVersion) SetRequestedStatus(val OptNilCreatableVersionRequestedStatus) {
	s.RequestedStatus = val
}

// SetProjectID sets the value of ProjectID.
func (s *CreatableVersion) SetProjectID(val string) {
	s.ProjectID = val
}

// SetFileParts sets the value of FileParts.
func (s *CreatableVersion) SetFileParts(val []string) {
	s.FileParts = val
}

// SetPrimaryFile sets the value of PrimaryFile.
func (s *CreatableVersion) SetPrimaryFile(val OptString) {
	s.PrimaryFile = val
}

type CreatableVersionRequestedStatus string

const (
	CreatableVersionRequestedStatusListed   CreatableVersionRequestedStatus = "listed"
	CreatableVersionRequestedStatusArchived CreatableVersionRequestedStatus = "archived"
	CreatableVersionRequestedStatusDraft    CreatableVersionRequestedStatus = "draft"
	CreatableVersionRequestedStatusUnlisted CreatableVersionRequestedStatus = "unlisted"
)

// AllValues returns all CreatableVersionRequestedStatus values.
func (CreatableVersionRequestedStatus) AllValues() []CreatableVersionRequestedStatus {
	return []CreatableVersionRequestedStatus{
		CreatableVersionRequestedStatusListed,
		CreatableVersionRequestedStatusArchived,
		CreatableVersionRequestedStatusDraft,
		CreatableVersionRequestedStatusUnlisted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatableVersionRequestedStatus) MarshalText() ([]byte, error) {
	switch s {
	case CreatableVersionRequestedStatusListed:
		return []byte(s), nil
	case CreatableVersionRequestedStatusArchived:
		return []byte(s), nil
	case CreatableVersionRequestedStatusDraft:
		return []byte(s), nil
	case CreatableVersionRequestedStatusUnlisted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatableVersionRequestedStatus) UnmarshalText(data []byte) error {
	switch CreatableVersionRequestedStatus(data) {
	case CreatableVersionRequestedStatusListed:
		*s = CreatableVersionRequestedStatusListed
		return nil
	case CreatableVersionRequestedStatusArchived:
		*s = CreatableVersionRequestedStatusArchived
		return nil
	case CreatableVersionRequestedStatusDraft:
		*s = CreatableVersionRequestedStatusDraft
		return nil
	case CreatableVersionRequestedStatusUnlisted:
		*s = CreatableVersionRequestedStatusUnlisted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreatableVersionStatus string

const (
	CreatableVersionStatusListed    CreatableVersionStatus = "listed"
	CreatableVersionStatusArchived  CreatableVersionStatus = "archived"
	CreatableVersionStatusDraft     CreatableVersionStatus = "draft"
	CreatableVersionStatusUnlisted  CreatableVersionStatus = "unlisted"
	CreatableVersionStatusScheduled CreatableVersionStatus = "scheduled"
	CreatableVersionStatusUnknown   CreatableVersionStatus = "unknown"
)

// AllValues returns all CreatableVersionStatus values.
func (CreatableVersionStatus) AllValues() []CreatableVersionStatus {
	return []CreatableVersionStatus{
		CreatableVersionStatusListed,
		CreatableVersionStatusArchived,
		CreatableVersionStatusDraft,
		CreatableVersionStatusUnlisted,
		CreatableVersionStatusScheduled,
		CreatableVersionStatusUnknown,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatableVersionStatus) MarshalText() ([]byte, error) {
	switch s {
	case CreatableVersionStatusListed:
		return []byte(s), nil
	case CreatableVersionStatusArchived:
		return []byte(s), nil
	case CreatableVersionStatusDraft:
		return []byte(s), nil
	case CreatableVersionStatusUnlisted:
		return []byte(s), nil
	case CreatableVersionStatusScheduled:
		return []byte(s), nil
	case CreatableVersionStatusUnknown:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatableVersionStatus) UnmarshalText(data []byte) error {
	switch CreatableVersionStatus(data) {
	case CreatableVersionStatusListed:
		*s = CreatableVersionStatusListed
		return nil
	case CreatableVersionStatusArchived:
		*s = CreatableVersionStatusArchived
		return nil
	case CreatableVersionStatusDraft:
		*s = CreatableVersionStatusDraft
		return nil
	case CreatableVersionStatusUnlisted:
		*s = CreatableVersionStatusUnlisted
		return nil
	case CreatableVersionStatusScheduled:
		*s = CreatableVersionStatusScheduled
		return nil
	case CreatableVersionStatusUnknown:
		*s = CreatableVersionStatusUnknown
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The release channel for this version.
type CreatableVersionVersionType string

const (
	CreatableVersionVersionTypeRelease CreatableVersionVersionType = "release"
	CreatableVersionVersionTypeBeta    CreatableVersionVersionType = "beta"
	CreatableVersionVersionTypeAlpha   CreatableVersionVersionType = "alpha"
)

// AllValues returns all CreatableVersionVersionType values.
func (CreatableVersionVersionType) AllValues() []CreatableVersionVersionType {
	return []CreatableVersionVersionType{
		CreatableVersionVersionTypeRelease,
		CreatableVersionVersionTypeBeta,
		CreatableVersionVersionTypeAlpha,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatableVersionVersionType) MarshalText() ([]byte, error) {
	switch s {
	case CreatableVersionVersionTypeRelease:
		return []byte(s), nil
	case CreatableVersionVersionTypeBeta:
		return []byte(s), nil
	case CreatableVersionVersionTypeAlpha:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatableVersionVersionType) UnmarshalText(data []byte) error {
	switch CreatableVersionVersionType(data) {
	case CreatableVersionVersionTypeRelease:
		*s = CreatableVersionVersionTypeRelease
		return nil
	case CreatableVersionVersionTypeBeta:
		*s = CreatableVersionVersionTypeBeta
		return nil
	case CreatableVersionVersionTypeAlpha:
		*s = CreatableVersionVersionTypeAlpha
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CreateVersionBody
type CreateVersionBodyMultipart struct {
	Data CreatableVersion `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateVersionBodyMultipart) GetData() CreatableVersion {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateVersionBodyMultipart) SetData(val CreatableVersion) {
	s.Data = val
}

// DeleteFileFromHashNoContent is response for DeleteFileFromHash operation.
type DeleteFileFromHashNoContent struct{}

func (*DeleteFileFromHashNoContent) deleteFileFromHashRes() {}

// DeleteFileFromHashNotFound is response for DeleteFileFromHash operation.
type DeleteFileFromHashNotFound struct{}

func (*DeleteFileFromHashNotFound) deleteFileFromHashRes() {}

// DeleteGalleryImageNoContent is response for DeleteGalleryImage operation.
type DeleteGalleryImageNoContent struct{}

func (*DeleteGalleryImageNoContent) deleteGalleryImageRes() {}

// DeleteNotificationNoContent is response for DeleteNotification operation.
type DeleteNotificationNoContent struct{}

func (*DeleteNotificationNoContent) deleteNotificationRes() {}

// DeleteNotificationNotFound is response for DeleteNotification operation.
type DeleteNotificationNotFound struct{}

func (*DeleteNotificationNotFound) deleteNotificationRes() {}

// DeleteNotificationsNoContent is response for DeleteNotifications operation.
type DeleteNotificationsNoContent struct{}

func (*DeleteNotificationsNoContent) deleteNotificationsRes() {}

// DeleteNotificationsNotFound is response for DeleteNotifications operation.
type DeleteNotificationsNotFound struct{}

func (*DeleteNotificationsNotFound) deleteNotificationsRes() {}

// DeleteProjectIconNoContent is response for DeleteProjectIcon operation.
type DeleteProjectIconNoContent struct{}

func (*DeleteProjectIconNoContent) deleteProjectIconRes() {}

// DeleteProjectNoContent is response for DeleteProject operation.
type DeleteProjectNoContent struct{}

func (*DeleteProjectNoContent) deleteProjectRes() {}

// DeleteTeamMemberNoContent is response for DeleteTeamMember operation.
type DeleteTeamMemberNoContent struct{}

func (*DeleteTeamMemberNoContent) deleteTeamMemberRes() {}

// DeleteTeamMemberNotFound is response for DeleteTeamMember operation.
type DeleteTeamMemberNotFound struct{}

func (*DeleteTeamMemberNotFound) deleteTeamMemberRes() {}

// DeleteThreadMessageNoContent is response for DeleteThreadMessage operation.
type DeleteThreadMessageNoContent struct{}

func (*DeleteThreadMessageNoContent) deleteThreadMessageRes() {}

// DeleteThreadMessageNotFound is response for DeleteThreadMessage operation.
type DeleteThreadMessageNotFound struct{}

func (*DeleteThreadMessageNotFound) deleteThreadMessageRes() {}

// DeleteUserIconNoContent is response for DeleteUserIcon operation.
type DeleteUserIconNoContent struct{}

func (*DeleteUserIconNoContent) deleteUserIconRes() {}

// DeleteUserIconNotFound is response for DeleteUserIcon operation.
type DeleteUserIconNotFound struct{}

func (*DeleteUserIconNotFound) deleteUserIconRes() {}

// DeleteVersionNoContent is response for DeleteVersion operation.
type DeleteVersionNoContent struct{}

func (*DeleteVersionNoContent) deleteVersionRes() {}

// DeleteVersionNotFound is response for DeleteVersion operation.
type DeleteVersionNotFound struct{}

func (*DeleteVersionNotFound) deleteVersionRes() {}

// Ref: #/components/schemas/DonationPlatformTag
type DonationPlatformTag struct {
	// The short identifier of the donation platform.
	Short string `json:"short"`
	// The full name of the donation platform.
	Name string `json:"name"`
}

// GetShort returns the value of Short.
func (s *DonationPlatformTag) GetShort() string {
	return s.Short
}

// GetName returns the value of Name.
func (s *DonationPlatformTag) GetName() string {
	return s.Name
}

// SetShort sets the value of Short.
func (s *DonationPlatformTag) SetShort(val string) {
	s.Short = val
}

// SetName sets the value of Name.
func (s *DonationPlatformTag) SetName(val string) {
	s.Name = val
}

// Ref: #/components/schemas/EditableFileType
type EditableFileType struct {
	// The hash algorithm of the hash specified in the hash field.
	Algorithm string `json:"algorithm"`
	// The hash of the file you're editing.
	Hash string `json:"hash"`
	// The hash algorithm of the file you're editing.
	FileType NilEditableFileTypeFileType `json:"file_type"`
}

// GetAlgorithm returns the value of Algorithm.
func (s *EditableFileType) GetAlgorithm() string {
	return s.Algorithm
}

// GetHash returns the value of Hash.
func (s *EditableFileType) GetHash() string {
	return s.Hash
}

// GetFileType returns the value of FileType.
func (s *EditableFileType) GetFileType() NilEditableFileTypeFileType {
	return s.FileType
}

// SetAlgorithm sets the value of Algorithm.
func (s *EditableFileType) SetAlgorithm(val string) {
	s.Algorithm = val
}

// SetHash sets the value of Hash.
func (s *EditableFileType) SetHash(val string) {
	s.Hash = val
}

// SetFileType sets the value of FileType.
func (s *EditableFileType) SetFileType(val NilEditableFileTypeFileType) {
	s.FileType = val
}

// The hash algorithm of the file you're editing.
type EditableFileTypeFileType string

const (
	EditableFileTypeFileTypeRequiredResourcePack EditableFileTypeFileType = "required-resource-pack"
	EditableFileTypeFileTypeOptionalResourcePack EditableFileTypeFileType = "optional-resource-pack"
)

// AllValues returns all EditableFileTypeFileType values.
func (EditableFileTypeFileType) AllValues() []EditableFileTypeFileType {
	return []EditableFileTypeFileType{
		EditableFileTypeFileTypeRequiredResourcePack,
		EditableFileTypeFileTypeOptionalResourcePack,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EditableFileTypeFileType) MarshalText() ([]byte, error) {
	switch s {
	case EditableFileTypeFileTypeRequiredResourcePack:
		return []byte(s), nil
	case EditableFileTypeFileTypeOptionalResourcePack:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EditableFileTypeFileType) UnmarshalText(data []byte) error {
	switch EditableFileTypeFileType(data) {
	case EditableFileTypeFileTypeRequiredResourcePack:
		*s = EditableFileTypeFileTypeRequiredResourcePack
		return nil
	case EditableFileTypeFileTypeOptionalResourcePack:
		*s = EditableFileTypeFileTypeOptionalResourcePack
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/EditableProject
type EditableProject struct {
	// The slug of a project, used for vanity URLs. Regex: ```^[\w!@$()`.+,"\-']{3,64}$```.
	Slug OptString `json:"slug"`
	// The title or name of the project.
	Title OptString `json:"title"`
	// A short description of the project.
	Description OptString `json:"description"`
	// A list of the categories that the project has.
	Categories []string `json:"categories"`
	// The client side support of the project.
	ClientSide OptEditableProjectClientSide `json:"client_side"`
	// The server side support of the project.
	ServerSide OptEditableProjectServerSide `json:"server_side"`
	// A long form description of the project.
	Body OptString `json:"body"`
	// The status of the project.
	Status OptEditableProjectStatus `json:"status"`
	// The requested status when submitting for review or scheduling the project for release.
	RequestedStatus OptNilEditableProjectRequestedStatus `json:"requested_status"`
	// A list of categories which are searchable but non-primary.
	AdditionalCategories []string `json:"additional_categories"`
	// An optional link to where to submit bugs or issues with the project.
	IssuesURL OptNilString `json:"issues_url"`
	// An optional link to the source code of the project.
	SourceURL OptNilString `json:"source_url"`
	// An optional link to the project's wiki page or other relevant information.
	WikiURL OptNilString `json:"wiki_url"`
	// An optional invite link to the project's discord.
	DiscordURL OptNilString `json:"discord_url"`
	// A list of donation links for the project.
	DonationUrls []ProjectDonationURL `json:"donation_urls"`
	// The SPDX license ID of a project.
	LicenseID OptString `json:"license_id"`
	// The URL to this license.
	LicenseURL OptNilString `json:"license_url"`
	// The title of the moderators' message for the project.
	ModerationMessage OptNilString `json:"moderation_message"`
	// The body of the moderators' message for the project.
	ModerationMessageBody OptNilString `json:"moderation_message_body"`
}

// GetSlug returns the value of Slug.
func (s *EditableProject) GetSlug() OptString {
	return s.Slug
}

// GetTitle returns the value of Title.
func (s *EditableProject) GetTitle() OptString {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *EditableProject) GetDescription() OptString {
	return s.Description
}

// GetCategories returns the value of Categories.
func (s *EditableProject) GetCategories() []string {
	return s.Categories
}

// GetClientSide returns the value of ClientSide.
func (s *EditableProject) GetClientSide() OptEditableProjectClientSide {
	return s.ClientSide
}

// GetServerSide returns the value of ServerSide.
func (s *EditableProject) GetServerSide() OptEditableProjectServerSide {
	return s.ServerSide
}

// GetBody returns the value of Body.
func (s *EditableProject) GetBody() OptString {
	return s.Body
}

// GetStatus returns the value of Status.
func (s *EditableProject) GetStatus() OptEditableProjectStatus {
	return s.Status
}

// GetRequestedStatus returns the value of RequestedStatus.
func (s *EditableProject) GetRequestedStatus() OptNilEditableProjectRequestedStatus {
	return s.RequestedStatus
}

// GetAdditionalCategories returns the value of AdditionalCategories.
func (s *EditableProject) GetAdditionalCategories() []string {
	return s.AdditionalCategories
}

// GetIssuesURL returns the value of IssuesURL.
func (s *EditableProject) GetIssuesURL() OptNilString {
	return s.IssuesURL
}

// GetSourceURL returns the value of SourceURL.
func (s *EditableProject) GetSourceURL() OptNilString {
	return s.SourceURL
}

// GetWikiURL returns the value of WikiURL.
func (s *EditableProject) GetWikiURL() OptNilString {
	return s.WikiURL
}

// GetDiscordURL returns the value of DiscordURL.
func (s *EditableProject) GetDiscordURL() OptNilString {
	return s.DiscordURL
}

// GetDonationUrls returns the value of DonationUrls.
func (s *EditableProject) GetDonationUrls() []ProjectDonationURL {
	return s.DonationUrls
}

// GetLicenseID returns the value of LicenseID.
func (s *EditableProject) GetLicenseID() OptString {
	return s.LicenseID
}

// GetLicenseURL returns the value of LicenseURL.
func (s *EditableProject) GetLicenseURL() OptNilString {
	return s.LicenseURL
}

// GetModerationMessage returns the value of ModerationMessage.
func (s *EditableProject) GetModerationMessage() OptNilString {
	return s.ModerationMessage
}

// GetModerationMessageBody returns the value of ModerationMessageBody.
func (s *EditableProject) GetModerationMessageBody() OptNilString {
	return s.ModerationMessageBody
}

// SetSlug sets the value of Slug.
func (s *EditableProject) SetSlug(val OptString) {
	s.Slug = val
}

// SetTitle sets the value of Title.
func (s *EditableProject) SetTitle(val OptString) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *EditableProject) SetDescription(val OptString) {
	s.Description = val
}

// SetCategories sets the value of Categories.
func (s *EditableProject) SetCategories(val []string) {
	s.Categories = val
}

// SetClientSide sets the value of ClientSide.
func (s *EditableProject) SetClientSide(val OptEditableProjectClientSide) {
	s.ClientSide = val
}

// SetServerSide sets the value of ServerSide.
func (s *EditableProject) SetServerSide(val OptEditableProjectServerSide) {
	s.ServerSide = val
}

// SetBody sets the value of Body.
func (s *EditableProject) SetBody(val OptString) {
	s.Body = val
}

// SetStatus sets the value of Status.
func (s *EditableProject) SetStatus(val OptEditableProjectStatus) {
	s.Status = val
}

// SetRequestedStatus sets the value of RequestedStatus.
func (s *EditableProject) SetRequestedStatus(val OptNilEditableProjectRequestedStatus) {
	s.RequestedStatus = val
}

// SetAdditionalCategories sets the value of AdditionalCategories.
func (s *EditableProject) SetAdditionalCategories(val []string) {
	s.AdditionalCategories = val
}

// SetIssuesURL sets the value of IssuesURL.
func (s *EditableProject) SetIssuesURL(val OptNilString) {
	s.IssuesURL = val
}

// SetSourceURL sets the value of SourceURL.
func (s *EditableProject) SetSourceURL(val OptNilString) {
	s.SourceURL = val
}

// SetWikiURL sets the value of WikiURL.
func (s *EditableProject) SetWikiURL(val OptNilString) {
	s.WikiURL = val
}

// SetDiscordURL sets the value of DiscordURL.
func (s *EditableProject) SetDiscordURL(val OptNilString) {
	s.DiscordURL = val
}

// SetDonationUrls sets the value of DonationUrls.
func (s *EditableProject) SetDonationUrls(val []ProjectDonationURL) {
	s.DonationUrls = val
}

// SetLicenseID sets the value of LicenseID.
func (s *EditableProject) SetLicenseID(val OptString) {
	s.LicenseID = val
}

// SetLicenseURL sets the value of LicenseURL.
func (s *EditableProject) SetLicenseURL(val OptNilString) {
	s.LicenseURL = val
}

// SetModerationMessage sets the value of ModerationMessage.
func (s *EditableProject) SetModerationMessage(val OptNilString) {
	s.ModerationMessage = val
}

// SetModerationMessageBody sets the value of ModerationMessageBody.
func (s *EditableProject) SetModerationMessageBody(val OptNilString) {
	s.ModerationMessageBody = val
}

// The client side support of the project.
type EditableProjectClientSide string

const (
	EditableProjectClientSideRequired    EditableProjectClientSide = "required"
	EditableProjectClientSideOptional    EditableProjectClientSide = "optional"
	EditableProjectClientSideUnsupported EditableProjectClientSide = "unsupported"
	EditableProjectClientSideUnknown     EditableProjectClientSide = "unknown"
)

// AllValues returns all EditableProjectClientSide values.
func (EditableProjectClientSide) AllValues() []EditableProjectClientSide {
	return []EditableProjectClientSide{
		EditableProjectClientSideRequired,
		EditableProjectClientSideOptional,
		EditableProjectClientSideUnsupported,
		EditableProjectClientSideUnknown,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EditableProjectClientSide) MarshalText() ([]byte, error) {
	switch s {
	case EditableProjectClientSideRequired:
		return []byte(s), nil
	case EditableProjectClientSideOptional:
		return []byte(s), nil
	case EditableProjectClientSideUnsupported:
		return []byte(s), nil
	case EditableProjectClientSideUnknown:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EditableProjectClientSide) UnmarshalText(data []byte) error {
	switch EditableProjectClientSide(data) {
	case EditableProjectClientSideRequired:
		*s = EditableProjectClientSideRequired
		return nil
	case EditableProjectClientSideOptional:
		*s = EditableProjectClientSideOptional
		return nil
	case EditableProjectClientSideUnsupported:
		*s = EditableProjectClientSideUnsupported
		return nil
	case EditableProjectClientSideUnknown:
		*s = EditableProjectClientSideUnknown
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The requested status when submitting for review or scheduling the project for release.
type EditableProjectRequestedStatus string

const (
	EditableProjectRequestedStatusApproved EditableProjectRequestedStatus = "approved"
	EditableProjectRequestedStatusArchived EditableProjectRequestedStatus = "archived"
	EditableProjectRequestedStatusUnlisted EditableProjectRequestedStatus = "unlisted"
	EditableProjectRequestedStatusPrivate  EditableProjectRequestedStatus = "private"
	EditableProjectRequestedStatusDraft    EditableProjectRequestedStatus = "draft"
)

// AllValues returns all EditableProjectRequestedStatus values.
func (EditableProjectRequestedStatus) AllValues() []EditableProjectRequestedStatus {
	return []EditableProjectRequestedStatus{
		EditableProjectRequestedStatusApproved,
		EditableProjectRequestedStatusArchived,
		EditableProjectRequestedStatusUnlisted,
		EditableProjectRequestedStatusPrivate,
		EditableProjectRequestedStatusDraft,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EditableProjectRequestedStatus) MarshalText() ([]byte, error) {
	switch s {
	case EditableProjectRequestedStatusApproved:
		return []byte(s), nil
	case EditableProjectRequestedStatusArchived:
		return []byte(s), nil
	case EditableProjectRequestedStatusUnlisted:
		return []byte(s), nil
	case EditableProjectRequestedStatusPrivate:
		return []byte(s), nil
	case EditableProjectRequestedStatusDraft:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EditableProjectRequestedStatus) UnmarshalText(data []byte) error {
	switch EditableProjectRequestedStatus(data) {
	case EditableProjectRequestedStatusApproved:
		*s = EditableProjectRequestedStatusApproved
		return nil
	case EditableProjectRequestedStatusArchived:
		*s = EditableProjectRequestedStatusArchived
		return nil
	case EditableProjectRequestedStatusUnlisted:
		*s = EditableProjectRequestedStatusUnlisted
		return nil
	case EditableProjectRequestedStatusPrivate:
		*s = EditableProjectRequestedStatusPrivate
		return nil
	case EditableProjectRequestedStatusDraft:
		*s = EditableProjectRequestedStatusDraft
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The server side support of the project.
type EditableProjectServerSide string

const (
	EditableProjectServerSideRequired    EditableProjectServerSide = "required"
	EditableProjectServerSideOptional    EditableProjectServerSide = "optional"
	EditableProjectServerSideUnsupported EditableProjectServerSide = "unsupported"
	EditableProjectServerSideUnknown     EditableProjectServerSide = "unknown"
)

// AllValues returns all EditableProjectServerSide values.
func (EditableProjectServerSide) AllValues() []EditableProjectServerSide {
	return []EditableProjectServerSide{
		EditableProjectServerSideRequired,
		EditableProjectServerSideOptional,
		EditableProjectServerSideUnsupported,
		EditableProjectServerSideUnknown,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EditableProjectServerSide) MarshalText() ([]byte, error) {
	switch s {
	case EditableProjectServerSideRequired:
		return []byte(s), nil
	case EditableProjectServerSideOptional:
		return []byte(s), nil
	case EditableProjectServerSideUnsupported:
		return []byte(s), nil
	case EditableProjectServerSideUnknown:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EditableProjectServerSide) UnmarshalText(data []byte) error {
	switch EditableProjectServerSide(data) {
	case EditableProjectServerSideRequired:
		*s = EditableProjectServerSideRequired
		return nil
	case EditableProjectServerSideOptional:
		*s = EditableProjectServerSideOptional
		return nil
	case EditableProjectServerSideUnsupported:
		*s = EditableProjectServerSideUnsupported
		return nil
	case EditableProjectServerSideUnknown:
		*s = EditableProjectServerSideUnknown
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The status of the project.
type EditableProjectStatus string

const (
	EditableProjectStatusApproved   EditableProjectStatus = "approved"
	EditableProjectStatusArchived   EditableProjectStatus = "archived"
	EditableProjectStatusRejected   EditableProjectStatus = "rejected"
	EditableProjectStatusDraft      EditableProjectStatus = "draft"
	EditableProjectStatusUnlisted   EditableProjectStatus = "unlisted"
	EditableProjectStatusProcessing EditableProjectStatus = "processing"
	EditableProjectStatusWithheld   EditableProjectStatus = "withheld"
	EditableProjectStatusScheduled  EditableProjectStatus = "scheduled"
	EditableProjectStatusPrivate    EditableProjectStatus = "private"
	EditableProjectStatusUnknown    EditableProjectStatus = "unknown"
)

// AllValues returns all EditableProjectStatus values.
func (EditableProjectStatus) AllValues() []EditableProjectStatus {
	return []EditableProjectStatus{
		EditableProjectStatusApproved,
		EditableProjectStatusArchived,
		EditableProjectStatusRejected,
		EditableProjectStatusDraft,
		EditableProjectStatusUnlisted,
		EditableProjectStatusProcessing,
		EditableProjectStatusWithheld,
		EditableProjectStatusScheduled,
		EditableProjectStatusPrivate,
		EditableProjectStatusUnknown,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EditableProjectStatus) MarshalText() ([]byte, error) {
	switch s {
	case EditableProjectStatusApproved:
		return []byte(s), nil
	case EditableProjectStatusArchived:
		return []byte(s), nil
	case EditableProjectStatusRejected:
		return []byte(s), nil
	case EditableProjectStatusDraft:
		return []byte(s), nil
	case EditableProjectStatusUnlisted:
		return []byte(s), nil
	case EditableProjectStatusProcessing:
		return []byte(s), nil
	case EditableProjectStatusWithheld:
		return []byte(s), nil
	case EditableProjectStatusScheduled:
		return []byte(s), nil
	case EditableProjectStatusPrivate:
		return []byte(s), nil
	case EditableProjectStatusUnknown:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EditableProjectStatus) UnmarshalText(data []byte) error {
	switch EditableProjectStatus(data) {
	case EditableProjectStatusApproved:
		*s = EditableProjectStatusApproved
		return nil
	case EditableProjectStatusArchived:
		*s = EditableProjectStatusArchived
		return nil
	case EditableProjectStatusRejected:
		*s = EditableProjectStatusRejected
		return nil
	case EditableProjectStatusDraft:
		*s = EditableProjectStatusDraft
		return nil
	case EditableProjectStatusUnlisted:
		*s = EditableProjectStatusUnlisted
		return nil
	case EditableProjectStatusProcessing:
		*s = EditableProjectStatusProcessing
		return nil
	case EditableProjectStatusWithheld:
		*s = EditableProjectStatusWithheld
		return nil
	case EditableProjectStatusScheduled:
		*s = EditableProjectStatusScheduled
		return nil
	case EditableProjectStatusPrivate:
		*s = EditableProjectStatusPrivate
		return nil
	case EditableProjectStatusUnknown:
		*s = EditableProjectStatusUnknown
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/EditableUser
type EditableUser struct {
	// The user's username.
	Username string `json:"username"`
	// The user's display name.
	Name OptNilString `json:"name"`
	// The user's email (only displayed if requesting your own account). Requires `USER_READ_EMAIL` PAT
	// scope.
	Email OptNilString `json:"email"`
	// A description of the user.
	Bio        OptString            `json:"bio"`
	PayoutData OptNilUserPayoutData `json:"payout_data"`
}

// GetUsername returns the value of Username.
func (s *EditableUser) GetUsername() string {
	return s.Username
}

// GetName returns the value of Name.
func (s *EditableUser) GetName() OptNilString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *EditableUser) GetEmail() OptNilString {
	return s.Email
}

// GetBio returns the value of Bio.
func (s *EditableUser) GetBio() OptString {
	return s.Bio
}

// GetPayoutData returns the value of PayoutData.
func (s *EditableUser) GetPayoutData() OptNilUserPayoutData {
	return s.PayoutData
}

// SetUsername sets the value of Username.
func (s *EditableUser) SetUsername(val string) {
	s.Username = val
}

// SetName sets the value of Name.
func (s *EditableUser) SetName(val OptNilString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *EditableUser) SetEmail(val OptNilString) {
	s.Email = val
}

// SetBio sets the value of Bio.
func (s *EditableUser) SetBio(val OptString) {
	s.Bio = val
}

// SetPayoutData sets the value of PayoutData.
func (s *EditableUser) SetPayoutData(val OptNilUserPayoutData) {
	s.PayoutData = val
}

// Merged schema.
// Ref: #/components/schemas/EditableVersion
type EditableVersion struct {
	// The name of this version.
	Name OptString `json:"name"`
	// The version number. Ideally will follow semantic versioning.
	VersionNumber OptString `json:"version_number"`
	// The changelog for this version.
	Changelog OptNilString `json:"changelog"`
	// A list of specific versions of projects that this version depends on.
	Dependencies []VersionDependency `json:"dependencies"`
	// A list of versions of Minecraft that this version supports.
	GameVersions []string `json:"game_versions"`
	// The release channel for this version.
	VersionType OptEditableVersionVersionType `json:"version_type"`
	// The mod loaders that this version supports. In case of resource packs, use "minecraft".
	Loaders []string `json:"loaders"`
	// Whether the version is featured or not.
	Featured        OptBool                              `json:"featured"`
	Status          OptEditableVersionStatus             `json:"status"`
	RequestedStatus OptNilEditableVersionRequestedStatus `json:"requested_status"`
	// The hash format and the hash of the new primary file.
	PrimaryFile []string `json:"primary_file"`
	// A list of file_types to edit.
	FileTypes []EditableFileType `json:"file_types"`
}

// GetName returns the value of Name.
func (s *EditableVersion) GetName() OptString {
	return s.Name
}

// GetVersionNumber returns the value of VersionNumber.
func (s *EditableVersion) GetVersionNumber() OptString {
	return s.VersionNumber
}

// GetChangelog returns the value of Changelog.
func (s *EditableVersion) GetChangelog() OptNilString {
	return s.Changelog
}

// GetDependencies returns the value of Dependencies.
func (s *EditableVersion) GetDependencies() []VersionDependency {
	return s.Dependencies
}

// GetGameVersions returns the value of GameVersions.
func (s *EditableVersion) GetGameVersions() []string {
	return s.GameVersions
}

// GetVersionType returns the value of VersionType.
func (s *EditableVersion) GetVersionType() OptEditableVersionVersionType {
	return s.VersionType
}

// GetLoaders returns the value of Loaders.
func (s *EditableVersion) GetLoaders() []string {
	return s.Loaders
}

// GetFeatured returns the value of Featured.
func (s *EditableVersion) GetFeatured() OptBool {
	return s.Featured
}

// GetStatus returns the value of Status.
func (s *EditableVersion) GetStatus() OptEditableVersionStatus {
	return s.Status
}

// GetRequestedStatus returns the value of RequestedStatus.
func (s *EditableVersion) GetRequestedStatus() OptNilEditableVersionRequestedStatus {
	return s.RequestedStatus
}

// GetPrimaryFile returns the value of PrimaryFile.
func (s *EditableVersion) GetPrimaryFile() []string {
	return s.PrimaryFile
}

// GetFileTypes returns the value of FileTypes.
func (s *EditableVersion) GetFileTypes() []EditableFileType {
	return s.FileTypes
}

// SetName sets the value of Name.
func (s *EditableVersion) SetName(val OptString) {
	s.Name = val
}

// SetVersionNumber sets the value of VersionNumber.
func (s *EditableVersion) SetVersionNumber(val OptString) {
	s.VersionNumber = val
}

// SetChangelog sets the value of Changelog.
func (s *EditableVersion) SetChangelog(val OptNilString) {
	s.Changelog = val
}

// SetDependencies sets the value of Dependencies.
func (s *EditableVersion) SetDependencies(val []VersionDependency) {
	s.Dependencies = val
}

// SetGameVersions sets the value of GameVersions.
func (s *EditableVersion) SetGameVersions(val []string) {
	s.GameVersions = val
}

// SetVersionType sets the value of VersionType.
func (s *EditableVersion) SetVersionType(val OptEditableVersionVersionType) {
	s.VersionType = val
}

// SetLoaders sets the value of Loaders.
func (s *EditableVersion) SetLoaders(val []string) {
	s.Loaders = val
}

// SetFeatured sets the value of Featured.
func (s *EditableVersion) SetFeatured(val OptBool) {
	s.Featured = val
}

// SetStatus sets the value of Status.
func (s *EditableVersion) SetStatus(val OptEditableVersionStatus) {
	s.Status = val
}

// SetRequestedStatus sets the value of RequestedStatus.
func (s *EditableVersion) SetRequestedStatus(val OptNilEditableVersionRequestedStatus) {
	s.RequestedStatus = val
}

// SetPrimaryFile sets the value of PrimaryFile.
func (s *EditableVersion) SetPrimaryFile(val []string) {
	s.PrimaryFile = val
}

// SetFileTypes sets the value of FileTypes.
func (s *EditableVersion) SetFileTypes(val []EditableFileType) {
	s.FileTypes = val
}

type EditableVersionRequestedStatus string

const (
	EditableVersionRequestedStatusListed   EditableVersionRequestedStatus = "listed"
	EditableVersionRequestedStatusArchived EditableVersionRequestedStatus = "archived"
	EditableVersionRequestedStatusDraft    EditableVersionRequestedStatus = "draft"
	EditableVersionRequestedStatusUnlisted EditableVersionRequestedStatus = "unlisted"
)

// AllValues returns all EditableVersionRequestedStatus values.
func (EditableVersionRequestedStatus) AllValues() []EditableVersionRequestedStatus {
	return []EditableVersionRequestedStatus{
		EditableVersionRequestedStatusListed,
		EditableVersionRequestedStatusArchived,
		EditableVersionRequestedStatusDraft,
		EditableVersionRequestedStatusUnlisted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EditableVersionRequestedStatus) MarshalText() ([]byte, error) {
	switch s {
	case EditableVersionRequestedStatusListed:
		return []byte(s), nil
	case EditableVersionRequestedStatusArchived:
		return []byte(s), nil
	case EditableVersionRequestedStatusDraft:
		return []byte(s), nil
	case EditableVersionRequestedStatusUnlisted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EditableVersionRequestedStatus) UnmarshalText(data []byte) error {
	switch EditableVersionRequestedStatus(data) {
	case EditableVersionRequestedStatusListed:
		*s = EditableVersionRequestedStatusListed
		return nil
	case EditableVersionRequestedStatusArchived:
		*s = EditableVersionRequestedStatusArchived
		return nil
	case EditableVersionRequestedStatusDraft:
		*s = EditableVersionRequestedStatusDraft
		return nil
	case EditableVersionRequestedStatusUnlisted:
		*s = EditableVersionRequestedStatusUnlisted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type EditableVersionStatus string

const (
	EditableVersionStatusListed    EditableVersionStatus = "listed"
	EditableVersionStatusArchived  EditableVersionStatus = "archived"
	EditableVersionStatusDraft     EditableVersionStatus = "draft"
	EditableVersionStatusUnlisted  EditableVersionStatus = "unlisted"
	EditableVersionStatusScheduled EditableVersionStatus = "scheduled"
	EditableVersionStatusUnknown   EditableVersionStatus = "unknown"
)

// AllValues returns all EditableVersionStatus values.
func (EditableVersionStatus) AllValues() []EditableVersionStatus {
	return []EditableVersionStatus{
		EditableVersionStatusListed,
		EditableVersionStatusArchived,
		EditableVersionStatusDraft,
		EditableVersionStatusUnlisted,
		EditableVersionStatusScheduled,
		EditableVersionStatusUnknown,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EditableVersionStatus) MarshalText() ([]byte, error) {
	switch s {
	case EditableVersionStatusListed:
		return []byte(s), nil
	case EditableVersionStatusArchived:
		return []byte(s), nil
	case EditableVersionStatusDraft:
		return []byte(s), nil
	case EditableVersionStatusUnlisted:
		return []byte(s), nil
	case EditableVersionStatusScheduled:
		return []byte(s), nil
	case EditableVersionStatusUnknown:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EditableVersionStatus) UnmarshalText(data []byte) error {
	switch EditableVersionStatus(data) {
	case EditableVersionStatusListed:
		*s = EditableVersionStatusListed
		return nil
	case EditableVersionStatusArchived:
		*s = EditableVersionStatusArchived
		return nil
	case EditableVersionStatusDraft:
		*s = EditableVersionStatusDraft
		return nil
	case EditableVersionStatusUnlisted:
		*s = EditableVersionStatusUnlisted
		return nil
	case EditableVersionStatusScheduled:
		*s = EditableVersionStatusScheduled
		return nil
	case EditableVersionStatusUnknown:
		*s = EditableVersionStatusUnknown
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The release channel for this version.
type EditableVersionVersionType string

const (
	EditableVersionVersionTypeRelease EditableVersionVersionType = "release"
	EditableVersionVersionTypeBeta    EditableVersionVersionType = "beta"
	EditableVersionVersionTypeAlpha   EditableVersionVersionType = "alpha"
)

// AllValues returns all EditableVersionVersionType values.
func (EditableVersionVersionType) AllValues() []EditableVersionVersionType {
	return []EditableVersionVersionType{
		EditableVersionVersionTypeRelease,
		EditableVersionVersionTypeBeta,
		EditableVersionVersionTypeAlpha,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EditableVersionVersionType) MarshalText() ([]byte, error) {
	switch s {
	case EditableVersionVersionTypeRelease:
		return []byte(s), nil
	case EditableVersionVersionTypeBeta:
		return []byte(s), nil
	case EditableVersionVersionTypeAlpha:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EditableVersionVersionType) UnmarshalText(data []byte) error {
	switch EditableVersionVersionType(data) {
	case EditableVersionVersionTypeRelease:
		*s = EditableVersionVersionTypeRelease
		return nil
	case EditableVersionVersionTypeBeta:
		*s = EditableVersionVersionTypeBeta
		return nil
	case EditableVersionVersionTypeAlpha:
		*s = EditableVersionVersionTypeAlpha
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// FollowProjectNoContent is response for FollowProject operation.
type FollowProjectNoContent struct{}

func (*FollowProjectNoContent) followProjectRes() {}

// A list of the recommended and latest versions for each Minecraft release.
// Ref: #/components/schemas/ForgeUpdateCheckerPromos
type ForgeUpdateCheckerPromos struct {
	// The mod version that is recommended for `{version}`. Excludes versions with the `alpha` and `beta`
	// version types.
	VersionMinusRecommended OptString `json:"{version}-recommended"`
	// The latest mod version for `{version}`. Shows versions with the `alpha` and `beta` version types.
	VersionMinusLatest OptString `json:"{version}-latest"`
}

// GetVersionMinusRecommended returns the value of VersionMinusRecommended.
func (s *ForgeUpdateCheckerPromos) GetVersionMinusRecommended() OptString {
	return s.VersionMinusRecommended
}

// GetVersionMinusLatest returns the value of VersionMinusLatest.
func (s *ForgeUpdateCheckerPromos) GetVersionMinusLatest() OptString {
	return s.VersionMinusLatest
}

// SetVersionMinusRecommended sets the value of VersionMinusRecommended.
func (s *ForgeUpdateCheckerPromos) SetVersionMinusRecommended(val OptString) {
	s.VersionMinusRecommended = val
}

// SetVersionMinusLatest sets the value of VersionMinusLatest.
func (s *ForgeUpdateCheckerPromos) SetVersionMinusLatest(val OptString) {
	s.VersionMinusLatest = val
}

// Mod version information that can be consumed by Forge's update checker.
// Ref: #/components/schemas/ForgeUpdates
type ForgeUpdates struct {
	// A link to the mod page.
	Homepage OptString                   `json:"homepage"`
	Promos   OptForgeUpdateCheckerPromos `json:"promos"`
}

// GetHomepage returns the value of Homepage.
func (s *ForgeUpdates) GetHomepage() OptString {
	return s.Homepage
}

// GetPromos returns the value of Promos.
func (s *ForgeUpdates) GetPromos() OptForgeUpdateCheckerPromos {
	return s.Promos
}

// SetHomepage sets the value of Homepage.
func (s *ForgeUpdates) SetHomepage(val OptString) {
	s.Homepage = val
}

// SetPromos sets the value of Promos.
func (s *ForgeUpdates) SetPromos(val OptForgeUpdateCheckerPromos) {
	s.Promos = val
}

func (*ForgeUpdates) forgeUpdatesRes() {}

// Ref: #/components/schemas/GalleryImage
type GalleryImage struct {
	// The URL of the gallery image.
	URL string `json:"url"`
	// Whether the image is featured in the gallery.
	Featured bool `json:"featured"`
	// The title of the gallery image.
	Title OptNilString `json:"title"`
	// The description of the gallery image.
	Description OptNilString `json:"description"`
	// The date and time the gallery image was created.
	Created string `json:"created"`
	// The order of the gallery image. Gallery images are sorted by this field and then alphabetically by
	// title.
	Ordering OptInt `json:"ordering"`
}

// GetURL returns the value of URL.
func (s *GalleryImage) GetURL() string {
	return s.URL
}

// GetFeatured returns the value of Featured.
func (s *GalleryImage) GetFeatured() bool {
	return s.Featured
}

// GetTitle returns the value of Title.
func (s *GalleryImage) GetTitle() OptNilString {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *GalleryImage) GetDescription() OptNilString {
	return s.Description
}

// GetCreated returns the value of Created.
func (s *GalleryImage) GetCreated() string {
	return s.Created
}

// GetOrdering returns the value of Ordering.
func (s *GalleryImage) GetOrdering() OptInt {
	return s.Ordering
}

// SetURL sets the value of URL.
func (s *GalleryImage) SetURL(val string) {
	s.URL = val
}

// SetFeatured sets the value of Featured.
func (s *GalleryImage) SetFeatured(val bool) {
	s.Featured = val
}

// SetTitle sets the value of Title.
func (s *GalleryImage) SetTitle(val OptNilString) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *GalleryImage) SetDescription(val OptNilString) {
	s.Description = val
}

// SetCreated sets the value of Created.
func (s *GalleryImage) SetCreated(val string) {
	s.Created = val
}

// SetOrdering sets the value of Ordering.
func (s *GalleryImage) SetOrdering(val OptInt) {
	s.Ordering = val
}

// Ref: #/components/schemas/GameVersionTag
type GameVersionTag struct {
	// The name/number of the game version.
	Version string `json:"version"`
	// The type of the game version.
	VersionType GameVersionTagVersionType `json:"version_type"`
	// The date of the game version release.
	Date string `json:"date"`
	// Whether or not this is a major version, used for Featured Versions.
	Major bool `json:"major"`
}

// GetVersion returns the value of Version.
func (s *GameVersionTag) GetVersion() string {
	return s.Version
}

// GetVersionType returns the value of VersionType.
func (s *GameVersionTag) GetVersionType() GameVersionTagVersionType {
	return s.VersionType
}

// GetDate returns the value of Date.
func (s *GameVersionTag) GetDate() string {
	return s.Date
}

// GetMajor returns the value of Major.
func (s *GameVersionTag) GetMajor() bool {
	return s.Major
}

// SetVersion sets the value of Version.
func (s *GameVersionTag) SetVersion(val string) {
	s.Version = val
}

// SetVersionType sets the value of VersionType.
func (s *GameVersionTag) SetVersionType(val GameVersionTagVersionType) {
	s.VersionType = val
}

// SetDate sets the value of Date.
func (s *GameVersionTag) SetDate(val string) {
	s.Date = val
}

// SetMajor sets the value of Major.
func (s *GameVersionTag) SetMajor(val bool) {
	s.Major = val
}

// The type of the game version.
type GameVersionTagVersionType string

const (
	GameVersionTagVersionTypeRelease  GameVersionTagVersionType = "release"
	GameVersionTagVersionTypeSnapshot GameVersionTagVersionType = "snapshot"
	GameVersionTagVersionTypeAlpha    GameVersionTagVersionType = "alpha"
	GameVersionTagVersionTypeBeta     GameVersionTagVersionType = "beta"
)

// AllValues returns all GameVersionTagVersionType values.
func (GameVersionTagVersionType) AllValues() []GameVersionTagVersionType {
	return []GameVersionTagVersionType{
		GameVersionTagVersionTypeRelease,
		GameVersionTagVersionTypeSnapshot,
		GameVersionTagVersionTypeAlpha,
		GameVersionTagVersionTypeBeta,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GameVersionTagVersionType) MarshalText() ([]byte, error) {
	switch s {
	case GameVersionTagVersionTypeRelease:
		return []byte(s), nil
	case GameVersionTagVersionTypeSnapshot:
		return []byte(s), nil
	case GameVersionTagVersionTypeAlpha:
		return []byte(s), nil
	case GameVersionTagVersionTypeBeta:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GameVersionTagVersionType) UnmarshalText(data []byte) error {
	switch GameVersionTagVersionType(data) {
	case GameVersionTagVersionTypeRelease:
		*s = GameVersionTagVersionTypeRelease
		return nil
	case GameVersionTagVersionTypeSnapshot:
		*s = GameVersionTagVersionTypeSnapshot
		return nil
	case GameVersionTagVersionTypeAlpha:
		*s = GameVersionTagVersionTypeAlpha
		return nil
	case GameVersionTagVersionTypeBeta:
		*s = GameVersionTagVersionTypeBeta
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// GetDependenciesNotFound is response for GetDependencies operation.
type GetDependenciesNotFound struct{}

func (*GetDependenciesNotFound) getDependenciesRes() {}

// GetFollowedProjectsNotFound is response for GetFollowedProjects operation.
type GetFollowedProjectsNotFound struct{}

func (*GetFollowedProjectsNotFound) getFollowedProjectsRes() {}

type GetFollowedProjectsOKApplicationJSON []Project

func (*GetFollowedProjectsOKApplicationJSON) getFollowedProjectsRes() {}

// GetLatestVersionFromHashBadRequest is response for GetLatestVersionFromHash operation.
type GetLatestVersionFromHashBadRequest struct{}

func (*GetLatestVersionFromHashBadRequest) getLatestVersionFromHashRes() {}

// Ref: #/components/schemas/GetLatestVersionFromHashBody
type GetLatestVersionFromHashBody struct {
	Loaders      []string `json:"loaders"`
	GameVersions []string `json:"game_versions"`
}

// GetLoaders returns the value of Loaders.
func (s *GetLatestVersionFromHashBody) GetLoaders() []string {
	return s.Loaders
}

// GetGameVersions returns the value of GameVersions.
func (s *GetLatestVersionFromHashBody) GetGameVersions() []string {
	return s.GameVersions
}

// SetLoaders sets the value of Loaders.
func (s *GetLatestVersionFromHashBody) SetLoaders(val []string) {
	s.Loaders = val
}

// SetGameVersions sets the value of GameVersions.
func (s *GetLatestVersionFromHashBody) SetGameVersions(val []string) {
	s.GameVersions = val
}

// GetLatestVersionFromHashNotFound is response for GetLatestVersionFromHash operation.
type GetLatestVersionFromHashNotFound struct{}

func (*GetLatestVersionFromHashNotFound) getLatestVersionFromHashRes() {}

// GetLatestVersionsFromHashesBadRequest is response for GetLatestVersionsFromHashes operation.
type GetLatestVersionsFromHashesBadRequest struct{}

func (*GetLatestVersionsFromHashesBadRequest) getLatestVersionsFromHashesRes() {}

// Merged schema.
// Ref: #/components/schemas/GetLatestVersionsFromHashesBody
type GetLatestVersionsFromHashesBody struct {
	Hashes       []string                                 `json:"hashes"`
	Algorithm    GetLatestVersionsFromHashesBodyAlgorithm `json:"algorithm"`
	Loaders      []string                                 `json:"loaders"`
	GameVersions []string                                 `json:"game_versions"`
}

// GetHashes returns the value of Hashes.
func (s *GetLatestVersionsFromHashesBody) GetHashes() []string {
	return s.Hashes
}

// GetAlgorithm returns the value of Algorithm.
func (s *GetLatestVersionsFromHashesBody) GetAlgorithm() GetLatestVersionsFromHashesBodyAlgorithm {
	return s.Algorithm
}

// GetLoaders returns the value of Loaders.
func (s *GetLatestVersionsFromHashesBody) GetLoaders() []string {
	return s.Loaders
}

// GetGameVersions returns the value of GameVersions.
func (s *GetLatestVersionsFromHashesBody) GetGameVersions() []string {
	return s.GameVersions
}

// SetHashes sets the value of Hashes.
func (s *GetLatestVersionsFromHashesBody) SetHashes(val []string) {
	s.Hashes = val
}

// SetAlgorithm sets the value of Algorithm.
func (s *GetLatestVersionsFromHashesBody) SetAlgorithm(val GetLatestVersionsFromHashesBodyAlgorithm) {
	s.Algorithm = val
}

// SetLoaders sets the value of Loaders.
func (s *GetLatestVersionsFromHashesBody) SetLoaders(val []string) {
	s.Loaders = val
}

// SetGameVersions sets the value of GameVersions.
func (s *GetLatestVersionsFromHashesBody) SetGameVersions(val []string) {
	s.GameVersions = val
}

type GetLatestVersionsFromHashesBodyAlgorithm string

const (
	GetLatestVersionsFromHashesBodyAlgorithmSHA1   GetLatestVersionsFromHashesBodyAlgorithm = "sha1"
	GetLatestVersionsFromHashesBodyAlgorithmSha512 GetLatestVersionsFromHashesBodyAlgorithm = "sha512"
)

// AllValues returns all GetLatestVersionsFromHashesBodyAlgorithm values.
func (GetLatestVersionsFromHashesBodyAlgorithm) AllValues() []GetLatestVersionsFromHashesBodyAlgorithm {
	return []GetLatestVersionsFromHashesBodyAlgorithm{
		GetLatestVersionsFromHashesBodyAlgorithmSHA1,
		GetLatestVersionsFromHashesBodyAlgorithmSha512,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetLatestVersionsFromHashesBodyAlgorithm) MarshalText() ([]byte, error) {
	switch s {
	case GetLatestVersionsFromHashesBodyAlgorithmSHA1:
		return []byte(s), nil
	case GetLatestVersionsFromHashesBodyAlgorithmSha512:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetLatestVersionsFromHashesBodyAlgorithm) UnmarshalText(data []byte) error {
	switch GetLatestVersionsFromHashesBodyAlgorithm(data) {
	case GetLatestVersionsFromHashesBodyAlgorithmSHA1:
		*s = GetLatestVersionsFromHashesBodyAlgorithmSHA1
		return nil
	case GetLatestVersionsFromHashesBodyAlgorithmSha512:
		*s = GetLatestVersionsFromHashesBodyAlgorithmSha512
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// GetNotificationNotFound is response for GetNotification operation.
type GetNotificationNotFound struct{}

func (*GetNotificationNotFound) getNotificationRes() {}

// GetNotificationsNotFound is response for GetNotifications operation.
type GetNotificationsNotFound struct{}

func (*GetNotificationsNotFound) getNotificationsRes() {}

type GetNotificationsOKApplicationJSON []Notification

func (*GetNotificationsOKApplicationJSON) getNotificationsRes() {}

// GetOpenReportsNotFound is response for GetOpenReports operation.
type GetOpenReportsNotFound struct{}

func (*GetOpenReportsNotFound) getOpenReportsRes() {}

type GetOpenReportsOKApplicationJSON []Report

func (*GetOpenReportsOKApplicationJSON) getOpenReportsRes() {}

// GetPayoutHistoryNotFound is response for GetPayoutHistory operation.
type GetPayoutHistoryNotFound struct{}

func (*GetPayoutHistoryNotFound) getPayoutHistoryRes() {}

// GetProjectNotFound is response for GetProject operation.
type GetProjectNotFound struct{}

func (*GetProjectNotFound) getProjectRes() {}

// GetProjectTeamMembersNotFound is response for GetProjectTeamMembers operation.
type GetProjectTeamMembersNotFound struct{}

func (*GetProjectTeamMembersNotFound) getProjectTeamMembersRes() {}

type GetProjectTeamMembersOKApplicationJSON []TeamMember

func (*GetProjectTeamMembersOKApplicationJSON) getProjectTeamMembersRes() {}

// GetProjectVersionsNotFound is response for GetProjectVersions operation.
type GetProjectVersionsNotFound struct{}

func (*GetProjectVersionsNotFound) getProjectVersionsRes() {}

type GetProjectVersionsOKApplicationJSON []Version

func (*GetProjectVersionsOKApplicationJSON) getProjectVersionsRes() {}

// GetReportNotFound is response for GetReport operation.
type GetReportNotFound struct{}

func (*GetReportNotFound) getReportRes() {}

// GetReportsNotFound is response for GetReports operation.
type GetReportsNotFound struct{}

func (*GetReportsNotFound) getReportsRes() {}

type GetReportsOKApplicationJSON []Report

func (*GetReportsOKApplicationJSON) getReportsRes() {}

// GetThreadNotFound is response for GetThread operation.
type GetThreadNotFound struct{}

func (*GetThreadNotFound) getThreadRes() {}

// GetThreadsNotFound is response for GetThreads operation.
type GetThreadsNotFound struct{}

func (*GetThreadsNotFound) getThreadsRes() {}

type GetThreadsOKApplicationJSON []Thread

func (*GetThreadsOKApplicationJSON) getThreadsRes() {}

// GetUserNotFound is response for GetUser operation.
type GetUserNotFound struct{}

func (*GetUserNotFound) getUserRes() {}

// GetUserNotificationsNotFound is response for GetUserNotifications operation.
type GetUserNotificationsNotFound struct{}

func (*GetUserNotificationsNotFound) getUserNotificationsRes() {}

type GetUserNotificationsOKApplicationJSON []Notification

func (*GetUserNotificationsOKApplicationJSON) getUserNotificationsRes() {}

// GetUserProjectsNotFound is response for GetUserProjects operation.
type GetUserProjectsNotFound struct{}

func (*GetUserProjectsNotFound) getUserProjectsRes() {}

type GetUserProjectsOKApplicationJSON []Project

func (*GetUserProjectsOKApplicationJSON) getUserProjectsRes() {}

// GetVersionFromIdOrNumberNotFound is response for GetVersionFromIdOrNumber operation.
type GetVersionFromIdOrNumberNotFound struct{}

func (*GetVersionFromIdOrNumberNotFound) getVersionFromIdOrNumberRes() {}

// GetVersionNotFound is response for GetVersion operation.
type GetVersionNotFound struct{}

func (*GetVersionNotFound) getVersionRes() {}

// A list of hashes and the algorithm used to create them.
// Ref: #/components/schemas/HashList
type HashList struct {
	Hashes    []string          `json:"hashes"`
	Algorithm HashListAlgorithm `json:"algorithm"`
}

// GetHashes returns the value of Hashes.
func (s *HashList) GetHashes() []string {
	return s.Hashes
}

// GetAlgorithm returns the value of Algorithm.
func (s *HashList) GetAlgorithm() HashListAlgorithm {
	return s.Algorithm
}

// SetHashes sets the value of Hashes.
func (s *HashList) SetHashes(val []string) {
	s.Hashes = val
}

// SetAlgorithm sets the value of Algorithm.
func (s *HashList) SetAlgorithm(val HashListAlgorithm) {
	s.Algorithm = val
}

type HashListAlgorithm string

const (
	HashListAlgorithmSHA1   HashListAlgorithm = "sha1"
	HashListAlgorithmSha512 HashListAlgorithm = "sha512"
)

// AllValues returns all HashListAlgorithm values.
func (HashListAlgorithm) AllValues() []HashListAlgorithm {
	return []HashListAlgorithm{
		HashListAlgorithmSHA1,
		HashListAlgorithmSha512,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s HashListAlgorithm) MarshalText() ([]byte, error) {
	switch s {
	case HashListAlgorithmSHA1:
		return []byte(s), nil
	case HashListAlgorithmSha512:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HashListAlgorithm) UnmarshalText(data []byte) error {
	switch HashListAlgorithm(data) {
	case HashListAlgorithmSHA1:
		*s = HashListAlgorithmSHA1
		return nil
	case HashListAlgorithmSha512:
		*s = HashListAlgorithmSha512
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A map from hashes to versions.
// Ref: #/components/schemas/HashVersionMap
type HashVersionMap map[string]Version

func (s *HashVersionMap) init() HashVersionMap {
	m := *s
	if m == nil {
		m = map[string]Version{}
		*s = m
	}
	return m
}

func (*HashVersionMap) getLatestVersionsFromHashesRes() {}
func (*HashVersionMap) versionsFromHashesRes()          {}

// Ref: #/components/schemas/InvalidInputError
type InvalidInputError struct {
	// The name of the error.
	Error string `json:"error"`
	// The contents of the error.
	Description string `json:"description"`
}

// GetError returns the value of Error.
func (s *InvalidInputError) GetError() string {
	return s.Error
}

// GetDescription returns the value of Description.
func (s *InvalidInputError) GetDescription() string {
	return s.Description
}

// SetError sets the value of Error.
func (s *InvalidInputError) SetError(val string) {
	s.Error = val
}

// SetDescription sets the value of Description.
func (s *InvalidInputError) SetDescription(val string) {
	s.Description = val
}

func (*InvalidInputError) addGalleryImageRes()    {}
func (*InvalidInputError) changeProjectIconRes()  {}
func (*InvalidInputError) changeUserIconRes()     {}
func (*InvalidInputError) createVersionRes()      {}
func (*InvalidInputError) deleteGalleryImageRes() {}
func (*InvalidInputError) deleteProjectIconRes()  {}
func (*InvalidInputError) deleteProjectRes()      {}
func (*InvalidInputError) deleteUserIconRes()     {}
func (*InvalidInputError) followProjectRes()      {}
func (*InvalidInputError) forgeUpdatesRes()       {}
func (*InvalidInputError) licenseTextRes()        {}
func (*InvalidInputError) modifyReportRes()       {}
func (*InvalidInputError) patchProjectsRes()      {}
func (*InvalidInputError) randomProjectsRes()     {}
func (*InvalidInputError) scheduleProjectRes()    {}
func (*InvalidInputError) scheduleVersionRes()    {}
func (*InvalidInputError) searchProjectsRes()     {}
func (*InvalidInputError) sendThreadMessageRes()  {}
func (*InvalidInputError) submitReportRes()       {}
func (*InvalidInputError) unfollowProjectRes()    {}

// JoinTeamNoContent is response for JoinTeam operation.
type JoinTeamNoContent struct{}

func (*JoinTeamNoContent) joinTeamRes() {}

// JoinTeamNotFound is response for JoinTeam operation.
type JoinTeamNotFound struct{}

func (*JoinTeamNotFound) joinTeamRes() {}

// A full license.
// Ref: #/components/schemas/License
type License struct {
	Title OptString `json:"title"`
	Body  OptString `json:"body"`
}

// GetTitle returns the value of Title.
func (s *License) GetTitle() OptString {
	return s.Title
}

// GetBody returns the value of Body.
func (s *License) GetBody() OptString {
	return s.Body
}

// SetTitle sets the value of Title.
func (s *License) SetTitle(val OptString) {
	s.Title = val
}

// SetBody sets the value of Body.
func (s *License) SetBody(val OptString) {
	s.Body = val
}

func (*License) licenseTextRes() {}

// A short overview of a license.
// Ref: #/components/schemas/LicenseTag
type LicenseTag struct {
	// The short identifier of the license.
	Short string `json:"short"`
	// The full name of the license.
	Name string `json:"name"`
}

// GetShort returns the value of Short.
func (s *LicenseTag) GetShort() string {
	return s.Short
}

// GetName returns the value of Name.
func (s *LicenseTag) GetName() string {
	return s.Name
}

// SetShort sets the value of Short.
func (s *LicenseTag) SetShort(val string) {
	s.Short = val
}

// SetName sets the value of Name.
func (s *LicenseTag) SetName(val string) {
	s.Name = val
}

// Ref: #/components/schemas/LoaderTag
type LoaderTag struct {
	// The SVG icon of a loader.
	Icon string `json:"icon"`
	// The name of the loader.
	Name string `json:"name"`
	// The project types that this loader is applicable to.
	SupportedProjectTypes []string `json:"supported_project_types"`
}

// GetIcon returns the value of Icon.
func (s *LoaderTag) GetIcon() string {
	return s.Icon
}

// GetName returns the value of Name.
func (s *LoaderTag) GetName() string {
	return s.Name
}

// GetSupportedProjectTypes returns the value of SupportedProjectTypes.
func (s *LoaderTag) GetSupportedProjectTypes() []string {
	return s.SupportedProjectTypes
}

// SetIcon sets the value of Icon.
func (s *LoaderTag) SetIcon(val string) {
	s.Icon = val
}

// SetName sets the value of Name.
func (s *LoaderTag) SetName(val string) {
	s.Name = val
}

// SetSupportedProjectTypes sets the value of SupportedProjectTypes.
func (s *LoaderTag) SetSupportedProjectTypes(val []string) {
	s.SupportedProjectTypes = val
}

// A message that a moderator sent regarding the project.
//
// Deprecated: schema marks this type as deprecated.
// Ref: #/components/schemas/ModeratorMessage
type ModeratorMessage struct {
	// The message that a moderator has left for the project.
	Message OptString `json:"message"`
	// The longer body of the message that a moderator has left for the project.
	Body OptNilString `json:"body"`
}

// GetMessage returns the value of Message.
func (s *ModeratorMessage) GetMessage() OptString {
	return s.Message
}

// GetBody returns the value of Body.
func (s *ModeratorMessage) GetBody() OptNilString {
	return s.Body
}

// SetMessage sets the value of Message.
func (s *ModeratorMessage) SetMessage(val OptString) {
	s.Message = val
}

// SetBody sets the value of Body.
func (s *ModeratorMessage) SetBody(val OptNilString) {
	s.Body = val
}

// ModifyGalleryImageNoContent is response for ModifyGalleryImage operation.
type ModifyGalleryImageNoContent struct{}

func (*ModifyGalleryImageNoContent) modifyGalleryImageRes() {}

// ModifyGalleryImageNotFound is response for ModifyGalleryImage operation.
type ModifyGalleryImageNotFound struct{}

func (*ModifyGalleryImageNotFound) modifyGalleryImageRes() {}

// ModifyProjectNoContent is response for ModifyProject operation.
type ModifyProjectNoContent struct{}

func (*ModifyProjectNoContent) modifyProjectRes() {}

// ModifyProjectNotFound is response for ModifyProject operation.
type ModifyProjectNotFound struct{}

func (*ModifyProjectNotFound) modifyProjectRes() {}

// ModifyReportNoContent is response for ModifyReport operation.
type ModifyReportNoContent struct{}

func (*ModifyReportNoContent) modifyReportRes() {}

// ModifyReportNotFound is response for ModifyReport operation.
type ModifyReportNotFound struct{}

func (*ModifyReportNotFound) modifyReportRes() {}

type ModifyReportReq struct {
	// The contents of the report.
	Body OptString `json:"body"`
	// Whether the thread should be closed.
	Closed OptBool `json:"closed"`
}

// GetBody returns the value of Body.
func (s *ModifyReportReq) GetBody() OptString {
	return s.Body
}

// GetClosed returns the value of Closed.
func (s *ModifyReportReq) GetClosed() OptBool {
	return s.Closed
}

// SetBody sets the value of Body.
func (s *ModifyReportReq) SetBody(val OptString) {
	s.Body = val
}

// SetClosed sets the value of Closed.
func (s *ModifyReportReq) SetClosed(val OptBool) {
	s.Closed = val
}

type ModifyTeamMemberBody jx.Raw

// ModifyTeamMemberNoContent is response for ModifyTeamMember operation.
type ModifyTeamMemberNoContent struct{}

func (*ModifyTeamMemberNoContent) modifyTeamMemberRes() {}

// ModifyTeamMemberNotFound is response for ModifyTeamMember operation.
type ModifyTeamMemberNotFound struct{}

func (*ModifyTeamMemberNotFound) modifyTeamMemberRes() {}

// ModifyUserNoContent is response for ModifyUser operation.
type ModifyUserNoContent struct{}

func (*ModifyUserNoContent) modifyUserRes() {}

// ModifyUserNotFound is response for ModifyUser operation.
type ModifyUserNotFound struct{}

func (*ModifyUserNotFound) modifyUserRes() {}

// ModifyVersionNoContent is response for ModifyVersion operation.
type ModifyVersionNoContent struct{}

func (*ModifyVersionNoContent) modifyVersionRes() {}

// ModifyVersionNotFound is response for ModifyVersion operation.
type ModifyVersionNotFound struct{}

func (*ModifyVersionNotFound) modifyVersionRes() {}

// NewNilEditableFileTypeFileType returns new NilEditableFileTypeFileType with value set to v.
func NewNilEditableFileTypeFileType(v EditableFileTypeFileType) NilEditableFileTypeFileType {
	return NilEditableFileTypeFileType{
		Value: v,
	}
}

// NilEditableFileTypeFileType is nullable EditableFileTypeFileType.
type NilEditableFileTypeFileType struct {
	Value EditableFileTypeFileType
	Null  bool
}

// SetTo sets value to v.
func (o *NilEditableFileTypeFileType) SetTo(v EditableFileTypeFileType) {
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o NilEditableFileTypeFileType) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *NilEditableFileTypeFileType) SetToNull() {
	o.Null = true
	var v EditableFileTypeFileType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilEditableFileTypeFileType) Get() (v EditableFileTypeFileType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilEditableFileTypeFileType) Or(d EditableFileTypeFileType) EditableFileTypeFileType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilGalleryImage returns new NilGalleryImage with value set to v.
func NewNilGalleryImage(v GalleryImage) NilGalleryImage {
	return NilGalleryImage{
		Value: v,
	}
}

// NilGalleryImage is nullable GalleryImage.
type NilGalleryImage struct {
	Value GalleryImage
	Null  bool
}

// SetTo sets value to v.
func (o *NilGalleryImage) SetTo(v GalleryImage) {
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o NilGalleryImage) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *NilGalleryImage) SetToNull() {
	o.Null = true
	var v GalleryImage
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilGalleryImage) Get() (v GalleryImage, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilGalleryImage) Or(d GalleryImage) GalleryImage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Notification
type Notification struct {
	// The id of the notification.
	ID string `json:"id"`
	// The id of the user who received the notification.
	UserID string `json:"user_id"`
	// The type of notification.
	Type OptNilNotificationType `json:"type"`
	// The title of the notification.
	Title string `json:"title"`
	// The body text of the notification.
	Text string `json:"text"`
	// A link to the related project or version.
	Link string `json:"link"`
	// Whether the notification has been read or not.
	Read bool `json:"read"`
	// The time at which the notification was created.
	Created string `json:"created"`
	// A list of actions that can be performed.
	Actions []NotificationAction `json:"actions"`
}

// GetID returns the value of ID.
func (s *Notification) GetID() string {
	return s.ID
}

// GetUserID returns the value of UserID.
func (s *Notification) GetUserID() string {
	return s.UserID
}

// GetType returns the value of Type.
func (s *Notification) GetType() OptNilNotificationType {
	return s.Type
}

// GetTitle returns the value of Title.
func (s *Notification) GetTitle() string {
	return s.Title
}

// GetText returns the value of Text.
func (s *Notification) GetText() string {
	return s.Text
}

// GetLink returns the value of Link.
func (s *Notification) GetLink() string {
	return s.Link
}

// GetRead returns the value of Read.
func (s *Notification) GetRead() bool {
	return s.Read
}

// GetCreated returns the value of Created.
func (s *Notification) GetCreated() string {
	return s.Created
}

// GetActions returns the value of Actions.
func (s *Notification) GetActions() []NotificationAction {
	return s.Actions
}

// SetID sets the value of ID.
func (s *Notification) SetID(val string) {
	s.ID = val
}

// SetUserID sets the value of UserID.
func (s *Notification) SetUserID(val string) {
	s.UserID = val
}

// SetType sets the value of Type.
func (s *Notification) SetType(val OptNilNotificationType) {
	s.Type = val
}

// SetTitle sets the value of Title.
func (s *Notification) SetTitle(val string) {
	s.Title = val
}

// SetText sets the value of Text.
func (s *Notification) SetText(val string) {
	s.Text = val
}

// SetLink sets the value of Link.
func (s *Notification) SetLink(val string) {
	s.Link = val
}

// SetRead sets the value of Read.
func (s *Notification) SetRead(val bool) {
	s.Read = val
}

// SetCreated sets the value of Created.
func (s *Notification) SetCreated(val string) {
	s.Created = val
}

// SetActions sets the value of Actions.
func (s *Notification) SetActions(val []NotificationAction) {
	s.Actions = val
}

func (*Notification) getNotificationRes() {}

// An action that can be performed on a notification.
// Ref: #/components/schemas/NotificationAction
type NotificationAction struct {
	// The friendly name for this action.
	Title OptString `json:"title"`
	// The HTTP code and path to request in order to perform this action.
	ActionRoute []string `json:"action_route"`
}

// GetTitle returns the value of Title.
func (s *NotificationAction) GetTitle() OptString {
	return s.Title
}

// GetActionRoute returns the value of ActionRoute.
func (s *NotificationAction) GetActionRoute() []string {
	return s.ActionRoute
}

// SetTitle sets the value of Title.
func (s *NotificationAction) SetTitle(val OptString) {
	s.Title = val
}

// SetActionRoute sets the value of ActionRoute.
func (s *NotificationAction) SetActionRoute(val []string) {
	s.ActionRoute = val
}

// The type of notification.
type NotificationType string

const (
	NotificationTypeProjectUpdate    NotificationType = "project_update"
	NotificationTypeTeamInvite       NotificationType = "team_invite"
	NotificationTypeStatusChange     NotificationType = "status_change"
	NotificationTypeModeratorMessage NotificationType = "moderator_message"
)

// AllValues returns all NotificationType values.
func (NotificationType) AllValues() []NotificationType {
	return []NotificationType{
		NotificationTypeProjectUpdate,
		NotificationTypeTeamInvite,
		NotificationTypeStatusChange,
		NotificationTypeModeratorMessage,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NotificationType) MarshalText() ([]byte, error) {
	switch s {
	case NotificationTypeProjectUpdate:
		return []byte(s), nil
	case NotificationTypeTeamInvite:
		return []byte(s), nil
	case NotificationTypeStatusChange:
		return []byte(s), nil
	case NotificationTypeModeratorMessage:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NotificationType) UnmarshalText(data []byte) error {
	switch NotificationType(data) {
	case NotificationTypeProjectUpdate:
		*s = NotificationTypeProjectUpdate
		return nil
	case NotificationTypeTeamInvite:
		*s = NotificationTypeTeamInvite
		return nil
	case NotificationTypeStatusChange:
		*s = NotificationTypeStatusChange
		return nil
	case NotificationTypeModeratorMessage:
		*s = NotificationTypeModeratorMessage
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatableReport returns new OptCreatableReport with value set to v.
func NewOptCreatableReport(v CreatableReport) OptCreatableReport {
	return OptCreatableReport{
		Value: v,
		Set:   true,
	}
}

// OptCreatableReport is optional CreatableReport.
type OptCreatableReport struct {
	Value CreatableReport
	Set   bool
}

// IsSet returns true if OptCreatableReport was set.
func (o OptCreatableReport) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatableReport) Reset() {
	var v CreatableReport
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatableReport) SetTo(v CreatableReport) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatableReport) Get() (v CreatableReport, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatableReport) Or(d CreatableReport) CreatableReport {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatableVersionStatus returns new OptCreatableVersionStatus with value set to v.
func NewOptCreatableVersionStatus(v CreatableVersionStatus) OptCreatableVersionStatus {
	return OptCreatableVersionStatus{
		Value: v,
		Set:   true,
	}
}

// OptCreatableVersionStatus is optional CreatableVersionStatus.
type OptCreatableVersionStatus struct {
	Value CreatableVersionStatus
	Set   bool
}

// IsSet returns true if OptCreatableVersionStatus was set.
func (o OptCreatableVersionStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatableVersionStatus) Reset() {
	var v CreatableVersionStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatableVersionStatus) SetTo(v CreatableVersionStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatableVersionStatus) Get() (v CreatableVersionStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatableVersionStatus) Or(d CreatableVersionStatus) CreatableVersionStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateVersionBodyMultipart returns new OptCreateVersionBodyMultipart with value set to v.
func NewOptCreateVersionBodyMultipart(v CreateVersionBodyMultipart) OptCreateVersionBodyMultipart {
	return OptCreateVersionBodyMultipart{
		Value: v,
		Set:   true,
	}
}

// OptCreateVersionBodyMultipart is optional CreateVersionBodyMultipart.
type OptCreateVersionBodyMultipart struct {
	Value CreateVersionBodyMultipart
	Set   bool
}

// IsSet returns true if OptCreateVersionBodyMultipart was set.
func (o OptCreateVersionBodyMultipart) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateVersionBodyMultipart) Reset() {
	var v CreateVersionBodyMultipart
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateVersionBodyMultipart) SetTo(v CreateVersionBodyMultipart) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateVersionBodyMultipart) Get() (v CreateVersionBodyMultipart, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateVersionBodyMultipart) Or(d CreateVersionBodyMultipart) CreateVersionBodyMultipart {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEditableProject returns new OptEditableProject with value set to v.
func NewOptEditableProject(v EditableProject) OptEditableProject {
	return OptEditableProject{
		Value: v,
		Set:   true,
	}
}

// OptEditableProject is optional EditableProject.
type OptEditableProject struct {
	Value EditableProject
	Set   bool
}

// IsSet returns true if OptEditableProject was set.
func (o OptEditableProject) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEditableProject) Reset() {
	var v EditableProject
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEditableProject) SetTo(v EditableProject) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEditableProject) Get() (v EditableProject, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEditableProject) Or(d EditableProject) EditableProject {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEditableProjectClientSide returns new OptEditableProjectClientSide with value set to v.
func NewOptEditableProjectClientSide(v EditableProjectClientSide) OptEditableProjectClientSide {
	return OptEditableProjectClientSide{
		Value: v,
		Set:   true,
	}
}

// OptEditableProjectClientSide is optional EditableProjectClientSide.
type OptEditableProjectClientSide struct {
	Value EditableProjectClientSide
	Set   bool
}

// IsSet returns true if OptEditableProjectClientSide was set.
func (o OptEditableProjectClientSide) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEditableProjectClientSide) Reset() {
	var v EditableProjectClientSide
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEditableProjectClientSide) SetTo(v EditableProjectClientSide) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEditableProjectClientSide) Get() (v EditableProjectClientSide, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEditableProjectClientSide) Or(d EditableProjectClientSide) EditableProjectClientSide {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEditableProjectServerSide returns new OptEditableProjectServerSide with value set to v.
func NewOptEditableProjectServerSide(v EditableProjectServerSide) OptEditableProjectServerSide {
	return OptEditableProjectServerSide{
		Value: v,
		Set:   true,
	}
}

// OptEditableProjectServerSide is optional EditableProjectServerSide.
type OptEditableProjectServerSide struct {
	Value EditableProjectServerSide
	Set   bool
}

// IsSet returns true if OptEditableProjectServerSide was set.
func (o OptEditableProjectServerSide) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEditableProjectServerSide) Reset() {
	var v EditableProjectServerSide
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEditableProjectServerSide) SetTo(v EditableProjectServerSide) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEditableProjectServerSide) Get() (v EditableProjectServerSide, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEditableProjectServerSide) Or(d EditableProjectServerSide) EditableProjectServerSide {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEditableProjectStatus returns new OptEditableProjectStatus with value set to v.
func NewOptEditableProjectStatus(v EditableProjectStatus) OptEditableProjectStatus {
	return OptEditableProjectStatus{
		Value: v,
		Set:   true,
	}
}

// OptEditableProjectStatus is optional EditableProjectStatus.
type OptEditableProjectStatus struct {
	Value EditableProjectStatus
	Set   bool
}

// IsSet returns true if OptEditableProjectStatus was set.
func (o OptEditableProjectStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEditableProjectStatus) Reset() {
	var v EditableProjectStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEditableProjectStatus) SetTo(v EditableProjectStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEditableProjectStatus) Get() (v EditableProjectStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEditableProjectStatus) Or(d EditableProjectStatus) EditableProjectStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEditableUser returns new OptEditableUser with value set to v.
func NewOptEditableUser(v EditableUser) OptEditableUser {
	return OptEditableUser{
		Value: v,
		Set:   true,
	}
}

// OptEditableUser is optional EditableUser.
type OptEditableUser struct {
	Value EditableUser
	Set   bool
}

// IsSet returns true if OptEditableUser was set.
func (o OptEditableUser) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEditableUser) Reset() {
	var v EditableUser
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEditableUser) SetTo(v EditableUser) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEditableUser) Get() (v EditableUser, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEditableUser) Or(d EditableUser) EditableUser {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEditableVersion returns new OptEditableVersion with value set to v.
func NewOptEditableVersion(v EditableVersion) OptEditableVersion {
	return OptEditableVersion{
		Value: v,
		Set:   true,
	}
}

// OptEditableVersion is optional EditableVersion.
type OptEditableVersion struct {
	Value EditableVersion
	Set   bool
}

// IsSet returns true if OptEditableVersion was set.
func (o OptEditableVersion) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEditableVersion) Reset() {
	var v EditableVersion
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEditableVersion) SetTo(v EditableVersion) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEditableVersion) Get() (v EditableVersion, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEditableVersion) Or(d EditableVersion) EditableVersion {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEditableVersionStatus returns new OptEditableVersionStatus with value set to v.
func NewOptEditableVersionStatus(v EditableVersionStatus) OptEditableVersionStatus {
	return OptEditableVersionStatus{
		Value: v,
		Set:   true,
	}
}

// OptEditableVersionStatus is optional EditableVersionStatus.
type OptEditableVersionStatus struct {
	Value EditableVersionStatus
	Set   bool
}

// IsSet returns true if OptEditableVersionStatus was set.
func (o OptEditableVersionStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEditableVersionStatus) Reset() {
	var v EditableVersionStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEditableVersionStatus) SetTo(v EditableVersionStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEditableVersionStatus) Get() (v EditableVersionStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEditableVersionStatus) Or(d EditableVersionStatus) EditableVersionStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEditableVersionVersionType returns new OptEditableVersionVersionType with value set to v.
func NewOptEditableVersionVersionType(v EditableVersionVersionType) OptEditableVersionVersionType {
	return OptEditableVersionVersionType{
		Value: v,
		Set:   true,
	}
}

// OptEditableVersionVersionType is optional EditableVersionVersionType.
type OptEditableVersionVersionType struct {
	Value EditableVersionVersionType
	Set   bool
}

// IsSet returns true if OptEditableVersionVersionType was set.
func (o OptEditableVersionVersionType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEditableVersionVersionType) Reset() {
	var v EditableVersionVersionType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEditableVersionVersionType) SetTo(v EditableVersionVersionType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEditableVersionVersionType) Get() (v EditableVersionVersionType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEditableVersionVersionType) Or(d EditableVersionVersionType) EditableVersionVersionType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptForgeUpdateCheckerPromos returns new OptForgeUpdateCheckerPromos with value set to v.
func NewOptForgeUpdateCheckerPromos(v ForgeUpdateCheckerPromos) OptForgeUpdateCheckerPromos {
	return OptForgeUpdateCheckerPromos{
		Value: v,
		Set:   true,
	}
}

// OptForgeUpdateCheckerPromos is optional ForgeUpdateCheckerPromos.
type OptForgeUpdateCheckerPromos struct {
	Value ForgeUpdateCheckerPromos
	Set   bool
}

// IsSet returns true if OptForgeUpdateCheckerPromos was set.
func (o OptForgeUpdateCheckerPromos) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptForgeUpdateCheckerPromos) Reset() {
	var v ForgeUpdateCheckerPromos
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptForgeUpdateCheckerPromos) SetTo(v ForgeUpdateCheckerPromos) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptForgeUpdateCheckerPromos) Get() (v ForgeUpdateCheckerPromos, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptForgeUpdateCheckerPromos) Or(d ForgeUpdateCheckerPromos) ForgeUpdateCheckerPromos {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetLatestVersionFromHashBody returns new OptGetLatestVersionFromHashBody with value set to v.
func NewOptGetLatestVersionFromHashBody(v GetLatestVersionFromHashBody) OptGetLatestVersionFromHashBody {
	return OptGetLatestVersionFromHashBody{
		Value: v,
		Set:   true,
	}
}

// OptGetLatestVersionFromHashBody is optional GetLatestVersionFromHashBody.
type OptGetLatestVersionFromHashBody struct {
	Value GetLatestVersionFromHashBody
	Set   bool
}

// IsSet returns true if OptGetLatestVersionFromHashBody was set.
func (o OptGetLatestVersionFromHashBody) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetLatestVersionFromHashBody) Reset() {
	var v GetLatestVersionFromHashBody
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetLatestVersionFromHashBody) SetTo(v GetLatestVersionFromHashBody) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetLatestVersionFromHashBody) Get() (v GetLatestVersionFromHashBody, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetLatestVersionFromHashBody) Or(d GetLatestVersionFromHashBody) GetLatestVersionFromHashBody {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetLatestVersionsFromHashesBody returns new OptGetLatestVersionsFromHashesBody with value set to v.
func NewOptGetLatestVersionsFromHashesBody(v GetLatestVersionsFromHashesBody) OptGetLatestVersionsFromHashesBody {
	return OptGetLatestVersionsFromHashesBody{
		Value: v,
		Set:   true,
	}
}

// OptGetLatestVersionsFromHashesBody is optional GetLatestVersionsFromHashesBody.
type OptGetLatestVersionsFromHashesBody struct {
	Value GetLatestVersionsFromHashesBody
	Set   bool
}

// IsSet returns true if OptGetLatestVersionsFromHashesBody was set.
func (o OptGetLatestVersionsFromHashesBody) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetLatestVersionsFromHashesBody) Reset() {
	var v GetLatestVersionsFromHashesBody
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetLatestVersionsFromHashesBody) SetTo(v GetLatestVersionsFromHashesBody) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetLatestVersionsFromHashesBody) Get() (v GetLatestVersionsFromHashesBody, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetLatestVersionsFromHashesBody) Or(d GetLatestVersionsFromHashesBody) GetLatestVersionsFromHashesBody {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHashList returns new OptHashList with value set to v.
func NewOptHashList(v HashList) OptHashList {
	return OptHashList{
		Value: v,
		Set:   true,
	}
}

// OptHashList is optional HashList.
type OptHashList struct {
	Value HashList
	Set   bool
}

// IsSet returns true if OptHashList was set.
func (o OptHashList) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHashList) Reset() {
	var v HashList
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHashList) SetTo(v HashList) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHashList) Get() (v HashList, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHashList) Or(d HashList) HashList {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptModifyReportReq returns new OptModifyReportReq with value set to v.
func NewOptModifyReportReq(v ModifyReportReq) OptModifyReportReq {
	return OptModifyReportReq{
		Value: v,
		Set:   true,
	}
}

// OptModifyReportReq is optional ModifyReportReq.
type OptModifyReportReq struct {
	Value ModifyReportReq
	Set   bool
}

// IsSet returns true if OptModifyReportReq was set.
func (o OptModifyReportReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptModifyReportReq) Reset() {
	var v ModifyReportReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptModifyReportReq) SetTo(v ModifyReportReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptModifyReportReq) Get() (v ModifyReportReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptModifyReportReq) Or(d ModifyReportReq) ModifyReportReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilBool returns new OptNilBool with value set to v.
func NewOptNilBool(v bool) OptNilBool {
	return OptNilBool{
		Value: v,
		Set:   true,
	}
}

// OptNilBool is optional nullable bool.
type OptNilBool struct {
	Value bool
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilBool was set.
func (o OptNilBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilBool) SetTo(v bool) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilBool) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilBool) SetToNull() {
	o.Set = true
	o.Null = true
	var v bool
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilBool) Get() (v bool, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreatableVersionRequestedStatus returns new OptNilCreatableVersionRequestedStatus with value set to v.
func NewOptNilCreatableVersionRequestedStatus(v CreatableVersionRequestedStatus) OptNilCreatableVersionRequestedStatus {
	return OptNilCreatableVersionRequestedStatus{
		Value: v,
		Set:   true,
	}
}

// OptNilCreatableVersionRequestedStatus is optional nullable CreatableVersionRequestedStatus.
type OptNilCreatableVersionRequestedStatus struct {
	Value CreatableVersionRequestedStatus
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreatableVersionRequestedStatus was set.
func (o OptNilCreatableVersionRequestedStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreatableVersionRequestedStatus) Reset() {
	var v CreatableVersionRequestedStatus
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreatableVersionRequestedStatus) SetTo(v CreatableVersionRequestedStatus) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilCreatableVersionRequestedStatus) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilCreatableVersionRequestedStatus) SetToNull() {
	o.Set = true
	o.Null = true
	var v CreatableVersionRequestedStatus
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreatableVersionRequestedStatus) Get() (v CreatableVersionRequestedStatus, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreatableVersionRequestedStatus) Or(d CreatableVersionRequestedStatus) CreatableVersionRequestedStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEditableProjectRequestedStatus returns new OptNilEditableProjectRequestedStatus with value set to v.
func NewOptNilEditableProjectRequestedStatus(v EditableProjectRequestedStatus) OptNilEditableProjectRequestedStatus {
	return OptNilEditableProjectRequestedStatus{
		Value: v,
		Set:   true,
	}
}

// OptNilEditableProjectRequestedStatus is optional nullable EditableProjectRequestedStatus.
type OptNilEditableProjectRequestedStatus struct {
	Value EditableProjectRequestedStatus
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEditableProjectRequestedStatus was set.
func (o OptNilEditableProjectRequestedStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEditableProjectRequestedStatus) Reset() {
	var v EditableProjectRequestedStatus
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEditableProjectRequestedStatus) SetTo(v EditableProjectRequestedStatus) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilEditableProjectRequestedStatus) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilEditableProjectRequestedStatus) SetToNull() {
	o.Set = true
	o.Null = true
	var v EditableProjectRequestedStatus
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEditableProjectRequestedStatus) Get() (v EditableProjectRequestedStatus, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEditableProjectRequestedStatus) Or(d EditableProjectRequestedStatus) EditableProjectRequestedStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEditableVersionRequestedStatus returns new OptNilEditableVersionRequestedStatus with value set to v.
func NewOptNilEditableVersionRequestedStatus(v EditableVersionRequestedStatus) OptNilEditableVersionRequestedStatus {
	return OptNilEditableVersionRequestedStatus{
		Value: v,
		Set:   true,
	}
}

// OptNilEditableVersionRequestedStatus is optional nullable EditableVersionRequestedStatus.
type OptNilEditableVersionRequestedStatus struct {
	Value EditableVersionRequestedStatus
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEditableVersionRequestedStatus was set.
func (o OptNilEditableVersionRequestedStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEditableVersionRequestedStatus) Reset() {
	var v EditableVersionRequestedStatus
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEditableVersionRequestedStatus) SetTo(v EditableVersionRequestedStatus) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilEditableVersionRequestedStatus) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilEditableVersionRequestedStatus) SetToNull() {
	o.Set = true
	o.Null = true
	var v EditableVersionRequestedStatus
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEditableVersionRequestedStatus) Get() (v EditableVersionRequestedStatus, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEditableVersionRequestedStatus) Or(d EditableVersionRequestedStatus) EditableVersionRequestedStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInt returns new OptNilInt with value set to v.
func NewOptNilInt(v int) OptNilInt {
	return OptNilInt{
		Value: v,
		Set:   true,
	}
}

// OptNilInt is optional nullable int.
type OptNilInt struct {
	Value int
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInt was set.
func (o OptNilInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInt) SetTo(v int) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilInt) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilInt) SetToNull() {
	o.Set = true
	o.Null = true
	var v int
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInt) Get() (v int, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilModeratorMessage returns new OptNilModeratorMessage with value set to v.
func NewOptNilModeratorMessage(v ModeratorMessage) OptNilModeratorMessage {
	return OptNilModeratorMessage{
		Value: v,
		Set:   true,
	}
}

// OptNilModeratorMessage is optional nullable ModeratorMessage.
type OptNilModeratorMessage struct {
	Value ModeratorMessage
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilModeratorMessage was set.
func (o OptNilModeratorMessage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilModeratorMessage) Reset() {
	var v ModeratorMessage
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilModeratorMessage) SetTo(v ModeratorMessage) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilModeratorMessage) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilModeratorMessage) SetToNull() {
	o.Set = true
	o.Null = true
	var v ModeratorMessage
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilModeratorMessage) Get() (v ModeratorMessage, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilModeratorMessage) Or(d ModeratorMessage) ModeratorMessage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNotificationType returns new OptNilNotificationType with value set to v.
func NewOptNilNotificationType(v NotificationType) OptNilNotificationType {
	return OptNilNotificationType{
		Value: v,
		Set:   true,
	}
}

// OptNilNotificationType is optional nullable NotificationType.
type OptNilNotificationType struct {
	Value NotificationType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNotificationType was set.
func (o OptNilNotificationType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNotificationType) Reset() {
	var v NotificationType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNotificationType) SetTo(v NotificationType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilNotificationType) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilNotificationType) SetToNull() {
	o.Set = true
	o.Null = true
	var v NotificationType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNotificationType) Get() (v NotificationType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNotificationType) Or(d NotificationType) NotificationType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilProjectRequestedStatus returns new OptNilProjectRequestedStatus with value set to v.
func NewOptNilProjectRequestedStatus(v ProjectRequestedStatus) OptNilProjectRequestedStatus {
	return OptNilProjectRequestedStatus{
		Value: v,
		Set:   true,
	}
}

// OptNilProjectRequestedStatus is optional nullable ProjectRequestedStatus.
type OptNilProjectRequestedStatus struct {
	Value ProjectRequestedStatus
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilProjectRequestedStatus was set.
func (o OptNilProjectRequestedStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilProjectRequestedStatus) Reset() {
	var v ProjectRequestedStatus
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilProjectRequestedStatus) SetTo(v ProjectRequestedStatus) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilProjectRequestedStatus) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilProjectRequestedStatus) SetToNull() {
	o.Set = true
	o.Null = true
	var v ProjectRequestedStatus
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilProjectRequestedStatus) Get() (v ProjectRequestedStatus, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilProjectRequestedStatus) Or(d ProjectRequestedStatus) ProjectRequestedStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStringArray returns new OptNilStringArray with value set to v.
func NewOptNilStringArray(v []string) OptNilStringArray {
	return OptNilStringArray{
		Value: v,
		Set:   true,
	}
}

// OptNilStringArray is optional nullable []string.
type OptNilStringArray struct {
	Value []string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStringArray was set.
func (o OptNilStringArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStringArray) Reset() {
	var v []string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStringArray) SetTo(v []string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilStringArray) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilStringArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStringArray) Get() (v []string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStringArray) Or(d []string) []string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilUserPayoutData returns new OptNilUserPayoutData with value set to v.
func NewOptNilUserPayoutData(v UserPayoutData) OptNilUserPayoutData {
	return OptNilUserPayoutData{
		Value: v,
		Set:   true,
	}
}

// OptNilUserPayoutData is optional nullable UserPayoutData.
type OptNilUserPayoutData struct {
	Value UserPayoutData
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilUserPayoutData was set.
func (o OptNilUserPayoutData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilUserPayoutData) Reset() {
	var v UserPayoutData
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilUserPayoutData) SetTo(v UserPayoutData) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilUserPayoutData) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilUserPayoutData) SetToNull() {
	o.Set = true
	o.Null = true
	var v UserPayoutData
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilUserPayoutData) Get() (v UserPayoutData, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilUserPayoutData) Or(d UserPayoutData) UserPayoutData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilVersionFileFileType returns new OptNilVersionFileFileType with value set to v.
func NewOptNilVersionFileFileType(v VersionFileFileType) OptNilVersionFileFileType {
	return OptNilVersionFileFileType{
		Value: v,
		Set:   true,
	}
}

// OptNilVersionFileFileType is optional nullable VersionFileFileType.
type OptNilVersionFileFileType struct {
	Value VersionFileFileType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilVersionFileFileType was set.
func (o OptNilVersionFileFileType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilVersionFileFileType) Reset() {
	var v VersionFileFileType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilVersionFileFileType) SetTo(v VersionFileFileType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilVersionFileFileType) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilVersionFileFileType) SetToNull() {
	o.Set = true
	o.Null = true
	var v VersionFileFileType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilVersionFileFileType) Get() (v VersionFileFileType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilVersionFileFileType) Or(d VersionFileFileType) VersionFileFileType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilVersionRequestedStatus returns new OptNilVersionRequestedStatus with value set to v.
func NewOptNilVersionRequestedStatus(v VersionRequestedStatus) OptNilVersionRequestedStatus {
	return OptNilVersionRequestedStatus{
		Value: v,
		Set:   true,
	}
}

// OptNilVersionRequestedStatus is optional nullable VersionRequestedStatus.
type OptNilVersionRequestedStatus struct {
	Value VersionRequestedStatus
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilVersionRequestedStatus was set.
func (o OptNilVersionRequestedStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilVersionRequestedStatus) Reset() {
	var v VersionRequestedStatus
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilVersionRequestedStatus) SetTo(v VersionRequestedStatus) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilVersionRequestedStatus) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilVersionRequestedStatus) SetToNull() {
	o.Set = true
	o.Null = true
	var v VersionRequestedStatus
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilVersionRequestedStatus) Get() (v VersionRequestedStatus, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilVersionRequestedStatus) Or(d VersionRequestedStatus) VersionRequestedStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPatchProjectsBody returns new OptPatchProjectsBody with value set to v.
func NewOptPatchProjectsBody(v PatchProjectsBody) OptPatchProjectsBody {
	return OptPatchProjectsBody{
		Value: v,
		Set:   true,
	}
}

// OptPatchProjectsBody is optional PatchProjectsBody.
type OptPatchProjectsBody struct {
	Value PatchProjectsBody
	Set   bool
}

// IsSet returns true if OptPatchProjectsBody was set.
func (o OptPatchProjectsBody) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPatchProjectsBody) Reset() {
	var v PatchProjectsBody
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPatchProjectsBody) SetTo(v PatchProjectsBody) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPatchProjectsBody) Get() (v PatchProjectsBody, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPatchProjectsBody) Or(d PatchProjectsBody) PatchProjectsBody {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProjectLicense returns new OptProjectLicense with value set to v.
func NewOptProjectLicense(v ProjectLicense) OptProjectLicense {
	return OptProjectLicense{
		Value: v,
		Set:   true,
	}
}

// OptProjectLicense is optional ProjectLicense.
type OptProjectLicense struct {
	Value ProjectLicense
	Set   bool
}

// IsSet returns true if OptProjectLicense was set.
func (o OptProjectLicense) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProjectLicense) Reset() {
	var v ProjectLicense
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProjectLicense) SetTo(v ProjectLicense) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProjectLicense) Get() (v ProjectLicense, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProjectLicense) Or(d ProjectLicense) ProjectLicense {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProjectMonetizationStatus returns new OptProjectMonetizationStatus with value set to v.
func NewOptProjectMonetizationStatus(v ProjectMonetizationStatus) OptProjectMonetizationStatus {
	return OptProjectMonetizationStatus{
		Value: v,
		Set:   true,
	}
}

// OptProjectMonetizationStatus is optional ProjectMonetizationStatus.
type OptProjectMonetizationStatus struct {
	Value ProjectMonetizationStatus
	Set   bool
}

// IsSet returns true if OptProjectMonetizationStatus was set.
func (o OptProjectMonetizationStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProjectMonetizationStatus) Reset() {
	var v ProjectMonetizationStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProjectMonetizationStatus) SetTo(v ProjectMonetizationStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProjectMonetizationStatus) Get() (v ProjectMonetizationStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProjectMonetizationStatus) Or(d ProjectMonetizationStatus) ProjectMonetizationStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProjectResultMonetizationStatus returns new OptProjectResultMonetizationStatus with value set to v.
func NewOptProjectResultMonetizationStatus(v ProjectResultMonetizationStatus) OptProjectResultMonetizationStatus {
	return OptProjectResultMonetizationStatus{
		Value: v,
		Set:   true,
	}
}

// OptProjectResultMonetizationStatus is optional ProjectResultMonetizationStatus.
type OptProjectResultMonetizationStatus struct {
	Value ProjectResultMonetizationStatus
	Set   bool
}

// IsSet returns true if OptProjectResultMonetizationStatus was set.
func (o OptProjectResultMonetizationStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProjectResultMonetizationStatus) Reset() {
	var v ProjectResultMonetizationStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProjectResultMonetizationStatus) SetTo(v ProjectResultMonetizationStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProjectResultMonetizationStatus) Get() (v ProjectResultMonetizationStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProjectResultMonetizationStatus) Or(d ProjectResultMonetizationStatus) ProjectResultMonetizationStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSchedule returns new OptSchedule with value set to v.
func NewOptSchedule(v Schedule) OptSchedule {
	return OptSchedule{
		Value: v,
		Set:   true,
	}
}

// OptSchedule is optional Schedule.
type OptSchedule struct {
	Value Schedule
	Set   bool
}

// IsSet returns true if OptSchedule was set.
func (o OptSchedule) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSchedule) Reset() {
	var v Schedule
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSchedule) SetTo(v Schedule) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSchedule) Get() (v Schedule, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSchedule) Or(d Schedule) Schedule {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchProjectsIndex returns new OptSearchProjectsIndex with value set to v.
func NewOptSearchProjectsIndex(v SearchProjectsIndex) OptSearchProjectsIndex {
	return OptSearchProjectsIndex{
		Value: v,
		Set:   true,
	}
}

// OptSearchProjectsIndex is optional SearchProjectsIndex.
type OptSearchProjectsIndex struct {
	Value SearchProjectsIndex
	Set   bool
}

// IsSet returns true if OptSearchProjectsIndex was set.
func (o OptSearchProjectsIndex) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchProjectsIndex) Reset() {
	var v SearchProjectsIndex
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchProjectsIndex) SetTo(v SearchProjectsIndex) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchProjectsIndex) Get() (v SearchProjectsIndex, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchProjectsIndex) Or(d SearchProjectsIndex) SearchProjectsIndex {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptThreadMessageBody returns new OptThreadMessageBody with value set to v.
func NewOptThreadMessageBody(v ThreadMessageBody) OptThreadMessageBody {
	return OptThreadMessageBody{
		Value: v,
		Set:   true,
	}
}

// OptThreadMessageBody is optional ThreadMessageBody.
type OptThreadMessageBody struct {
	Value ThreadMessageBody
	Set   bool
}

// IsSet returns true if OptThreadMessageBody was set.
func (o OptThreadMessageBody) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptThreadMessageBody) Reset() {
	var v ThreadMessageBody
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptThreadMessageBody) SetTo(v ThreadMessageBody) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptThreadMessageBody) Get() (v ThreadMessageBody, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptThreadMessageBody) Or(d ThreadMessageBody) ThreadMessageBody {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptThreadMessageBodyNewStatus returns new OptThreadMessageBodyNewStatus with value set to v.
func NewOptThreadMessageBodyNewStatus(v ThreadMessageBodyNewStatus) OptThreadMessageBodyNewStatus {
	return OptThreadMessageBodyNewStatus{
		Value: v,
		Set:   true,
	}
}

// OptThreadMessageBodyNewStatus is optional ThreadMessageBodyNewStatus.
type OptThreadMessageBodyNewStatus struct {
	Value ThreadMessageBodyNewStatus
	Set   bool
}

// IsSet returns true if OptThreadMessageBodyNewStatus was set.
func (o OptThreadMessageBodyNewStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptThreadMessageBodyNewStatus) Reset() {
	var v ThreadMessageBodyNewStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptThreadMessageBodyNewStatus) SetTo(v ThreadMessageBodyNewStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptThreadMessageBodyNewStatus) Get() (v ThreadMessageBodyNewStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptThreadMessageBodyNewStatus) Or(d ThreadMessageBodyNewStatus) ThreadMessageBodyNewStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptThreadMessageBodyOldStatus returns new OptThreadMessageBodyOldStatus with value set to v.
func NewOptThreadMessageBodyOldStatus(v ThreadMessageBodyOldStatus) OptThreadMessageBodyOldStatus {
	return OptThreadMessageBodyOldStatus{
		Value: v,
		Set:   true,
	}
}

// OptThreadMessageBodyOldStatus is optional ThreadMessageBodyOldStatus.
type OptThreadMessageBodyOldStatus struct {
	Value ThreadMessageBodyOldStatus
	Set   bool
}

// IsSet returns true if OptThreadMessageBodyOldStatus was set.
func (o OptThreadMessageBodyOldStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptThreadMessageBodyOldStatus) Reset() {
	var v ThreadMessageBodyOldStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptThreadMessageBodyOldStatus) SetTo(v ThreadMessageBodyOldStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptThreadMessageBodyOldStatus) Get() (v ThreadMessageBodyOldStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptThreadMessageBodyOldStatus) Or(d ThreadMessageBodyOldStatus) ThreadMessageBodyOldStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserPayoutDataPayoutWallet returns new OptUserPayoutDataPayoutWallet with value set to v.
func NewOptUserPayoutDataPayoutWallet(v UserPayoutDataPayoutWallet) OptUserPayoutDataPayoutWallet {
	return OptUserPayoutDataPayoutWallet{
		Value: v,
		Set:   true,
	}
}

// OptUserPayoutDataPayoutWallet is optional UserPayoutDataPayoutWallet.
type OptUserPayoutDataPayoutWallet struct {
	Value UserPayoutDataPayoutWallet
	Set   bool
}

// IsSet returns true if OptUserPayoutDataPayoutWallet was set.
func (o OptUserPayoutDataPayoutWallet) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserPayoutDataPayoutWallet) Reset() {
	var v UserPayoutDataPayoutWallet
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserPayoutDataPayoutWallet) SetTo(v UserPayoutDataPayoutWallet) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserPayoutDataPayoutWallet) Get() (v UserPayoutDataPayoutWallet, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserPayoutDataPayoutWallet) Or(d UserPayoutDataPayoutWallet) UserPayoutDataPayoutWallet {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserPayoutDataPayoutWalletType returns new OptUserPayoutDataPayoutWalletType with value set to v.
func NewOptUserPayoutDataPayoutWalletType(v UserPayoutDataPayoutWalletType) OptUserPayoutDataPayoutWalletType {
	return OptUserPayoutDataPayoutWalletType{
		Value: v,
		Set:   true,
	}
}

// OptUserPayoutDataPayoutWalletType is optional UserPayoutDataPayoutWalletType.
type OptUserPayoutDataPayoutWalletType struct {
	Value UserPayoutDataPayoutWalletType
	Set   bool
}

// IsSet returns true if OptUserPayoutDataPayoutWalletType was set.
func (o OptUserPayoutDataPayoutWalletType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserPayoutDataPayoutWalletType) Reset() {
	var v UserPayoutDataPayoutWalletType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserPayoutDataPayoutWalletType) SetTo(v UserPayoutDataPayoutWalletType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserPayoutDataPayoutWalletType) Get() (v UserPayoutDataPayoutWalletType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserPayoutDataPayoutWalletType) Or(d UserPayoutDataPayoutWalletType) UserPayoutDataPayoutWalletType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVersionStatus returns new OptVersionStatus with value set to v.
func NewOptVersionStatus(v VersionStatus) OptVersionStatus {
	return OptVersionStatus{
		Value: v,
		Set:   true,
	}
}

// OptVersionStatus is optional VersionStatus.
type OptVersionStatus struct {
	Value VersionStatus
	Set   bool
}

// IsSet returns true if OptVersionStatus was set.
func (o OptVersionStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVersionStatus) Reset() {
	var v VersionStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVersionStatus) SetTo(v VersionStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVersionStatus) Get() (v VersionStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVersionStatus) Or(d VersionStatus) VersionStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/PatchProjectsBody
type PatchProjectsBody struct {
	// Set all of the categories to the categories specified here.
	Categories []string `json:"categories"`
	// Add all of the categories specified here.
	AddCategories []string `json:"add_categories"`
	// Remove all of the categories specified here.
	RemoveCategories []string `json:"remove_categories"`
	// Set all of the additional categories to the categories specified here.
	AdditionalCategories []string `json:"additional_categories"`
	// Add all of the additional categories specified here.
	AddAdditionalCategories []string `json:"add_additional_categories"`
	// Remove all of the additional categories specified here.
	RemoveAdditionalCategories []string `json:"remove_additional_categories"`
	// Set all of the donation links to the donation links specified here.
	DonationUrls []ProjectDonationURL `json:"donation_urls"`
	// Add all of the donation links specified here.
	AddDonationUrls []ProjectDonationURL `json:"add_donation_urls"`
	// Remove all of the donation links specified here.
	RemoveDonationUrls []ProjectDonationURL `json:"remove_donation_urls"`
	// An optional link to where to submit bugs or issues with the projects.
	IssuesURL OptNilString `json:"issues_url"`
	// An optional link to the source code of the projects.
	SourceURL OptNilString `json:"source_url"`
	// An optional link to the projects' wiki page or other relevant information.
	WikiURL OptNilString `json:"wiki_url"`
	// An optional invite link to the projects' discord.
	DiscordURL OptNilString `json:"discord_url"`
}

// GetCategories returns the value of Categories.
func (s *PatchProjectsBody) GetCategories() []string {
	return s.Categories
}

// GetAddCategories returns the value of AddCategories.
func (s *PatchProjectsBody) GetAddCategories() []string {
	return s.AddCategories
}

// GetRemoveCategories returns the value of RemoveCategories.
func (s *PatchProjectsBody) GetRemoveCategories() []string {
	return s.RemoveCategories
}

// GetAdditionalCategories returns the value of AdditionalCategories.
func (s *PatchProjectsBody) GetAdditionalCategories() []string {
	return s.AdditionalCategories
}

// GetAddAdditionalCategories returns the value of AddAdditionalCategories.
func (s *PatchProjectsBody) GetAddAdditionalCategories() []string {
	return s.AddAdditionalCategories
}

// GetRemoveAdditionalCategories returns the value of RemoveAdditionalCategories.
func (s *PatchProjectsBody) GetRemoveAdditionalCategories() []string {
	return s.RemoveAdditionalCategories
}

// GetDonationUrls returns the value of DonationUrls.
func (s *PatchProjectsBody) GetDonationUrls() []ProjectDonationURL {
	return s.DonationUrls
}

// GetAddDonationUrls returns the value of AddDonationUrls.
func (s *PatchProjectsBody) GetAddDonationUrls() []ProjectDonationURL {
	return s.AddDonationUrls
}

// GetRemoveDonationUrls returns the value of RemoveDonationUrls.
func (s *PatchProjectsBody) GetRemoveDonationUrls() []ProjectDonationURL {
	return s.RemoveDonationUrls
}

// GetIssuesURL returns the value of IssuesURL.
func (s *PatchProjectsBody) GetIssuesURL() OptNilString {
	return s.IssuesURL
}

// GetSourceURL returns the value of SourceURL.
func (s *PatchProjectsBody) GetSourceURL() OptNilString {
	return s.SourceURL
}

// GetWikiURL returns the value of WikiURL.
func (s *PatchProjectsBody) GetWikiURL() OptNilString {
	return s.WikiURL
}

// GetDiscordURL returns the value of DiscordURL.
func (s *PatchProjectsBody) GetDiscordURL() OptNilString {
	return s.DiscordURL
}

// SetCategories sets the value of Categories.
func (s *PatchProjectsBody) SetCategories(val []string) {
	s.Categories = val
}

// SetAddCategories sets the value of AddCategories.
func (s *PatchProjectsBody) SetAddCategories(val []string) {
	s.AddCategories = val
}

// SetRemoveCategories sets the value of RemoveCategories.
func (s *PatchProjectsBody) SetRemoveCategories(val []string) {
	s.RemoveCategories = val
}

// SetAdditionalCategories sets the value of AdditionalCategories.
func (s *PatchProjectsBody) SetAdditionalCategories(val []string) {
	s.AdditionalCategories = val
}

// SetAddAdditionalCategories sets the value of AddAdditionalCategories.
func (s *PatchProjectsBody) SetAddAdditionalCategories(val []string) {
	s.AddAdditionalCategories = val
}

// SetRemoveAdditionalCategories sets the value of RemoveAdditionalCategories.
func (s *PatchProjectsBody) SetRemoveAdditionalCategories(val []string) {
	s.RemoveAdditionalCategories = val
}

// SetDonationUrls sets the value of DonationUrls.
func (s *PatchProjectsBody) SetDonationUrls(val []ProjectDonationURL) {
	s.DonationUrls = val
}

// SetAddDonationUrls sets the value of AddDonationUrls.
func (s *PatchProjectsBody) SetAddDonationUrls(val []ProjectDonationURL) {
	s.AddDonationUrls = val
}

// SetRemoveDonationUrls sets the value of RemoveDonationUrls.
func (s *PatchProjectsBody) SetRemoveDonationUrls(val []ProjectDonationURL) {
	s.RemoveDonationUrls = val
}

// SetIssuesURL sets the value of IssuesURL.
func (s *PatchProjectsBody) SetIssuesURL(val OptNilString) {
	s.IssuesURL = val
}

// SetSourceURL sets the value of SourceURL.
func (s *PatchProjectsBody) SetSourceURL(val OptNilString) {
	s.SourceURL = val
}

// SetWikiURL sets the value of WikiURL.
func (s *PatchProjectsBody) SetWikiURL(val OptNilString) {
	s.WikiURL = val
}

// SetDiscordURL sets the value of DiscordURL.
func (s *PatchProjectsBody) SetDiscordURL(val OptNilString) {
	s.DiscordURL = val
}

// PatchProjectsNoContent is response for PatchProjects operation.
type PatchProjectsNoContent struct{}

func (*PatchProjectsNoContent) patchProjectsRes() {}

// Merged schema.
// Ref: #/components/schemas/Project
type Project struct {
	// Merged property.
	Slug string `json:"slug"`
	// Merged property.
	Title string `json:"title"`
	// Merged property.
	Description string `json:"description"`
	// Merged property.
	Categories []string `json:"categories"`
	// Merged property.
	ClientSide ProjectClientSide `json:"client_side"`
	// Merged property.
	ServerSide ProjectServerSide `json:"server_side"`
	// A long form description of the project.
	Body string `json:"body"`
	// The status of the project.
	Status ProjectStatus `json:"status"`
	// The requested status when submitting for review or scheduling the project for release.
	RequestedStatus OptNilProjectRequestedStatus `json:"requested_status"`
	// A list of categories which are searchable but non-primary.
	AdditionalCategories []string `json:"additional_categories"`
	// An optional link to where to submit bugs or issues with the project.
	IssuesURL OptNilString `json:"issues_url"`
	// An optional link to the source code of the project.
	SourceURL OptNilString `json:"source_url"`
	// An optional link to the project's wiki page or other relevant information.
	WikiURL OptNilString `json:"wiki_url"`
	// An optional invite link to the project's discord.
	DiscordURL OptNilString `json:"discord_url"`
	// A list of donation links for the project.
	DonationUrls []ProjectDonationURL `json:"donation_urls"`
	// The project type of the project.
	ProjectType ProjectProjectType `json:"project_type"`
	// The total number of downloads of the project.
	Downloads int `json:"downloads"`
	// The URL of the project's icon.
	IconURL OptNilString `json:"icon_url"`
	// The RGB color of the project, automatically generated from the project icon.
	Color OptNilInt `json:"color"`
	// The ID of the moderation thread associated with this project.
	ThreadID           OptString                    `json:"thread_id"`
	MonetizationStatus OptProjectMonetizationStatus `json:"monetization_status"`
	// The ID of the project, encoded as a base62 string.
	ID string `json:"id"`
	// The ID of the team that has ownership of this project.
	Team string `json:"team"`
	// The link to the long description of the project. Always null, only kept for legacy compatibility.
	//
	// Deprecated: schema marks this property as deprecated.
	BodyURL OptNilString `json:"body_url"`
	// Deprecated: schema marks this property as deprecated.
	ModeratorMessage OptNilModeratorMessage `json:"moderator_message"`
	// The date the project was published.
	Published string `json:"published"`
	// The date the project was last updated.
	Updated string `json:"updated"`
	// The date the project's status was set to an approved status.
	Approved OptNilString `json:"approved"`
	// The date the project's status was submitted to moderators for review.
	Queued OptNilString `json:"queued"`
	// The total number of users following the project.
	Followers int               `json:"followers"`
	License   OptProjectLicense `json:"license"`
	// A list of the version IDs of the project (will never be empty unless `draft` status).
	Versions []string `json:"versions"`
	// A list of all of the game versions supported by the project.
	GameVersions []string `json:"game_versions"`
	// A list of all of the loaders supported by the project.
	Loaders []string `json:"loaders"`
	// A list of images that have been uploaded to the project's gallery.
	Gallery []NilGalleryImage `json:"gallery"`
}

// GetSlug returns the value of Slug.
func (s *Project) GetSlug() string {
	return s.Slug
}

// GetTitle returns the value of Title.
func (s *Project) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *Project) GetDescription() string {
	return s.Description
}

// GetCategories returns the value of Categories.
func (s *Project) GetCategories() []string {
	return s.Categories
}

// GetClientSide returns the value of ClientSide.
func (s *Project) GetClientSide() ProjectClientSide {
	return s.ClientSide
}

// GetServerSide returns the value of ServerSide.
func (s *Project) GetServerSide() ProjectServerSide {
	return s.ServerSide
}

// GetBody returns the value of Body.
func (s *Project) GetBody() string {
	return s.Body
}

// GetStatus returns the value of Status.
func (s *Project) GetStatus() ProjectStatus {
	return s.Status
}

// GetRequestedStatus returns the value of RequestedStatus.
func (s *Project) GetRequestedStatus() OptNilProjectRequestedStatus {
	return s.RequestedStatus
}

// GetAdditionalCategories returns the value of AdditionalCategories.
func (s *Project) GetAdditionalCategories() []string {
	return s.AdditionalCategories
}

// GetIssuesURL returns the value of IssuesURL.
func (s *Project) GetIssuesURL() OptNilString {
	return s.IssuesURL
}

// GetSourceURL returns the value of SourceURL.
func (s *Project) GetSourceURL() OptNilString {
	return s.SourceURL
}

// GetWikiURL returns the value of WikiURL.
func (s *Project) GetWikiURL() OptNilString {
	return s.WikiURL
}

// GetDiscordURL returns the value of DiscordURL.
func (s *Project) GetDiscordURL() OptNilString {
	return s.DiscordURL
}

// GetDonationUrls returns the value of DonationUrls.
func (s *Project) GetDonationUrls() []ProjectDonationURL {
	return s.DonationUrls
}

// GetProjectType returns the value of ProjectType.
func (s *Project) GetProjectType() ProjectProjectType {
	return s.ProjectType
}

// GetDownloads returns the value of Downloads.
func (s *Project) GetDownloads() int {
	return s.Downloads
}

// GetIconURL returns the value of IconURL.
func (s *Project) GetIconURL() OptNilString {
	return s.IconURL
}

// GetColor returns the value of Color.
func (s *Project) GetColor() OptNilInt {
	return s.Color
}

// GetThreadID returns the value of ThreadID.
func (s *Project) GetThreadID() OptString {
	return s.ThreadID
}

// GetMonetizationStatus returns the value of MonetizationStatus.
func (s *Project) GetMonetizationStatus() OptProjectMonetizationStatus {
	return s.MonetizationStatus
}

// GetID returns the value of ID.
func (s *Project) GetID() string {
	return s.ID
}

// GetTeam returns the value of Team.
func (s *Project) GetTeam() string {
	return s.Team
}

// GetBodyURL returns the value of BodyURL.
func (s *Project) GetBodyURL() OptNilString {
	return s.BodyURL
}

// GetModeratorMessage returns the value of ModeratorMessage.
func (s *Project) GetModeratorMessage() OptNilModeratorMessage {
	return s.ModeratorMessage
}

// GetPublished returns the value of Published.
func (s *Project) GetPublished() string {
	return s.Published
}

// GetUpdated returns the value of Updated.
func (s *Project) GetUpdated() string {
	return s.Updated
}

// GetApproved returns the value of Approved.
func (s *Project) GetApproved() OptNilString {
	return s.Approved
}

// GetQueued returns the value of Queued.
func (s *Project) GetQueued() OptNilString {
	return s.Queued
}

// GetFollowers returns the value of Followers.
func (s *Project) GetFollowers() int {
	return s.Followers
}

// GetLicense returns the value of License.
func (s *Project) GetLicense() OptProjectLicense {
	return s.License
}

// GetVersions returns the value of Versions.
func (s *Project) GetVersions() []string {
	return s.Versions
}

// GetGameVersions returns the value of GameVersions.
func (s *Project) GetGameVersions() []string {
	return s.GameVersions
}

// GetLoaders returns the value of Loaders.
func (s *Project) GetLoaders() []string {
	return s.Loaders
}

// GetGallery returns the value of Gallery.
func (s *Project) GetGallery() []NilGalleryImage {
	return s.Gallery
}

// SetSlug sets the value of Slug.
func (s *Project) SetSlug(val string) {
	s.Slug = val
}

// SetTitle sets the value of Title.
func (s *Project) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *Project) SetDescription(val string) {
	s.Description = val
}

// SetCategories sets the value of Categories.
func (s *Project) SetCategories(val []string) {
	s.Categories = val
}

// SetClientSide sets the value of ClientSide.
func (s *Project) SetClientSide(val ProjectClientSide) {
	s.ClientSide = val
}

// SetServerSide sets the value of ServerSide.
func (s *Project) SetServerSide(val ProjectServerSide) {
	s.ServerSide = val
}

// SetBody sets the value of Body.
func (s *Project) SetBody(val string) {
	s.Body = val
}

// SetStatus sets the value of Status.
func (s *Project) SetStatus(val ProjectStatus) {
	s.Status = val
}

// SetRequestedStatus sets the value of RequestedStatus.
func (s *Project) SetRequestedStatus(val OptNilProjectRequestedStatus) {
	s.RequestedStatus = val
}

// SetAdditionalCategories sets the value of AdditionalCategories.
func (s *Project) SetAdditionalCategories(val []string) {
	s.AdditionalCategories = val
}

// SetIssuesURL sets the value of IssuesURL.
func (s *Project) SetIssuesURL(val OptNilString) {
	s.IssuesURL = val
}

// SetSourceURL sets the value of SourceURL.
func (s *Project) SetSourceURL(val OptNilString) {
	s.SourceURL = val
}

// SetWikiURL sets the value of WikiURL.
func (s *Project) SetWikiURL(val OptNilString) {
	s.WikiURL = val
}

// SetDiscordURL sets the value of DiscordURL.
func (s *Project) SetDiscordURL(val OptNilString) {
	s.DiscordURL = val
}

// SetDonationUrls sets the value of DonationUrls.
func (s *Project) SetDonationUrls(val []ProjectDonationURL) {
	s.DonationUrls = val
}

// SetProjectType sets the value of ProjectType.
func (s *Project) SetProjectType(val ProjectProjectType) {
	s.ProjectType = val
}

// SetDownloads sets the value of Downloads.
func (s *Project) SetDownloads(val int) {
	s.Downloads = val
}

// SetIconURL sets the value of IconURL.
func (s *Project) SetIconURL(val OptNilString) {
	s.IconURL = val
}

// SetColor sets the value of Color.
func (s *Project) SetColor(val OptNilInt) {
	s.Color = val
}

// SetThreadID sets the value of ThreadID.
func (s *Project) SetThreadID(val OptString) {
	s.ThreadID = val
}

// SetMonetizationStatus sets the value of MonetizationStatus.
func (s *Project) SetMonetizationStatus(val OptProjectMonetizationStatus) {
	s.MonetizationStatus = val
}

// SetID sets the value of ID.
func (s *Project) SetID(val string) {
	s.ID = val
}

// SetTeam sets the value of Team.
func (s *Project) SetTeam(val string) {
	s.Team = val
}

// SetBodyURL sets the value of BodyURL.
func (s *Project) SetBodyURL(val OptNilString) {
	s.BodyURL = val
}

// SetModeratorMessage sets the value of ModeratorMessage.
func (s *Project) SetModeratorMessage(val OptNilModeratorMessage) {
	s.ModeratorMessage = val
}

// SetPublished sets the value of Published.
func (s *Project) SetPublished(val string) {
	s.Published = val
}

// SetUpdated sets the value of Updated.
func (s *Project) SetUpdated(val string) {
	s.Updated = val
}

// SetApproved sets the value of Approved.
func (s *Project) SetApproved(val OptNilString) {
	s.Approved = val
}

// SetQueued sets the value of Queued.
func (s *Project) SetQueued(val OptNilString) {
	s.Queued = val
}

// SetFollowers sets the value of Followers.
func (s *Project) SetFollowers(val int) {
	s.Followers = val
}

// SetLicense sets the value of License.
func (s *Project) SetLicense(val OptProjectLicense) {
	s.License = val
}

// SetVersions sets the value of Versions.
func (s *Project) SetVersions(val []string) {
	s.Versions = val
}

// SetGameVersions sets the value of GameVersions.
func (s *Project) SetGameVersions(val []string) {
	s.GameVersions = val
}

// SetLoaders sets the value of Loaders.
func (s *Project) SetLoaders(val []string) {
	s.Loaders = val
}

// SetGallery sets the value of Gallery.
func (s *Project) SetGallery(val []NilGalleryImage) {
	s.Gallery = val
}

func (*Project) getProjectRes() {}

// Merged schema.
type ProjectClientSide string

const (
	ProjectClientSideRequired    ProjectClientSide = "required"
	ProjectClientSideOptional    ProjectClientSide = "optional"
	ProjectClientSideUnsupported ProjectClientSide = "unsupported"
	ProjectClientSideUnknown     ProjectClientSide = "unknown"
)

// AllValues returns all ProjectClientSide values.
func (ProjectClientSide) AllValues() []ProjectClientSide {
	return []ProjectClientSide{
		ProjectClientSideRequired,
		ProjectClientSideOptional,
		ProjectClientSideUnsupported,
		ProjectClientSideUnknown,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProjectClientSide) MarshalText() ([]byte, error) {
	switch s {
	case ProjectClientSideRequired:
		return []byte(s), nil
	case ProjectClientSideOptional:
		return []byte(s), nil
	case ProjectClientSideUnsupported:
		return []byte(s), nil
	case ProjectClientSideUnknown:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProjectClientSide) UnmarshalText(data []byte) error {
	switch ProjectClientSide(data) {
	case ProjectClientSideRequired:
		*s = ProjectClientSideRequired
		return nil
	case ProjectClientSideOptional:
		*s = ProjectClientSideOptional
		return nil
	case ProjectClientSideUnsupported:
		*s = ProjectClientSideUnsupported
		return nil
	case ProjectClientSideUnknown:
		*s = ProjectClientSideUnknown
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ProjectDependencyList
type ProjectDependencyList struct {
	// Projects that the project depends upon.
	Projects []Project `json:"projects"`
	// Versions that the project depends upon.
	Versions []Version `json:"versions"`
}

// GetProjects returns the value of Projects.
func (s *ProjectDependencyList) GetProjects() []Project {
	return s.Projects
}

// GetVersions returns the value of Versions.
func (s *ProjectDependencyList) GetVersions() []Version {
	return s.Versions
}

// SetProjects sets the value of Projects.
func (s *ProjectDependencyList) SetProjects(val []Project) {
	s.Projects = val
}

// SetVersions sets the value of Versions.
func (s *ProjectDependencyList) SetVersions(val []Version) {
	s.Versions = val
}

func (*ProjectDependencyList) getDependenciesRes() {}

// Ref: #/components/schemas/ProjectDonationURL
type ProjectDonationURL struct {
	// The ID of the donation platform.
	ID OptString `json:"id"`
	// The donation platform this link is to.
	Platform OptString `json:"platform"`
	// The URL of the donation platform and user.
	URL OptString `json:"url"`
}

// GetID returns the value of ID.
func (s *ProjectDonationURL) GetID() OptString {
	return s.ID
}

// GetPlatform returns the value of Platform.
func (s *ProjectDonationURL) GetPlatform() OptString {
	return s.Platform
}

// GetURL returns the value of URL.
func (s *ProjectDonationURL) GetURL() OptString {
	return s.URL
}

// SetID sets the value of ID.
func (s *ProjectDonationURL) SetID(val OptString) {
	s.ID = val
}

// SetPlatform sets the value of Platform.
func (s *ProjectDonationURL) SetPlatform(val OptString) {
	s.Platform = val
}

// SetURL sets the value of URL.
func (s *ProjectDonationURL) SetURL(val OptString) {
	s.URL = val
}

// Ref: #/components/schemas/ProjectIdentifier
type ProjectIdentifier struct {
	ID OptString `json:"id"`
}

// GetID returns the value of ID.
func (s *ProjectIdentifier) GetID() OptString {
	return s.ID
}

// SetID sets the value of ID.
func (s *ProjectIdentifier) SetID(val OptString) {
	s.ID = val
}

func (*ProjectIdentifier) checkProjectValidityRes() {}

// The license of the project.
// Ref: #/components/schemas/ProjectLicense
type ProjectLicense struct {
	// The SPDX license ID of a project.
	ID OptString `json:"id"`
	// The long name of a license.
	Name OptString `json:"name"`
	// The URL to this license.
	URL OptNilString `json:"url"`
}

// GetID returns the value of ID.
func (s *ProjectLicense) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *ProjectLicense) GetName() OptString {
	return s.Name
}

// GetURL returns the value of URL.
func (s *ProjectLicense) GetURL() OptNilString {
	return s.URL
}

// SetID sets the value of ID.
func (s *ProjectLicense) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ProjectLicense) SetName(val OptString) {
	s.Name = val
}

// SetURL sets the value of URL.
func (s *ProjectLicense) SetURL(val OptNilString) {
	s.URL = val
}

type ProjectMonetizationStatus string

const (
	ProjectMonetizationStatusMonetized        ProjectMonetizationStatus = "monetized"
	ProjectMonetizationStatusDemonetized      ProjectMonetizationStatus = "demonetized"
	ProjectMonetizationStatusForceDemonetized ProjectMonetizationStatus = "force-demonetized"
)

// AllValues returns all ProjectMonetizationStatus values.
func (ProjectMonetizationStatus) AllValues() []ProjectMonetizationStatus {
	return []ProjectMonetizationStatus{
		ProjectMonetizationStatusMonetized,
		ProjectMonetizationStatusDemonetized,
		ProjectMonetizationStatusForceDemonetized,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProjectMonetizationStatus) MarshalText() ([]byte, error) {
	switch s {
	case ProjectMonetizationStatusMonetized:
		return []byte(s), nil
	case ProjectMonetizationStatusDemonetized:
		return []byte(s), nil
	case ProjectMonetizationStatusForceDemonetized:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProjectMonetizationStatus) UnmarshalText(data []byte) error {
	switch ProjectMonetizationStatus(data) {
	case ProjectMonetizationStatusMonetized:
		*s = ProjectMonetizationStatusMonetized
		return nil
	case ProjectMonetizationStatusDemonetized:
		*s = ProjectMonetizationStatusDemonetized
		return nil
	case ProjectMonetizationStatusForceDemonetized:
		*s = ProjectMonetizationStatusForceDemonetized
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The project type of the project.
type ProjectProjectType string

const (
	ProjectProjectTypeMod          ProjectProjectType = "mod"
	ProjectProjectTypeModpack      ProjectProjectType = "modpack"
	ProjectProjectTypeResourcepack ProjectProjectType = "resourcepack"
	ProjectProjectTypeShader       ProjectProjectType = "shader"
)

// AllValues returns all ProjectProjectType values.
func (ProjectProjectType) AllValues() []ProjectProjectType {
	return []ProjectProjectType{
		ProjectProjectTypeMod,
		ProjectProjectTypeModpack,
		ProjectProjectTypeResourcepack,
		ProjectProjectTypeShader,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProjectProjectType) MarshalText() ([]byte, error) {
	switch s {
	case ProjectProjectTypeMod:
		return []byte(s), nil
	case ProjectProjectTypeModpack:
		return []byte(s), nil
	case ProjectProjectTypeResourcepack:
		return []byte(s), nil
	case ProjectProjectTypeShader:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProjectProjectType) UnmarshalText(data []byte) error {
	switch ProjectProjectType(data) {
	case ProjectProjectTypeMod:
		*s = ProjectProjectTypeMod
		return nil
	case ProjectProjectTypeModpack:
		*s = ProjectProjectTypeModpack
		return nil
	case ProjectProjectTypeResourcepack:
		*s = ProjectProjectTypeResourcepack
		return nil
	case ProjectProjectTypeShader:
		*s = ProjectProjectTypeShader
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The requested status when submitting for review or scheduling the project for release.
type ProjectRequestedStatus string

const (
	ProjectRequestedStatusApproved ProjectRequestedStatus = "approved"
	ProjectRequestedStatusArchived ProjectRequestedStatus = "archived"
	ProjectRequestedStatusUnlisted ProjectRequestedStatus = "unlisted"
	ProjectRequestedStatusPrivate  ProjectRequestedStatus = "private"
	ProjectRequestedStatusDraft    ProjectRequestedStatus = "draft"
)

// AllValues returns all ProjectRequestedStatus values.
func (ProjectRequestedStatus) AllValues() []ProjectRequestedStatus {
	return []ProjectRequestedStatus{
		ProjectRequestedStatusApproved,
		ProjectRequestedStatusArchived,
		ProjectRequestedStatusUnlisted,
		ProjectRequestedStatusPrivate,
		ProjectRequestedStatusDraft,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProjectRequestedStatus) MarshalText() ([]byte, error) {
	switch s {
	case ProjectRequestedStatusApproved:
		return []byte(s), nil
	case ProjectRequestedStatusArchived:
		return []byte(s), nil
	case ProjectRequestedStatusUnlisted:
		return []byte(s), nil
	case ProjectRequestedStatusPrivate:
		return []byte(s), nil
	case ProjectRequestedStatusDraft:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProjectRequestedStatus) UnmarshalText(data []byte) error {
	switch ProjectRequestedStatus(data) {
	case ProjectRequestedStatusApproved:
		*s = ProjectRequestedStatusApproved
		return nil
	case ProjectRequestedStatusArchived:
		*s = ProjectRequestedStatusArchived
		return nil
	case ProjectRequestedStatusUnlisted:
		*s = ProjectRequestedStatusUnlisted
		return nil
	case ProjectRequestedStatusPrivate:
		*s = ProjectRequestedStatusPrivate
		return nil
	case ProjectRequestedStatusDraft:
		*s = ProjectRequestedStatusDraft
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/ProjectResult
type ProjectResult struct {
	// The slug of a project, used for vanity URLs. Regex: ```^[\w!@$()`.+,"\-']{3,64}$```.
	Slug string `json:"slug"`
	// The title or name of the project.
	Title string `json:"title"`
	// A short description of the project.
	Description string `json:"description"`
	// A list of the categories that the project has.
	Categories []string `json:"categories"`
	// The client side support of the project.
	ClientSide ProjectResultClientSide `json:"client_side"`
	// The server side support of the project.
	ServerSide ProjectResultServerSide `json:"server_side"`
	// The project type of the project.
	ProjectType ProjectResultProjectType `json:"project_type"`
	// The total number of downloads of the project.
	Downloads int `json:"downloads"`
	// The URL of the project's icon.
	IconURL OptNilString `json:"icon_url"`
	// The RGB color of the project, automatically generated from the project icon.
	Color OptNilInt `json:"color"`
	// The ID of the moderation thread associated with this project.
	ThreadID           OptString                          `json:"thread_id"`
	MonetizationStatus OptProjectResultMonetizationStatus `json:"monetization_status"`
	// The ID of the project.
	ProjectID string `json:"project_id"`
	// The username of the project's author.
	Author string `json:"author"`
	// A list of the categories that the project has which are not secondary.
	DisplayCategories []string `json:"display_categories"`
	// A list of the minecraft versions supported by the project.
	Versions []string `json:"versions"`
	// The total number of users following the project.
	Follows int `json:"follows"`
	// The date the project was added to search.
	DateCreated string `json:"date_created"`
	// The date the project was last modified.
	DateModified string `json:"date_modified"`
	// The latest version of minecraft that this project supports.
	LatestVersion OptString `json:"latest_version"`
	// The SPDX license ID of a project.
	License string `json:"license"`
	// All gallery images attached to the project.
	Gallery []string `json:"gallery"`
	// The featured gallery image of the project.
	FeaturedGallery OptNilString `json:"featured_gallery"`
}

// GetSlug returns the value of Slug.
func (s *ProjectResult) GetSlug() string {
	return s.Slug
}

// GetTitle returns the value of Title.
func (s *ProjectResult) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *ProjectResult) GetDescription() string {
	return s.Description
}

// GetCategories returns the value of Categories.
func (s *ProjectResult) GetCategories() []string {
	return s.Categories
}

// GetClientSide returns the value of ClientSide.
func (s *ProjectResult) GetClientSide() ProjectResultClientSide {
	return s.ClientSide
}

// GetServerSide returns the value of ServerSide.
func (s *ProjectResult) GetServerSide() ProjectResultServerSide {
	return s.ServerSide
}

// GetProjectType returns the value of ProjectType.
func (s *ProjectResult) GetProjectType() ProjectResultProjectType {
	return s.ProjectType
}

// GetDownloads returns the value of Downloads.
func (s *ProjectResult) GetDownloads() int {
	return s.Downloads
}

// GetIconURL returns the value of IconURL.
func (s *ProjectResult) GetIconURL() OptNilString {
	return s.IconURL
}

// GetColor returns the value of Color.
func (s *ProjectResult) GetColor() OptNilInt {
	return s.Color
}

// GetThreadID returns the value of ThreadID.
func (s *ProjectResult) GetThreadID() OptString {
	return s.ThreadID
}

// GetMonetizationStatus returns the value of MonetizationStatus.
func (s *ProjectResult) GetMonetizationStatus() OptProjectResultMonetizationStatus {
	return s.MonetizationStatus
}

// GetProjectID returns the value of ProjectID.
func (s *ProjectResult) GetProjectID() string {
	return s.ProjectID
}

// GetAuthor returns the value of Author.
func (s *ProjectResult) GetAuthor() string {
	return s.Author
}

// GetDisplayCategories returns the value of DisplayCategories.
func (s *ProjectResult) GetDisplayCategories() []string {
	return s.DisplayCategories
}

// GetVersions returns the value of Versions.
func (s *ProjectResult) GetVersions() []string {
	return s.Versions
}

// GetFollows returns the value of Follows.
func (s *ProjectResult) GetFollows() int {
	return s.Follows
}

// GetDateCreated returns the value of DateCreated.
func (s *ProjectResult) GetDateCreated() string {
	return s.DateCreated
}

// GetDateModified returns the value of DateModified.
func (s *ProjectResult) GetDateModified() string {
	return s.DateModified
}

// GetLatestVersion returns the value of LatestVersion.
func (s *ProjectResult) GetLatestVersion() OptString {
	return s.LatestVersion
}

// GetLicense returns the value of License.
func (s *ProjectResult) GetLicense() string {
	return s.License
}

// GetGallery returns the value of Gallery.
func (s *ProjectResult) GetGallery() []string {
	return s.Gallery
}

// GetFeaturedGallery returns the value of FeaturedGallery.
func (s *ProjectResult) GetFeaturedGallery() OptNilString {
	return s.FeaturedGallery
}

// SetSlug sets the value of Slug.
func (s *ProjectResult) SetSlug(val string) {
	s.Slug = val
}

// SetTitle sets the value of Title.
func (s *ProjectResult) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *ProjectResult) SetDescription(val string) {
	s.Description = val
}

// SetCategories sets the value of Categories.
func (s *ProjectResult) SetCategories(val []string) {
	s.Categories = val
}

// SetClientSide sets the value of ClientSide.
func (s *ProjectResult) SetClientSide(val ProjectResultClientSide) {
	s.ClientSide = val
}

// SetServerSide sets the value of ServerSide.
func (s *ProjectResult) SetServerSide(val ProjectResultServerSide) {
	s.ServerSide = val
}

// SetProjectType sets the value of ProjectType.
func (s *ProjectResult) SetProjectType(val ProjectResultProjectType) {
	s.ProjectType = val
}

// SetDownloads sets the value of Downloads.
func (s *ProjectResult) SetDownloads(val int) {
	s.Downloads = val
}

// SetIconURL sets the value of IconURL.
func (s *ProjectResult) SetIconURL(val OptNilString) {
	s.IconURL = val
}

// SetColor sets the value of Color.
func (s *ProjectResult) SetColor(val OptNilInt) {
	s.Color = val
}

// SetThreadID sets the value of ThreadID.
func (s *ProjectResult) SetThreadID(val OptString) {
	s.ThreadID = val
}

// SetMonetizationStatus sets the value of MonetizationStatus.
func (s *ProjectResult) SetMonetizationStatus(val OptProjectResultMonetizationStatus) {
	s.MonetizationStatus = val
}

// SetProjectID sets the value of ProjectID.
func (s *ProjectResult) SetProjectID(val string) {
	s.ProjectID = val
}

// SetAuthor sets the value of Author.
func (s *ProjectResult) SetAuthor(val string) {
	s.Author = val
}

// SetDisplayCategories sets the value of DisplayCategories.
func (s *ProjectResult) SetDisplayCategories(val []string) {
	s.DisplayCategories = val
}

// SetVersions sets the value of Versions.
func (s *ProjectResult) SetVersions(val []string) {
	s.Versions = val
}

// SetFollows sets the value of Follows.
func (s *ProjectResult) SetFollows(val int) {
	s.Follows = val
}

// SetDateCreated sets the value of DateCreated.
func (s *ProjectResult) SetDateCreated(val string) {
	s.DateCreated = val
}

// SetDateModified sets the value of DateModified.
func (s *ProjectResult) SetDateModified(val string) {
	s.DateModified = val
}

// SetLatestVersion sets the value of LatestVersion.
func (s *ProjectResult) SetLatestVersion(val OptString) {
	s.LatestVersion = val
}

// SetLicense sets the value of License.
func (s *ProjectResult) SetLicense(val string) {
	s.License = val
}

// SetGallery sets the value of Gallery.
func (s *ProjectResult) SetGallery(val []string) {
	s.Gallery = val
}

// SetFeaturedGallery sets the value of FeaturedGallery.
func (s *ProjectResult) SetFeaturedGallery(val OptNilString) {
	s.FeaturedGallery = val
}

// The client side support of the project.
type ProjectResultClientSide string

const (
	ProjectResultClientSideRequired    ProjectResultClientSide = "required"
	ProjectResultClientSideOptional    ProjectResultClientSide = "optional"
	ProjectResultClientSideUnsupported ProjectResultClientSide = "unsupported"
	ProjectResultClientSideUnknown     ProjectResultClientSide = "unknown"
)

// AllValues returns all ProjectResultClientSide values.
func (ProjectResultClientSide) AllValues() []ProjectResultClientSide {
	return []ProjectResultClientSide{
		ProjectResultClientSideRequired,
		ProjectResultClientSideOptional,
		ProjectResultClientSideUnsupported,
		ProjectResultClientSideUnknown,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProjectResultClientSide) MarshalText() ([]byte, error) {
	switch s {
	case ProjectResultClientSideRequired:
		return []byte(s), nil
	case ProjectResultClientSideOptional:
		return []byte(s), nil
	case ProjectResultClientSideUnsupported:
		return []byte(s), nil
	case ProjectResultClientSideUnknown:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProjectResultClientSide) UnmarshalText(data []byte) error {
	switch ProjectResultClientSide(data) {
	case ProjectResultClientSideRequired:
		*s = ProjectResultClientSideRequired
		return nil
	case ProjectResultClientSideOptional:
		*s = ProjectResultClientSideOptional
		return nil
	case ProjectResultClientSideUnsupported:
		*s = ProjectResultClientSideUnsupported
		return nil
	case ProjectResultClientSideUnknown:
		*s = ProjectResultClientSideUnknown
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ProjectResultMonetizationStatus string

const (
	ProjectResultMonetizationStatusMonetized        ProjectResultMonetizationStatus = "monetized"
	ProjectResultMonetizationStatusDemonetized      ProjectResultMonetizationStatus = "demonetized"
	ProjectResultMonetizationStatusForceDemonetized ProjectResultMonetizationStatus = "force-demonetized"
)

// AllValues returns all ProjectResultMonetizationStatus values.
func (ProjectResultMonetizationStatus) AllValues() []ProjectResultMonetizationStatus {
	return []ProjectResultMonetizationStatus{
		ProjectResultMonetizationStatusMonetized,
		ProjectResultMonetizationStatusDemonetized,
		ProjectResultMonetizationStatusForceDemonetized,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProjectResultMonetizationStatus) MarshalText() ([]byte, error) {
	switch s {
	case ProjectResultMonetizationStatusMonetized:
		return []byte(s), nil
	case ProjectResultMonetizationStatusDemonetized:
		return []byte(s), nil
	case ProjectResultMonetizationStatusForceDemonetized:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProjectResultMonetizationStatus) UnmarshalText(data []byte) error {
	switch ProjectResultMonetizationStatus(data) {
	case ProjectResultMonetizationStatusMonetized:
		*s = ProjectResultMonetizationStatusMonetized
		return nil
	case ProjectResultMonetizationStatusDemonetized:
		*s = ProjectResultMonetizationStatusDemonetized
		return nil
	case ProjectResultMonetizationStatusForceDemonetized:
		*s = ProjectResultMonetizationStatusForceDemonetized
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The project type of the project.
type ProjectResultProjectType string

const (
	ProjectResultProjectTypeMod          ProjectResultProjectType = "mod"
	ProjectResultProjectTypeModpack      ProjectResultProjectType = "modpack"
	ProjectResultProjectTypeResourcepack ProjectResultProjectType = "resourcepack"
	ProjectResultProjectTypeShader       ProjectResultProjectType = "shader"
)

// AllValues returns all ProjectResultProjectType values.
func (ProjectResultProjectType) AllValues() []ProjectResultProjectType {
	return []ProjectResultProjectType{
		ProjectResultProjectTypeMod,
		ProjectResultProjectTypeModpack,
		ProjectResultProjectTypeResourcepack,
		ProjectResultProjectTypeShader,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProjectResultProjectType) MarshalText() ([]byte, error) {
	switch s {
	case ProjectResultProjectTypeMod:
		return []byte(s), nil
	case ProjectResultProjectTypeModpack:
		return []byte(s), nil
	case ProjectResultProjectTypeResourcepack:
		return []byte(s), nil
	case ProjectResultProjectTypeShader:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProjectResultProjectType) UnmarshalText(data []byte) error {
	switch ProjectResultProjectType(data) {
	case ProjectResultProjectTypeMod:
		*s = ProjectResultProjectTypeMod
		return nil
	case ProjectResultProjectTypeModpack:
		*s = ProjectResultProjectTypeModpack
		return nil
	case ProjectResultProjectTypeResourcepack:
		*s = ProjectResultProjectTypeResourcepack
		return nil
	case ProjectResultProjectTypeShader:
		*s = ProjectResultProjectTypeShader
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The server side support of the project.
type ProjectResultServerSide string

const (
	ProjectResultServerSideRequired    ProjectResultServerSide = "required"
	ProjectResultServerSideOptional    ProjectResultServerSide = "optional"
	ProjectResultServerSideUnsupported ProjectResultServerSide = "unsupported"
	ProjectResultServerSideUnknown     ProjectResultServerSide = "unknown"
)

// AllValues returns all ProjectResultServerSide values.
func (ProjectResultServerSide) AllValues() []ProjectResultServerSide {
	return []ProjectResultServerSide{
		ProjectResultServerSideRequired,
		ProjectResultServerSideOptional,
		ProjectResultServerSideUnsupported,
		ProjectResultServerSideUnknown,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProjectResultServerSide) MarshalText() ([]byte, error) {
	switch s {
	case ProjectResultServerSideRequired:
		return []byte(s), nil
	case ProjectResultServerSideOptional:
		return []byte(s), nil
	case ProjectResultServerSideUnsupported:
		return []byte(s), nil
	case ProjectResultServerSideUnknown:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProjectResultServerSide) UnmarshalText(data []byte) error {
	switch ProjectResultServerSide(data) {
	case ProjectResultServerSideRequired:
		*s = ProjectResultServerSideRequired
		return nil
	case ProjectResultServerSideOptional:
		*s = ProjectResultServerSideOptional
		return nil
	case ProjectResultServerSideUnsupported:
		*s = ProjectResultServerSideUnsupported
		return nil
	case ProjectResultServerSideUnknown:
		*s = ProjectResultServerSideUnknown
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type ProjectServerSide string

const (
	ProjectServerSideRequired    ProjectServerSide = "required"
	ProjectServerSideOptional    ProjectServerSide = "optional"
	ProjectServerSideUnsupported ProjectServerSide = "unsupported"
	ProjectServerSideUnknown     ProjectServerSide = "unknown"
)

// AllValues returns all ProjectServerSide values.
func (ProjectServerSide) AllValues() []ProjectServerSide {
	return []ProjectServerSide{
		ProjectServerSideRequired,
		ProjectServerSideOptional,
		ProjectServerSideUnsupported,
		ProjectServerSideUnknown,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProjectServerSide) MarshalText() ([]byte, error) {
	switch s {
	case ProjectServerSideRequired:
		return []byte(s), nil
	case ProjectServerSideOptional:
		return []byte(s), nil
	case ProjectServerSideUnsupported:
		return []byte(s), nil
	case ProjectServerSideUnknown:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProjectServerSide) UnmarshalText(data []byte) error {
	switch ProjectServerSide(data) {
	case ProjectServerSideRequired:
		*s = ProjectServerSideRequired
		return nil
	case ProjectServerSideOptional:
		*s = ProjectServerSideOptional
		return nil
	case ProjectServerSideUnsupported:
		*s = ProjectServerSideUnsupported
		return nil
	case ProjectServerSideUnknown:
		*s = ProjectServerSideUnknown
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The status of the project.
type ProjectStatus string

const (
	ProjectStatusApproved   ProjectStatus = "approved"
	ProjectStatusArchived   ProjectStatus = "archived"
	ProjectStatusRejected   ProjectStatus = "rejected"
	ProjectStatusDraft      ProjectStatus = "draft"
	ProjectStatusUnlisted   ProjectStatus = "unlisted"
	ProjectStatusProcessing ProjectStatus = "processing"
	ProjectStatusWithheld   ProjectStatus = "withheld"
	ProjectStatusScheduled  ProjectStatus = "scheduled"
	ProjectStatusPrivate    ProjectStatus = "private"
	ProjectStatusUnknown    ProjectStatus = "unknown"
)

// AllValues returns all ProjectStatus values.
func (ProjectStatus) AllValues() []ProjectStatus {
	return []ProjectStatus{
		ProjectStatusApproved,
		ProjectStatusArchived,
		ProjectStatusRejected,
		ProjectStatusDraft,
		ProjectStatusUnlisted,
		ProjectStatusProcessing,
		ProjectStatusWithheld,
		ProjectStatusScheduled,
		ProjectStatusPrivate,
		ProjectStatusUnknown,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProjectStatus) MarshalText() ([]byte, error) {
	switch s {
	case ProjectStatusApproved:
		return []byte(s), nil
	case ProjectStatusArchived:
		return []byte(s), nil
	case ProjectStatusRejected:
		return []byte(s), nil
	case ProjectStatusDraft:
		return []byte(s), nil
	case ProjectStatusUnlisted:
		return []byte(s), nil
	case ProjectStatusProcessing:
		return []byte(s), nil
	case ProjectStatusWithheld:
		return []byte(s), nil
	case ProjectStatusScheduled:
		return []byte(s), nil
	case ProjectStatusPrivate:
		return []byte(s), nil
	case ProjectStatusUnknown:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProjectStatus) UnmarshalText(data []byte) error {
	switch ProjectStatus(data) {
	case ProjectStatusApproved:
		*s = ProjectStatusApproved
		return nil
	case ProjectStatusArchived:
		*s = ProjectStatusArchived
		return nil
	case ProjectStatusRejected:
		*s = ProjectStatusRejected
		return nil
	case ProjectStatusDraft:
		*s = ProjectStatusDraft
		return nil
	case ProjectStatusUnlisted:
		*s = ProjectStatusUnlisted
		return nil
	case ProjectStatusProcessing:
		*s = ProjectStatusProcessing
		return nil
	case ProjectStatusWithheld:
		*s = ProjectStatusWithheld
		return nil
	case ProjectStatusScheduled:
		*s = ProjectStatusScheduled
		return nil
	case ProjectStatusPrivate:
		*s = ProjectStatusPrivate
		return nil
	case ProjectStatusUnknown:
		*s = ProjectStatusUnknown
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type RandomProjectsOKApplicationJSON []Project

func (*RandomProjectsOKApplicationJSON) randomProjectsRes() {}

// ReadNotificationNoContent is response for ReadNotification operation.
type ReadNotificationNoContent struct{}

func (*ReadNotificationNoContent) readNotificationRes() {}

// ReadNotificationNotFound is response for ReadNotification operation.
type ReadNotificationNotFound struct{}

func (*ReadNotificationNotFound) readNotificationRes() {}

// ReadNotificationsNoContent is response for ReadNotifications operation.
type ReadNotificationsNoContent struct{}

func (*ReadNotificationsNoContent) readNotificationsRes() {}

// ReadNotificationsNotFound is response for ReadNotifications operation.
type ReadNotificationsNotFound struct{}

func (*ReadNotificationsNotFound) readNotificationsRes() {}

// Merged schema.
// Ref: #/components/schemas/Report
type Report struct {
	// The type of the report being sent.
	ReportType string `json:"report_type"`
	// The ID of the item (project, version, or user) being reported.
	ItemID string `json:"item_id"`
	// The type of the item being reported.
	ItemType ReportItemType `json:"item_type"`
	// The extended explanation of the report.
	Body string `json:"body"`
	// The ID of the report.
	ID OptString `json:"id"`
	// The ID of the user who reported the item.
	Reporter string `json:"reporter"`
	// The time at which the report was created.
	Created string `json:"created"`
	// Whether the report is resolved.
	Closed bool `json:"closed"`
	// The ID of the moderation thread associated with this report.
	ThreadID string `json:"thread_id"`
}

// GetReportType returns the value of ReportType.
func (s *Report) GetReportType() string {
	return s.ReportType
}

// GetItemID returns the value of ItemID.
func (s *Report) GetItemID() string {
	return s.ItemID
}

// GetItemType returns the value of ItemType.
func (s *Report) GetItemType() ReportItemType {
	return s.ItemType
}

// GetBody returns the value of Body.
func (s *Report) GetBody() string {
	return s.Body
}

// GetID returns the value of ID.
func (s *Report) GetID() OptString {
	return s.ID
}

// GetReporter returns the value of Reporter.
func (s *Report) GetReporter() string {
	return s.Reporter
}

// GetCreated returns the value of Created.
func (s *Report) GetCreated() string {
	return s.Created
}

// GetClosed returns the value of Closed.
func (s *Report) GetClosed() bool {
	return s.Closed
}

// GetThreadID returns the value of ThreadID.
func (s *Report) GetThreadID() string {
	return s.ThreadID
}

// SetReportType sets the value of ReportType.
func (s *Report) SetReportType(val string) {
	s.ReportType = val
}

// SetItemID sets the value of ItemID.
func (s *Report) SetItemID(val string) {
	s.ItemID = val
}

// SetItemType sets the value of ItemType.
func (s *Report) SetItemType(val ReportItemType) {
	s.ItemType = val
}

// SetBody sets the value of Body.
func (s *Report) SetBody(val string) {
	s.Body = val
}

// SetID sets the value of ID.
func (s *Report) SetID(val OptString) {
	s.ID = val
}

// SetReporter sets the value of Reporter.
func (s *Report) SetReporter(val string) {
	s.Reporter = val
}

// SetCreated sets the value of Created.
func (s *Report) SetCreated(val string) {
	s.Created = val
}

// SetClosed sets the value of Closed.
func (s *Report) SetClosed(val bool) {
	s.Closed = val
}

// SetThreadID sets the value of ThreadID.
func (s *Report) SetThreadID(val string) {
	s.ThreadID = val
}

func (*Report) getReportRes()    {}
func (*Report) submitReportRes() {}

// The type of the item being reported.
type ReportItemType string

const (
	ReportItemTypeProject ReportItemType = "project"
	ReportItemTypeUser    ReportItemType = "user"
	ReportItemTypeVersion ReportItemType = "version"
)

// AllValues returns all ReportItemType values.
func (ReportItemType) AllValues() []ReportItemType {
	return []ReportItemType{
		ReportItemTypeProject,
		ReportItemTypeUser,
		ReportItemTypeVersion,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ReportItemType) MarshalText() ([]byte, error) {
	switch s {
	case ReportItemTypeProject:
		return []byte(s), nil
	case ReportItemTypeUser:
		return []byte(s), nil
	case ReportItemTypeVersion:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReportItemType) UnmarshalText(data []byte) error {
	switch ReportItemType(data) {
	case ReportItemTypeProject:
		*s = ReportItemTypeProject
		return nil
	case ReportItemTypeUser:
		*s = ReportItemTypeUser
		return nil
	case ReportItemTypeVersion:
		*s = ReportItemTypeVersion
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Schedule
type Schedule struct {
	Time string `json:"time"`
	// The requested status when scheduling the project for release.
	RequestedStatus ScheduleRequestedStatus `json:"requested_status"`
}

// GetTime returns the value of Time.
func (s *Schedule) GetTime() string {
	return s.Time
}

// GetRequestedStatus returns the value of RequestedStatus.
func (s *Schedule) GetRequestedStatus() ScheduleRequestedStatus {
	return s.RequestedStatus
}

// SetTime sets the value of Time.
func (s *Schedule) SetTime(val string) {
	s.Time = val
}

// SetRequestedStatus sets the value of RequestedStatus.
func (s *Schedule) SetRequestedStatus(val ScheduleRequestedStatus) {
	s.RequestedStatus = val
}

// ScheduleProjectNoContent is response for ScheduleProject operation.
type ScheduleProjectNoContent struct{}

func (*ScheduleProjectNoContent) scheduleProjectRes() {}

// The requested status when scheduling the project for release.
type ScheduleRequestedStatus string

const (
	ScheduleRequestedStatusApproved ScheduleRequestedStatus = "approved"
	ScheduleRequestedStatusArchived ScheduleRequestedStatus = "archived"
	ScheduleRequestedStatusUnlisted ScheduleRequestedStatus = "unlisted"
	ScheduleRequestedStatusPrivate  ScheduleRequestedStatus = "private"
	ScheduleRequestedStatusDraft    ScheduleRequestedStatus = "draft"
)

// AllValues returns all ScheduleRequestedStatus values.
func (ScheduleRequestedStatus) AllValues() []ScheduleRequestedStatus {
	return []ScheduleRequestedStatus{
		ScheduleRequestedStatusApproved,
		ScheduleRequestedStatusArchived,
		ScheduleRequestedStatusUnlisted,
		ScheduleRequestedStatusPrivate,
		ScheduleRequestedStatusDraft,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ScheduleRequestedStatus) MarshalText() ([]byte, error) {
	switch s {
	case ScheduleRequestedStatusApproved:
		return []byte(s), nil
	case ScheduleRequestedStatusArchived:
		return []byte(s), nil
	case ScheduleRequestedStatusUnlisted:
		return []byte(s), nil
	case ScheduleRequestedStatusPrivate:
		return []byte(s), nil
	case ScheduleRequestedStatusDraft:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ScheduleRequestedStatus) UnmarshalText(data []byte) error {
	switch ScheduleRequestedStatus(data) {
	case ScheduleRequestedStatusApproved:
		*s = ScheduleRequestedStatusApproved
		return nil
	case ScheduleRequestedStatusArchived:
		*s = ScheduleRequestedStatusArchived
		return nil
	case ScheduleRequestedStatusUnlisted:
		*s = ScheduleRequestedStatusUnlisted
		return nil
	case ScheduleRequestedStatusPrivate:
		*s = ScheduleRequestedStatusPrivate
		return nil
	case ScheduleRequestedStatusDraft:
		*s = ScheduleRequestedStatusDraft
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ScheduleVersionNoContent is response for ScheduleVersion operation.
type ScheduleVersionNoContent struct{}

func (*ScheduleVersionNoContent) scheduleVersionRes() {}

type SearchProjectsIndex string

const (
	SearchProjectsIndexRelevance SearchProjectsIndex = "relevance"
	SearchProjectsIndexDownloads SearchProjectsIndex = "downloads"
	SearchProjectsIndexFollows   SearchProjectsIndex = "follows"
	SearchProjectsIndexNewest    SearchProjectsIndex = "newest"
	SearchProjectsIndexUpdated   SearchProjectsIndex = "updated"
)

// AllValues returns all SearchProjectsIndex values.
func (SearchProjectsIndex) AllValues() []SearchProjectsIndex {
	return []SearchProjectsIndex{
		SearchProjectsIndexRelevance,
		SearchProjectsIndexDownloads,
		SearchProjectsIndexFollows,
		SearchProjectsIndexNewest,
		SearchProjectsIndexUpdated,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SearchProjectsIndex) MarshalText() ([]byte, error) {
	switch s {
	case SearchProjectsIndexRelevance:
		return []byte(s), nil
	case SearchProjectsIndexDownloads:
		return []byte(s), nil
	case SearchProjectsIndexFollows:
		return []byte(s), nil
	case SearchProjectsIndexNewest:
		return []byte(s), nil
	case SearchProjectsIndexUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SearchProjectsIndex) UnmarshalText(data []byte) error {
	switch SearchProjectsIndex(data) {
	case SearchProjectsIndexRelevance:
		*s = SearchProjectsIndexRelevance
		return nil
	case SearchProjectsIndexDownloads:
		*s = SearchProjectsIndexDownloads
		return nil
	case SearchProjectsIndexFollows:
		*s = SearchProjectsIndexFollows
		return nil
	case SearchProjectsIndexNewest:
		*s = SearchProjectsIndexNewest
		return nil
	case SearchProjectsIndexUpdated:
		*s = SearchProjectsIndexUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/SearchResults
type SearchResults struct {
	// The list of results.
	Hits []ProjectResult `json:"hits"`
	// The number of results that were skipped by the query.
	Offset int `json:"offset"`
	// The number of results that were returned by the query.
	Limit int `json:"limit"`
	// The total number of results that match the query.
	TotalHits int `json:"total_hits"`
}

// GetHits returns the value of Hits.
func (s *SearchResults) GetHits() []ProjectResult {
	return s.Hits
}

// GetOffset returns the value of Offset.
func (s *SearchResults) GetOffset() int {
	return s.Offset
}

// GetLimit returns the value of Limit.
func (s *SearchResults) GetLimit() int {
	return s.Limit
}

// GetTotalHits returns the value of TotalHits.
func (s *SearchResults) GetTotalHits() int {
	return s.TotalHits
}

// SetHits sets the value of Hits.
func (s *SearchResults) SetHits(val []ProjectResult) {
	s.Hits = val
}

// SetOffset sets the value of Offset.
func (s *SearchResults) SetOffset(val int) {
	s.Offset = val
}

// SetLimit sets the value of Limit.
func (s *SearchResults) SetLimit(val int) {
	s.Limit = val
}

// SetTotalHits sets the value of TotalHits.
func (s *SearchResults) SetTotalHits(val int) {
	s.TotalHits = val
}

func (*SearchResults) searchProjectsRes() {}

// SendThreadMessageNotFound is response for SendThreadMessage operation.
type SendThreadMessageNotFound struct{}

func (*SendThreadMessageNotFound) sendThreadMessageRes() {}

// Ref: #/components/schemas/Statistics
type Statistics struct {
	// Number of projects on Modrinth.
	Projects OptInt `json:"projects"`
	// Number of versions on Modrinth.
	Versions OptInt `json:"versions"`
	// Number of version files on Modrinth.
	Files OptInt `json:"files"`
	// Number of authors (users with projects) on Modrinth.
	Authors OptInt `json:"authors"`
}

// GetProjects returns the value of Projects.
func (s *Statistics) GetProjects() OptInt {
	return s.Projects
}

// GetVersions returns the value of Versions.
func (s *Statistics) GetVersions() OptInt {
	return s.Versions
}

// GetFiles returns the value of Files.
func (s *Statistics) GetFiles() OptInt {
	return s.Files
}

// GetAuthors returns the value of Authors.
func (s *Statistics) GetAuthors() OptInt {
	return s.Authors
}

// SetProjects sets the value of Projects.
func (s *Statistics) SetProjects(val OptInt) {
	s.Projects = val
}

// SetVersions sets the value of Versions.
func (s *Statistics) SetVersions(val OptInt) {
	s.Versions = val
}

// SetFiles sets the value of Files.
func (s *Statistics) SetFiles(val OptInt) {
	s.Files = val
}

// SetAuthors sets the value of Authors.
func (s *Statistics) SetAuthors(val OptInt) {
	s.Authors = val
}

// Ref: #/components/schemas/TeamMember
type TeamMember struct {
	// The ID of the team this team member is a member of.
	TeamID string `json:"team_id"`
	User   User   `json:"user"`
	// The user's role on the team.
	Role string `json:"role"`
	// The user's permissions in bitfield format (requires authorization to view)
	// In order from first to tenth bit, the bits are:
	// - UPLOAD_VERSION
	// - DELETE_VERSION
	// - EDIT_DETAILS
	// - EDIT_BODY
	// - MANAGE_INVITES
	// - REMOVE_MEMBER
	// - EDIT_MEMBER
	// - DELETE_PROJECT
	// - VIEW_ANALYTICS
	// - VIEW_PAYOUTS.
	Permissions OptInt `json:"permissions"`
	// Whether or not the user has accepted to be on the team (requires authorization to view).
	Accepted bool `json:"accepted"`
	// The split of payouts going to this user. The proportion of payouts they get is their split divided
	// by the sum of the splits of all members.
	PayoutsSplit OptInt `json:"payouts_split"`
	// The order of the team member.
	Ordering OptInt `json:"ordering"`
}

// GetTeamID returns the value of TeamID.
func (s *TeamMember) GetTeamID() string {
	return s.TeamID
}

// GetUser returns the value of User.
func (s *TeamMember) GetUser() User {
	return s.User
}

// GetRole returns the value of Role.
func (s *TeamMember) GetRole() string {
	return s.Role
}

// GetPermissions returns the value of Permissions.
func (s *TeamMember) GetPermissions() OptInt {
	return s.Permissions
}

// GetAccepted returns the value of Accepted.
func (s *TeamMember) GetAccepted() bool {
	return s.Accepted
}

// GetPayoutsSplit returns the value of PayoutsSplit.
func (s *TeamMember) GetPayoutsSplit() OptInt {
	return s.PayoutsSplit
}

// GetOrdering returns the value of Ordering.
func (s *TeamMember) GetOrdering() OptInt {
	return s.Ordering
}

// SetTeamID sets the value of TeamID.
func (s *TeamMember) SetTeamID(val string) {
	s.TeamID = val
}

// SetUser sets the value of User.
func (s *TeamMember) SetUser(val User) {
	s.User = val
}

// SetRole sets the value of Role.
func (s *TeamMember) SetRole(val string) {
	s.Role = val
}

// SetPermissions sets the value of Permissions.
func (s *TeamMember) SetPermissions(val OptInt) {
	s.Permissions = val
}

// SetAccepted sets the value of Accepted.
func (s *TeamMember) SetAccepted(val bool) {
	s.Accepted = val
}

// SetPayoutsSplit sets the value of PayoutsSplit.
func (s *TeamMember) SetPayoutsSplit(val OptInt) {
	s.PayoutsSplit = val
}

// SetOrdering sets the value of Ordering.
func (s *TeamMember) SetOrdering(val OptInt) {
	s.Ordering = val
}

// Ref: #/components/schemas/Thread
type Thread struct {
	// The ID of the thread.
	ID   string     `json:"id"`
	Type ThreadType `json:"type"`
	// The ID of the associated project if a project thread.
	ProjectID OptNilString `json:"project_id"`
	// The ID of the associated report if a report thread.
	ReportID OptNilString    `json:"report_id"`
	Messages []ThreadMessage `json:"messages"`
	Members  []User          `json:"members"`
}

// GetID returns the value of ID.
func (s *Thread) GetID() string {
	return s.ID
}

// GetType returns the value of Type.
func (s *Thread) GetType() ThreadType {
	return s.Type
}

// GetProjectID returns the value of ProjectID.
func (s *Thread) GetProjectID() OptNilString {
	return s.ProjectID
}

// GetReportID returns the value of ReportID.
func (s *Thread) GetReportID() OptNilString {
	return s.ReportID
}

// GetMessages returns the value of Messages.
func (s *Thread) GetMessages() []ThreadMessage {
	return s.Messages
}

// GetMembers returns the value of Members.
func (s *Thread) GetMembers() []User {
	return s.Members
}

// SetID sets the value of ID.
func (s *Thread) SetID(val string) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *Thread) SetType(val ThreadType) {
	s.Type = val
}

// SetProjectID sets the value of ProjectID.
func (s *Thread) SetProjectID(val OptNilString) {
	s.ProjectID = val
}

// SetReportID sets the value of ReportID.
func (s *Thread) SetReportID(val OptNilString) {
	s.ReportID = val
}

// SetMessages sets the value of Messages.
func (s *Thread) SetMessages(val []ThreadMessage) {
	s.Messages = val
}

// SetMembers sets the value of Members.
func (s *Thread) SetMembers(val []User) {
	s.Members = val
}

func (*Thread) getThreadRes()         {}
func (*Thread) sendThreadMessageRes() {}

// Ref: #/components/schemas/ThreadMessage
type ThreadMessage struct {
	// The ID of the message itself.
	ID string `json:"id"`
	// The ID of the author.
	AuthorID OptNilString      `json:"author_id"`
	Body     ThreadMessageBody `json:"body"`
	// The time at which the message was created.
	Created string `json:"created"`
}

// GetID returns the value of ID.
func (s *ThreadMessage) GetID() string {
	return s.ID
}

// GetAuthorID returns the value of AuthorID.
func (s *ThreadMessage) GetAuthorID() OptNilString {
	return s.AuthorID
}

// GetBody returns the value of Body.
func (s *ThreadMessage) GetBody() ThreadMessageBody {
	return s.Body
}

// GetCreated returns the value of Created.
func (s *ThreadMessage) GetCreated() string {
	return s.Created
}

// SetID sets the value of ID.
func (s *ThreadMessage) SetID(val string) {
	s.ID = val
}

// SetAuthorID sets the value of AuthorID.
func (s *ThreadMessage) SetAuthorID(val OptNilString) {
	s.AuthorID = val
}

// SetBody sets the value of Body.
func (s *ThreadMessage) SetBody(val ThreadMessageBody) {
	s.Body = val
}

// SetCreated sets the value of Created.
func (s *ThreadMessage) SetCreated(val string) {
	s.Created = val
}

// The contents of the message. **Fields will vary depending on message type.**.
// Ref: #/components/schemas/ThreadMessageBody
type ThreadMessageBody struct {
	// The type of message.
	Type ThreadMessageBodyType `json:"type"`
	// The actual message text. **Only present for `text` message type**.
	Body OptString `json:"body"`
	// Whether the message is only visible to moderators. **Only present for `text` message type**.
	Private OptBool `json:"private"`
	// The ID of the message being replied to by this message. **Only present for `text` message type**.
	ReplyingTo OptNilString `json:"replying_to"`
	// The old status of the project. **Only present for `status_change` message type**.
	OldStatus OptThreadMessageBodyOldStatus `json:"old_status"`
	// The new status of the project. **Only present for `status_change` message type**.
	NewStatus OptThreadMessageBodyNewStatus `json:"new_status"`
}

// GetType returns the value of Type.
func (s *ThreadMessageBody) GetType() ThreadMessageBodyType {
	return s.Type
}

// GetBody returns the value of Body.
func (s *ThreadMessageBody) GetBody() OptString {
	return s.Body
}

// GetPrivate returns the value of Private.
func (s *ThreadMessageBody) GetPrivate() OptBool {
	return s.Private
}

// GetReplyingTo returns the value of ReplyingTo.
func (s *ThreadMessageBody) GetReplyingTo() OptNilString {
	return s.ReplyingTo
}

// GetOldStatus returns the value of OldStatus.
func (s *ThreadMessageBody) GetOldStatus() OptThreadMessageBodyOldStatus {
	return s.OldStatus
}

// GetNewStatus returns the value of NewStatus.
func (s *ThreadMessageBody) GetNewStatus() OptThreadMessageBodyNewStatus {
	return s.NewStatus
}

// SetType sets the value of Type.
func (s *ThreadMessageBody) SetType(val ThreadMessageBodyType) {
	s.Type = val
}

// SetBody sets the value of Body.
func (s *ThreadMessageBody) SetBody(val OptString) {
	s.Body = val
}

// SetPrivate sets the value of Private.
func (s *ThreadMessageBody) SetPrivate(val OptBool) {
	s.Private = val
}

// SetReplyingTo sets the value of ReplyingTo.
func (s *ThreadMessageBody) SetReplyingTo(val OptNilString) {
	s.ReplyingTo = val
}

// SetOldStatus sets the value of OldStatus.
func (s *ThreadMessageBody) SetOldStatus(val OptThreadMessageBodyOldStatus) {
	s.OldStatus = val
}

// SetNewStatus sets the value of NewStatus.
func (s *ThreadMessageBody) SetNewStatus(val OptThreadMessageBodyNewStatus) {
	s.NewStatus = val
}

// The new status of the project. **Only present for `status_change` message type**.
type ThreadMessageBodyNewStatus string

const (
	ThreadMessageBodyNewStatusApproved   ThreadMessageBodyNewStatus = "approved"
	ThreadMessageBodyNewStatusArchived   ThreadMessageBodyNewStatus = "archived"
	ThreadMessageBodyNewStatusRejected   ThreadMessageBodyNewStatus = "rejected"
	ThreadMessageBodyNewStatusDraft      ThreadMessageBodyNewStatus = "draft"
	ThreadMessageBodyNewStatusUnlisted   ThreadMessageBodyNewStatus = "unlisted"
	ThreadMessageBodyNewStatusProcessing ThreadMessageBodyNewStatus = "processing"
	ThreadMessageBodyNewStatusWithheld   ThreadMessageBodyNewStatus = "withheld"
	ThreadMessageBodyNewStatusScheduled  ThreadMessageBodyNewStatus = "scheduled"
	ThreadMessageBodyNewStatusPrivate    ThreadMessageBodyNewStatus = "private"
	ThreadMessageBodyNewStatusUnknown    ThreadMessageBodyNewStatus = "unknown"
)

// AllValues returns all ThreadMessageBodyNewStatus values.
func (ThreadMessageBodyNewStatus) AllValues() []ThreadMessageBodyNewStatus {
	return []ThreadMessageBodyNewStatus{
		ThreadMessageBodyNewStatusApproved,
		ThreadMessageBodyNewStatusArchived,
		ThreadMessageBodyNewStatusRejected,
		ThreadMessageBodyNewStatusDraft,
		ThreadMessageBodyNewStatusUnlisted,
		ThreadMessageBodyNewStatusProcessing,
		ThreadMessageBodyNewStatusWithheld,
		ThreadMessageBodyNewStatusScheduled,
		ThreadMessageBodyNewStatusPrivate,
		ThreadMessageBodyNewStatusUnknown,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ThreadMessageBodyNewStatus) MarshalText() ([]byte, error) {
	switch s {
	case ThreadMessageBodyNewStatusApproved:
		return []byte(s), nil
	case ThreadMessageBodyNewStatusArchived:
		return []byte(s), nil
	case ThreadMessageBodyNewStatusRejected:
		return []byte(s), nil
	case ThreadMessageBodyNewStatusDraft:
		return []byte(s), nil
	case ThreadMessageBodyNewStatusUnlisted:
		return []byte(s), nil
	case ThreadMessageBodyNewStatusProcessing:
		return []byte(s), nil
	case ThreadMessageBodyNewStatusWithheld:
		return []byte(s), nil
	case ThreadMessageBodyNewStatusScheduled:
		return []byte(s), nil
	case ThreadMessageBodyNewStatusPrivate:
		return []byte(s), nil
	case ThreadMessageBodyNewStatusUnknown:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ThreadMessageBodyNewStatus) UnmarshalText(data []byte) error {
	switch ThreadMessageBodyNewStatus(data) {
	case ThreadMessageBodyNewStatusApproved:
		*s = ThreadMessageBodyNewStatusApproved
		return nil
	case ThreadMessageBodyNewStatusArchived:
		*s = ThreadMessageBodyNewStatusArchived
		return nil
	case ThreadMessageBodyNewStatusRejected:
		*s = ThreadMessageBodyNewStatusRejected
		return nil
	case ThreadMessageBodyNewStatusDraft:
		*s = ThreadMessageBodyNewStatusDraft
		return nil
	case ThreadMessageBodyNewStatusUnlisted:
		*s = ThreadMessageBodyNewStatusUnlisted
		return nil
	case ThreadMessageBodyNewStatusProcessing:
		*s = ThreadMessageBodyNewStatusProcessing
		return nil
	case ThreadMessageBodyNewStatusWithheld:
		*s = ThreadMessageBodyNewStatusWithheld
		return nil
	case ThreadMessageBodyNewStatusScheduled:
		*s = ThreadMessageBodyNewStatusScheduled
		return nil
	case ThreadMessageBodyNewStatusPrivate:
		*s = ThreadMessageBodyNewStatusPrivate
		return nil
	case ThreadMessageBodyNewStatusUnknown:
		*s = ThreadMessageBodyNewStatusUnknown
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The old status of the project. **Only present for `status_change` message type**.
type ThreadMessageBodyOldStatus string

const (
	ThreadMessageBodyOldStatusApproved   ThreadMessageBodyOldStatus = "approved"
	ThreadMessageBodyOldStatusArchived   ThreadMessageBodyOldStatus = "archived"
	ThreadMessageBodyOldStatusRejected   ThreadMessageBodyOldStatus = "rejected"
	ThreadMessageBodyOldStatusDraft      ThreadMessageBodyOldStatus = "draft"
	ThreadMessageBodyOldStatusUnlisted   ThreadMessageBodyOldStatus = "unlisted"
	ThreadMessageBodyOldStatusProcessing ThreadMessageBodyOldStatus = "processing"
	ThreadMessageBodyOldStatusWithheld   ThreadMessageBodyOldStatus = "withheld"
	ThreadMessageBodyOldStatusScheduled  ThreadMessageBodyOldStatus = "scheduled"
	ThreadMessageBodyOldStatusPrivate    ThreadMessageBodyOldStatus = "private"
	ThreadMessageBodyOldStatusUnknown    ThreadMessageBodyOldStatus = "unknown"
)

// AllValues returns all ThreadMessageBodyOldStatus values.
func (ThreadMessageBodyOldStatus) AllValues() []ThreadMessageBodyOldStatus {
	return []ThreadMessageBodyOldStatus{
		ThreadMessageBodyOldStatusApproved,
		ThreadMessageBodyOldStatusArchived,
		ThreadMessageBodyOldStatusRejected,
		ThreadMessageBodyOldStatusDraft,
		ThreadMessageBodyOldStatusUnlisted,
		ThreadMessageBodyOldStatusProcessing,
		ThreadMessageBodyOldStatusWithheld,
		ThreadMessageBodyOldStatusScheduled,
		ThreadMessageBodyOldStatusPrivate,
		ThreadMessageBodyOldStatusUnknown,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ThreadMessageBodyOldStatus) MarshalText() ([]byte, error) {
	switch s {
	case ThreadMessageBodyOldStatusApproved:
		return []byte(s), nil
	case ThreadMessageBodyOldStatusArchived:
		return []byte(s), nil
	case ThreadMessageBodyOldStatusRejected:
		return []byte(s), nil
	case ThreadMessageBodyOldStatusDraft:
		return []byte(s), nil
	case ThreadMessageBodyOldStatusUnlisted:
		return []byte(s), nil
	case ThreadMessageBodyOldStatusProcessing:
		return []byte(s), nil
	case ThreadMessageBodyOldStatusWithheld:
		return []byte(s), nil
	case ThreadMessageBodyOldStatusScheduled:
		return []byte(s), nil
	case ThreadMessageBodyOldStatusPrivate:
		return []byte(s), nil
	case ThreadMessageBodyOldStatusUnknown:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ThreadMessageBodyOldStatus) UnmarshalText(data []byte) error {
	switch ThreadMessageBodyOldStatus(data) {
	case ThreadMessageBodyOldStatusApproved:
		*s = ThreadMessageBodyOldStatusApproved
		return nil
	case ThreadMessageBodyOldStatusArchived:
		*s = ThreadMessageBodyOldStatusArchived
		return nil
	case ThreadMessageBodyOldStatusRejected:
		*s = ThreadMessageBodyOldStatusRejected
		return nil
	case ThreadMessageBodyOldStatusDraft:
		*s = ThreadMessageBodyOldStatusDraft
		return nil
	case ThreadMessageBodyOldStatusUnlisted:
		*s = ThreadMessageBodyOldStatusUnlisted
		return nil
	case ThreadMessageBodyOldStatusProcessing:
		*s = ThreadMessageBodyOldStatusProcessing
		return nil
	case ThreadMessageBodyOldStatusWithheld:
		*s = ThreadMessageBodyOldStatusWithheld
		return nil
	case ThreadMessageBodyOldStatusScheduled:
		*s = ThreadMessageBodyOldStatusScheduled
		return nil
	case ThreadMessageBodyOldStatusPrivate:
		*s = ThreadMessageBodyOldStatusPrivate
		return nil
	case ThreadMessageBodyOldStatusUnknown:
		*s = ThreadMessageBodyOldStatusUnknown
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The type of message.
type ThreadMessageBodyType string

const (
	ThreadMessageBodyTypeStatusChange  ThreadMessageBodyType = "status_change"
	ThreadMessageBodyTypeText          ThreadMessageBodyType = "text"
	ThreadMessageBodyTypeThreadClosure ThreadMessageBodyType = "thread_closure"
	ThreadMessageBodyTypeDeleted       ThreadMessageBodyType = "deleted"
)

// AllValues returns all ThreadMessageBodyType values.
func (ThreadMessageBodyType) AllValues() []ThreadMessageBodyType {
	return []ThreadMessageBodyType{
		ThreadMessageBodyTypeStatusChange,
		ThreadMessageBodyTypeText,
		ThreadMessageBodyTypeThreadClosure,
		ThreadMessageBodyTypeDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ThreadMessageBodyType) MarshalText() ([]byte, error) {
	switch s {
	case ThreadMessageBodyTypeStatusChange:
		return []byte(s), nil
	case ThreadMessageBodyTypeText:
		return []byte(s), nil
	case ThreadMessageBodyTypeThreadClosure:
		return []byte(s), nil
	case ThreadMessageBodyTypeDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ThreadMessageBodyType) UnmarshalText(data []byte) error {
	switch ThreadMessageBodyType(data) {
	case ThreadMessageBodyTypeStatusChange:
		*s = ThreadMessageBodyTypeStatusChange
		return nil
	case ThreadMessageBodyTypeText:
		*s = ThreadMessageBodyTypeText
		return nil
	case ThreadMessageBodyTypeThreadClosure:
		*s = ThreadMessageBodyTypeThreadClosure
		return nil
	case ThreadMessageBodyTypeDeleted:
		*s = ThreadMessageBodyTypeDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ThreadType string

const (
	ThreadTypeProject       ThreadType = "project"
	ThreadTypeReport        ThreadType = "report"
	ThreadTypeDirectMessage ThreadType = "direct_message"
)

// AllValues returns all ThreadType values.
func (ThreadType) AllValues() []ThreadType {
	return []ThreadType{
		ThreadTypeProject,
		ThreadTypeReport,
		ThreadTypeDirectMessage,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ThreadType) MarshalText() ([]byte, error) {
	switch s {
	case ThreadTypeProject:
		return []byte(s), nil
	case ThreadTypeReport:
		return []byte(s), nil
	case ThreadTypeDirectMessage:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ThreadType) UnmarshalText(data []byte) error {
	switch ThreadType(data) {
	case ThreadTypeProject:
		*s = ThreadTypeProject
		return nil
	case ThreadTypeReport:
		*s = ThreadTypeReport
		return nil
	case ThreadTypeDirectMessage:
		*s = ThreadTypeDirectMessage
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type TokenAuth struct {
	APIKey string
	Roles  []string
}

// GetAPIKey returns the value of APIKey.
func (s *TokenAuth) GetAPIKey() string {
	return s.APIKey
}

// GetRoles returns the value of Roles.
func (s *TokenAuth) GetRoles() []string {
	return s.Roles
}

// SetAPIKey sets the value of APIKey.
func (s *TokenAuth) SetAPIKey(val string) {
	s.APIKey = val
}

// SetRoles sets the value of Roles.
func (s *TokenAuth) SetRoles(val []string) {
	s.Roles = val
}

// TransferTeamOwnershipNoContent is response for TransferTeamOwnership operation.
type TransferTeamOwnershipNoContent struct{}

func (*TransferTeamOwnershipNoContent) transferTeamOwnershipRes() {}

// TransferTeamOwnershipNotFound is response for TransferTeamOwnership operation.
type TransferTeamOwnershipNotFound struct{}

func (*TransferTeamOwnershipNotFound) transferTeamOwnershipRes() {}

// UnfollowProjectNoContent is response for UnfollowProject operation.
type UnfollowProjectNoContent struct{}

func (*UnfollowProjectNoContent) unfollowProjectRes() {}

// Merged schema.
// Ref: #/components/schemas/User
type User struct {
	// The user's username.
	Username string `json:"username"`
	// The user's display name.
	Name OptNilString `json:"name"`
	// The user's email (only displayed if requesting your own account). Requires `USER_READ_EMAIL` PAT
	// scope.
	Email OptNilString `json:"email"`
	// A description of the user.
	Bio        OptString            `json:"bio"`
	PayoutData OptNilUserPayoutData `json:"payout_data"`
	// The user's ID.
	ID string `json:"id"`
	// The user's avatar url.
	AvatarURL string `json:"avatar_url"`
	// The time at which the user was created.
	Created string `json:"created"`
	// The user's role.
	Role UserRole `json:"role"`
	// Any badges applicable to this user. These are currently unused and undisplayed, and as such are
	// subject to change
	// In order from first to seventh bit, the current bits are:
	// - (unused)
	// - EARLY_MODPACK_ADOPTER
	// - EARLY_RESPACK_ADOPTER
	// - EARLY_PLUGIN_ADOPTER
	// - ALPHA_TESTER
	// - CONTRIBUTOR
	// - TRANSLATOR.
	Badges OptInt `json:"badges"`
	// A list of authentication providers you have signed up for (only displayed if requesting your own
	// account).
	AuthProviders OptNilStringArray `json:"auth_providers"`
	// Whether your email is verified (only displayed if requesting your own account).
	EmailVerified OptNilBool `json:"email_verified"`
	// Whether you have a password associated with your account (only displayed if requesting your own
	// account).
	HasPassword OptNilBool `json:"has_password"`
	// Whether you have TOTP two-factor authentication connected to your account (only displayed if
	// requesting your own account).
	HasTotp OptNilBool `json:"has_totp"`
	// Deprecated - this is no longer public for security reasons and is always null.
	//
	// Deprecated: schema marks this property as deprecated.
	GithubID OptNilInt `json:"github_id"`
}

// GetUsername returns the value of Username.
func (s *User) GetUsername() string {
	return s.Username
}

// GetName returns the value of Name.
func (s *User) GetName() OptNilString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *User) GetEmail() OptNilString {
	return s.Email
}

// GetBio returns the value of Bio.
func (s *User) GetBio() OptString {
	return s.Bio
}

// GetPayoutData returns the value of PayoutData.
func (s *User) GetPayoutData() OptNilUserPayoutData {
	return s.PayoutData
}

// GetID returns the value of ID.
func (s *User) GetID() string {
	return s.ID
}

// GetAvatarURL returns the value of AvatarURL.
func (s *User) GetAvatarURL() string {
	return s.AvatarURL
}

// GetCreated returns the value of Created.
func (s *User) GetCreated() string {
	return s.Created
}

// GetRole returns the value of Role.
func (s *User) GetRole() UserRole {
	return s.Role
}

// GetBadges returns the value of Badges.
func (s *User) GetBadges() OptInt {
	return s.Badges
}

// GetAuthProviders returns the value of AuthProviders.
func (s *User) GetAuthProviders() OptNilStringArray {
	return s.AuthProviders
}

// GetEmailVerified returns the value of EmailVerified.
func (s *User) GetEmailVerified() OptNilBool {
	return s.EmailVerified
}

// GetHasPassword returns the value of HasPassword.
func (s *User) GetHasPassword() OptNilBool {
	return s.HasPassword
}

// GetHasTotp returns the value of HasTotp.
func (s *User) GetHasTotp() OptNilBool {
	return s.HasTotp
}

// GetGithubID returns the value of GithubID.
func (s *User) GetGithubID() OptNilInt {
	return s.GithubID
}

// SetUsername sets the value of Username.
func (s *User) SetUsername(val string) {
	s.Username = val
}

// SetName sets the value of Name.
func (s *User) SetName(val OptNilString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val OptNilString) {
	s.Email = val
}

// SetBio sets the value of Bio.
func (s *User) SetBio(val OptString) {
	s.Bio = val
}

// SetPayoutData sets the value of PayoutData.
func (s *User) SetPayoutData(val OptNilUserPayoutData) {
	s.PayoutData = val
}

// SetID sets the value of ID.
func (s *User) SetID(val string) {
	s.ID = val
}

// SetAvatarURL sets the value of AvatarURL.
func (s *User) SetAvatarURL(val string) {
	s.AvatarURL = val
}

// SetCreated sets the value of Created.
func (s *User) SetCreated(val string) {
	s.Created = val
}

// SetRole sets the value of Role.
func (s *User) SetRole(val UserRole) {
	s.Role = val
}

// SetBadges sets the value of Badges.
func (s *User) SetBadges(val OptInt) {
	s.Badges = val
}

// SetAuthProviders sets the value of AuthProviders.
func (s *User) SetAuthProviders(val OptNilStringArray) {
	s.AuthProviders = val
}

// SetEmailVerified sets the value of EmailVerified.
func (s *User) SetEmailVerified(val OptNilBool) {
	s.EmailVerified = val
}

// SetHasPassword sets the value of HasPassword.
func (s *User) SetHasPassword(val OptNilBool) {
	s.HasPassword = val
}

// SetHasTotp sets the value of HasTotp.
func (s *User) SetHasTotp(val OptNilBool) {
	s.HasTotp = val
}

// SetGithubID sets the value of GithubID.
func (s *User) SetGithubID(val OptNilInt) {
	s.GithubID = val
}

func (*User) getUserFromAuthRes() {}
func (*User) getUserRes()         {}

type UserIdentifier jx.Raw

// Various data relating to the user's payouts status (you can only see your own).
// Ref: #/components/schemas/UserPayoutData
type UserPayoutData struct {
	// The payout balance available for the user to withdraw (note, you cannot modify this in a PATCH
	// request).
	Balance OptInt `json:"balance"`
	// The wallet that the user has selected.
	PayoutWallet OptUserPayoutDataPayoutWallet `json:"payout_wallet"`
	// The type of the user's wallet.
	PayoutWalletType OptUserPayoutDataPayoutWalletType `json:"payout_wallet_type"`
	// The user's payout address.
	PayoutAddress OptString `json:"payout_address"`
}

// GetBalance returns the value of Balance.
func (s *UserPayoutData) GetBalance() OptInt {
	return s.Balance
}

// GetPayoutWallet returns the value of PayoutWallet.
func (s *UserPayoutData) GetPayoutWallet() OptUserPayoutDataPayoutWallet {
	return s.PayoutWallet
}

// GetPayoutWalletType returns the value of PayoutWalletType.
func (s *UserPayoutData) GetPayoutWalletType() OptUserPayoutDataPayoutWalletType {
	return s.PayoutWalletType
}

// GetPayoutAddress returns the value of PayoutAddress.
func (s *UserPayoutData) GetPayoutAddress() OptString {
	return s.PayoutAddress
}

// SetBalance sets the value of Balance.
func (s *UserPayoutData) SetBalance(val OptInt) {
	s.Balance = val
}

// SetPayoutWallet sets the value of PayoutWallet.
func (s *UserPayoutData) SetPayoutWallet(val OptUserPayoutDataPayoutWallet) {
	s.PayoutWallet = val
}

// SetPayoutWalletType sets the value of PayoutWalletType.
func (s *UserPayoutData) SetPayoutWalletType(val OptUserPayoutDataPayoutWalletType) {
	s.PayoutWalletType = val
}

// SetPayoutAddress sets the value of PayoutAddress.
func (s *UserPayoutData) SetPayoutAddress(val OptString) {
	s.PayoutAddress = val
}

// The wallet that the user has selected.
type UserPayoutDataPayoutWallet string

const (
	UserPayoutDataPayoutWalletPaypal UserPayoutDataPayoutWallet = "paypal"
	UserPayoutDataPayoutWalletVenmo  UserPayoutDataPayoutWallet = "venmo"
)

// AllValues returns all UserPayoutDataPayoutWallet values.
func (UserPayoutDataPayoutWallet) AllValues() []UserPayoutDataPayoutWallet {
	return []UserPayoutDataPayoutWallet{
		UserPayoutDataPayoutWalletPaypal,
		UserPayoutDataPayoutWalletVenmo,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserPayoutDataPayoutWallet) MarshalText() ([]byte, error) {
	switch s {
	case UserPayoutDataPayoutWalletPaypal:
		return []byte(s), nil
	case UserPayoutDataPayoutWalletVenmo:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserPayoutDataPayoutWallet) UnmarshalText(data []byte) error {
	switch UserPayoutDataPayoutWallet(data) {
	case UserPayoutDataPayoutWalletPaypal:
		*s = UserPayoutDataPayoutWalletPaypal
		return nil
	case UserPayoutDataPayoutWalletVenmo:
		*s = UserPayoutDataPayoutWalletVenmo
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The type of the user's wallet.
type UserPayoutDataPayoutWalletType string

const (
	UserPayoutDataPayoutWalletTypeEmail      UserPayoutDataPayoutWalletType = "email"
	UserPayoutDataPayoutWalletTypePhone      UserPayoutDataPayoutWalletType = "phone"
	UserPayoutDataPayoutWalletTypeUserHandle UserPayoutDataPayoutWalletType = "user_handle"
)

// AllValues returns all UserPayoutDataPayoutWalletType values.
func (UserPayoutDataPayoutWalletType) AllValues() []UserPayoutDataPayoutWalletType {
	return []UserPayoutDataPayoutWalletType{
		UserPayoutDataPayoutWalletTypeEmail,
		UserPayoutDataPayoutWalletTypePhone,
		UserPayoutDataPayoutWalletTypeUserHandle,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserPayoutDataPayoutWalletType) MarshalText() ([]byte, error) {
	switch s {
	case UserPayoutDataPayoutWalletTypeEmail:
		return []byte(s), nil
	case UserPayoutDataPayoutWalletTypePhone:
		return []byte(s), nil
	case UserPayoutDataPayoutWalletTypeUserHandle:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserPayoutDataPayoutWalletType) UnmarshalText(data []byte) error {
	switch UserPayoutDataPayoutWalletType(data) {
	case UserPayoutDataPayoutWalletTypeEmail:
		*s = UserPayoutDataPayoutWalletTypeEmail
		return nil
	case UserPayoutDataPayoutWalletTypePhone:
		*s = UserPayoutDataPayoutWalletTypePhone
		return nil
	case UserPayoutDataPayoutWalletTypeUserHandle:
		*s = UserPayoutDataPayoutWalletTypeUserHandle
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/UserPayoutHistory
type UserPayoutHistory struct {
	// The all-time balance accrued by this user in USD.
	AllTime OptString `json:"all_time"`
	// The amount in USD made by the user in the previous 30 days.
	LastMonth OptString `json:"last_month"`
	// A history of all of the user's past transactions.
	Payouts []UserPayoutHistoryEntry `json:"payouts"`
}

// GetAllTime returns the value of AllTime.
func (s *UserPayoutHistory) GetAllTime() OptString {
	return s.AllTime
}

// GetLastMonth returns the value of LastMonth.
func (s *UserPayoutHistory) GetLastMonth() OptString {
	return s.LastMonth
}

// GetPayouts returns the value of Payouts.
func (s *UserPayoutHistory) GetPayouts() []UserPayoutHistoryEntry {
	return s.Payouts
}

// SetAllTime sets the value of AllTime.
func (s *UserPayoutHistory) SetAllTime(val OptString) {
	s.AllTime = val
}

// SetLastMonth sets the value of LastMonth.
func (s *UserPayoutHistory) SetLastMonth(val OptString) {
	s.LastMonth = val
}

// SetPayouts sets the value of Payouts.
func (s *UserPayoutHistory) SetPayouts(val []UserPayoutHistoryEntry) {
	s.Payouts = val
}

func (*UserPayoutHistory) getPayoutHistoryRes() {}

// Ref: #/components/schemas/UserPayoutHistoryEntry
type UserPayoutHistoryEntry struct {
	// The date of this transaction.
	Created OptString `json:"created"`
	// The amount of this transaction in USD.
	Amount OptInt `json:"amount"`
	// The status of this transaction.
	Status OptString `json:"status"`
}

// GetCreated returns the value of Created.
func (s *UserPayoutHistoryEntry) GetCreated() OptString {
	return s.Created
}

// GetAmount returns the value of Amount.
func (s *UserPayoutHistoryEntry) GetAmount() OptInt {
	return s.Amount
}

// GetStatus returns the value of Status.
func (s *UserPayoutHistoryEntry) GetStatus() OptString {
	return s.Status
}

// SetCreated sets the value of Created.
func (s *UserPayoutHistoryEntry) SetCreated(val OptString) {
	s.Created = val
}

// SetAmount sets the value of Amount.
func (s *UserPayoutHistoryEntry) SetAmount(val OptInt) {
	s.Amount = val
}

// SetStatus sets the value of Status.
func (s *UserPayoutHistoryEntry) SetStatus(val OptString) {
	s.Status = val
}

// The user's role.
type UserRole string

const (
	UserRoleAdmin     UserRole = "admin"
	UserRoleModerator UserRole = "moderator"
	UserRoleDeveloper UserRole = "developer"
)

// AllValues returns all UserRole values.
func (UserRole) AllValues() []UserRole {
	return []UserRole{
		UserRoleAdmin,
		UserRoleModerator,
		UserRoleDeveloper,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserRole) MarshalText() ([]byte, error) {
	switch s {
	case UserRoleAdmin:
		return []byte(s), nil
	case UserRoleModerator:
		return []byte(s), nil
	case UserRoleDeveloper:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserRole) UnmarshalText(data []byte) error {
	switch UserRole(data) {
	case UserRoleAdmin:
		*s = UserRoleAdmin
		return nil
	case UserRoleModerator:
		*s = UserRoleModerator
		return nil
	case UserRoleDeveloper:
		*s = UserRoleDeveloper
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/Version
type Version struct {
	// The name of this version.
	Name string `json:"name"`
	// The version number. Ideally will follow semantic versioning.
	VersionNumber string `json:"version_number"`
	// The changelog for this version.
	Changelog OptNilString `json:"changelog"`
	// A list of specific versions of projects that this version depends on.
	Dependencies []VersionDependency `json:"dependencies"`
	// A list of versions of Minecraft that this version supports.
	GameVersions []string `json:"game_versions"`
	// The release channel for this version.
	VersionType VersionVersionType `json:"version_type"`
	// The mod loaders that this version supports. In case of resource packs, use "minecraft".
	Loaders []string `json:"loaders"`
	// Whether the version is featured or not.
	Featured        bool                         `json:"featured"`
	Status          OptVersionStatus             `json:"status"`
	RequestedStatus OptNilVersionRequestedStatus `json:"requested_status"`
	// The ID of the version, encoded as a base62 string.
	ID string `json:"id"`
	// The ID of the project this version is for.
	ProjectID string `json:"project_id"`
	// The ID of the author who published this version.
	AuthorID      string `json:"author_id"`
	DatePublished string `json:"date_published"`
	// The number of times this version has been downloaded.
	Downloads int `json:"downloads"`
	// A link to the changelog for this version. Always null, only kept for legacy compatibility.
	//
	// Deprecated: schema marks this property as deprecated.
	ChangelogURL OptNilString `json:"changelog_url"`
	// A list of files available for download for this version.
	Files []VersionFile `json:"files"`
}

// GetName returns the value of Name.
func (s *Version) GetName() string {
	return s.Name
}

// GetVersionNumber returns the value of VersionNumber.
func (s *Version) GetVersionNumber() string {
	return s.VersionNumber
}

// GetChangelog returns the value of Changelog.
func (s *Version) GetChangelog() OptNilString {
	return s.Changelog
}

// GetDependencies returns the value of Dependencies.
func (s *Version) GetDependencies() []VersionDependency {
	return s.Dependencies
}

// GetGameVersions returns the value of GameVersions.
func (s *Version) GetGameVersions() []string {
	return s.GameVersions
}

// GetVersionType returns the value of VersionType.
func (s *Version) GetVersionType() VersionVersionType {
	return s.VersionType
}

// GetLoaders returns the value of Loaders.
func (s *Version) GetLoaders() []string {
	return s.Loaders
}

// GetFeatured returns the value of Featured.
func (s *Version) GetFeatured() bool {
	return s.Featured
}

// GetStatus returns the value of Status.
func (s *Version) GetStatus() OptVersionStatus {
	return s.Status
}

// GetRequestedStatus returns the value of RequestedStatus.
func (s *Version) GetRequestedStatus() OptNilVersionRequestedStatus {
	return s.RequestedStatus
}

// GetID returns the value of ID.
func (s *Version) GetID() string {
	return s.ID
}

// GetProjectID returns the value of ProjectID.
func (s *Version) GetProjectID() string {
	return s.ProjectID
}

// GetAuthorID returns the value of AuthorID.
func (s *Version) GetAuthorID() string {
	return s.AuthorID
}

// GetDatePublished returns the value of DatePublished.
func (s *Version) GetDatePublished() string {
	return s.DatePublished
}

// GetDownloads returns the value of Downloads.
func (s *Version) GetDownloads() int {
	return s.Downloads
}

// GetChangelogURL returns the value of ChangelogURL.
func (s *Version) GetChangelogURL() OptNilString {
	return s.ChangelogURL
}

// GetFiles returns the value of Files.
func (s *Version) GetFiles() []VersionFile {
	return s.Files
}

// SetName sets the value of Name.
func (s *Version) SetName(val string) {
	s.Name = val
}

// SetVersionNumber sets the value of VersionNumber.
func (s *Version) SetVersionNumber(val string) {
	s.VersionNumber = val
}

// SetChangelog sets the value of Changelog.
func (s *Version) SetChangelog(val OptNilString) {
	s.Changelog = val
}

// SetDependencies sets the value of Dependencies.
func (s *Version) SetDependencies(val []VersionDependency) {
	s.Dependencies = val
}

// SetGameVersions sets the value of GameVersions.
func (s *Version) SetGameVersions(val []string) {
	s.GameVersions = val
}

// SetVersionType sets the value of VersionType.
func (s *Version) SetVersionType(val VersionVersionType) {
	s.VersionType = val
}

// SetLoaders sets the value of Loaders.
func (s *Version) SetLoaders(val []string) {
	s.Loaders = val
}

// SetFeatured sets the value of Featured.
func (s *Version) SetFeatured(val bool) {
	s.Featured = val
}

// SetStatus sets the value of Status.
func (s *Version) SetStatus(val OptVersionStatus) {
	s.Status = val
}

// SetRequestedStatus sets the value of RequestedStatus.
func (s *Version) SetRequestedStatus(val OptNilVersionRequestedStatus) {
	s.RequestedStatus = val
}

// SetID sets the value of ID.
func (s *Version) SetID(val string) {
	s.ID = val
}

// SetProjectID sets the value of ProjectID.
func (s *Version) SetProjectID(val string) {
	s.ProjectID = val
}

// SetAuthorID sets the value of AuthorID.
func (s *Version) SetAuthorID(val string) {
	s.AuthorID = val
}

// SetDatePublished sets the value of DatePublished.
func (s *Version) SetDatePublished(val string) {
	s.DatePublished = val
}

// SetDownloads sets the value of Downloads.
func (s *Version) SetDownloads(val int) {
	s.Downloads = val
}

// SetChangelogURL sets the value of ChangelogURL.
func (s *Version) SetChangelogURL(val OptNilString) {
	s.ChangelogURL = val
}

// SetFiles sets the value of Files.
func (s *Version) SetFiles(val []VersionFile) {
	s.Files = val
}

func (*Version) createVersionRes()            {}
func (*Version) getLatestVersionFromHashRes() {}
func (*Version) getVersionFromIdOrNumberRes() {}
func (*Version) getVersionRes()               {}
func (*Version) versionFromHashRes()          {}

// Ref: #/components/schemas/VersionDependency
type VersionDependency struct {
	// The ID of the version that this version depends on.
	VersionID OptNilString `json:"version_id"`
	// The ID of the project that this version depends on.
	ProjectID OptNilString `json:"project_id"`
	// The file name of the dependency, mostly used for showing external dependencies on modpacks.
	FileName OptNilString `json:"file_name"`
	// The type of dependency that this version has.
	DependencyType VersionDependencyDependencyType `json:"dependency_type"`
}

// GetVersionID returns the value of VersionID.
func (s *VersionDependency) GetVersionID() OptNilString {
	return s.VersionID
}

// GetProjectID returns the value of ProjectID.
func (s *VersionDependency) GetProjectID() OptNilString {
	return s.ProjectID
}

// GetFileName returns the value of FileName.
func (s *VersionDependency) GetFileName() OptNilString {
	return s.FileName
}

// GetDependencyType returns the value of DependencyType.
func (s *VersionDependency) GetDependencyType() VersionDependencyDependencyType {
	return s.DependencyType
}

// SetVersionID sets the value of VersionID.
func (s *VersionDependency) SetVersionID(val OptNilString) {
	s.VersionID = val
}

// SetProjectID sets the value of ProjectID.
func (s *VersionDependency) SetProjectID(val OptNilString) {
	s.ProjectID = val
}

// SetFileName sets the value of FileName.
func (s *VersionDependency) SetFileName(val OptNilString) {
	s.FileName = val
}

// SetDependencyType sets the value of DependencyType.
func (s *VersionDependency) SetDependencyType(val VersionDependencyDependencyType) {
	s.DependencyType = val
}

// The type of dependency that this version has.
type VersionDependencyDependencyType string

const (
	VersionDependencyDependencyTypeRequired     VersionDependencyDependencyType = "required"
	VersionDependencyDependencyTypeOptional     VersionDependencyDependencyType = "optional"
	VersionDependencyDependencyTypeIncompatible VersionDependencyDependencyType = "incompatible"
	VersionDependencyDependencyTypeEmbedded     VersionDependencyDependencyType = "embedded"
)

// AllValues returns all VersionDependencyDependencyType values.
func (VersionDependencyDependencyType) AllValues() []VersionDependencyDependencyType {
	return []VersionDependencyDependencyType{
		VersionDependencyDependencyTypeRequired,
		VersionDependencyDependencyTypeOptional,
		VersionDependencyDependencyTypeIncompatible,
		VersionDependencyDependencyTypeEmbedded,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VersionDependencyDependencyType) MarshalText() ([]byte, error) {
	switch s {
	case VersionDependencyDependencyTypeRequired:
		return []byte(s), nil
	case VersionDependencyDependencyTypeOptional:
		return []byte(s), nil
	case VersionDependencyDependencyTypeIncompatible:
		return []byte(s), nil
	case VersionDependencyDependencyTypeEmbedded:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VersionDependencyDependencyType) UnmarshalText(data []byte) error {
	switch VersionDependencyDependencyType(data) {
	case VersionDependencyDependencyTypeRequired:
		*s = VersionDependencyDependencyTypeRequired
		return nil
	case VersionDependencyDependencyTypeOptional:
		*s = VersionDependencyDependencyTypeOptional
		return nil
	case VersionDependencyDependencyTypeIncompatible:
		*s = VersionDependencyDependencyTypeIncompatible
		return nil
	case VersionDependencyDependencyTypeEmbedded:
		*s = VersionDependencyDependencyTypeEmbedded
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/VersionFile
type VersionFile struct {
	Hashes VersionFileHashes `json:"hashes"`
	// A direct link to the file.
	URL string `json:"url"`
	// The name of the file.
	Filename string `json:"filename"`
	// Whether this file is the primary one for its version. Only a maximum of one file per version will
	// have this set to true. If there are not any primary files, it can be inferred that the first file
	// is the primary one.
	Primary bool `json:"primary"`
	// The size of the file in bytes.
	Size int `json:"size"`
	// The type of the additional file, used mainly for adding resource packs to datapacks.
	FileType OptNilVersionFileFileType `json:"file_type"`
}

// GetHashes returns the value of Hashes.
func (s *VersionFile) GetHashes() VersionFileHashes {
	return s.Hashes
}

// GetURL returns the value of URL.
func (s *VersionFile) GetURL() string {
	return s.URL
}

// GetFilename returns the value of Filename.
func (s *VersionFile) GetFilename() string {
	return s.Filename
}

// GetPrimary returns the value of Primary.
func (s *VersionFile) GetPrimary() bool {
	return s.Primary
}

// GetSize returns the value of Size.
func (s *VersionFile) GetSize() int {
	return s.Size
}

// GetFileType returns the value of FileType.
func (s *VersionFile) GetFileType() OptNilVersionFileFileType {
	return s.FileType
}

// SetHashes sets the value of Hashes.
func (s *VersionFile) SetHashes(val VersionFileHashes) {
	s.Hashes = val
}

// SetURL sets the value of URL.
func (s *VersionFile) SetURL(val string) {
	s.URL = val
}

// SetFilename sets the value of Filename.
func (s *VersionFile) SetFilename(val string) {
	s.Filename = val
}

// SetPrimary sets the value of Primary.
func (s *VersionFile) SetPrimary(val bool) {
	s.Primary = val
}

// SetSize sets the value of Size.
func (s *VersionFile) SetSize(val int) {
	s.Size = val
}

// SetFileType sets the value of FileType.
func (s *VersionFile) SetFileType(val OptNilVersionFileFileType) {
	s.FileType = val
}

// The type of the additional file, used mainly for adding resource packs to datapacks.
type VersionFileFileType string

const (
	VersionFileFileTypeRequiredResourcePack VersionFileFileType = "required-resource-pack"
	VersionFileFileTypeOptionalResourcePack VersionFileFileType = "optional-resource-pack"
)

// AllValues returns all VersionFileFileType values.
func (VersionFileFileType) AllValues() []VersionFileFileType {
	return []VersionFileFileType{
		VersionFileFileTypeRequiredResourcePack,
		VersionFileFileTypeOptionalResourcePack,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VersionFileFileType) MarshalText() ([]byte, error) {
	switch s {
	case VersionFileFileTypeRequiredResourcePack:
		return []byte(s), nil
	case VersionFileFileTypeOptionalResourcePack:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VersionFileFileType) UnmarshalText(data []byte) error {
	switch VersionFileFileType(data) {
	case VersionFileFileTypeRequiredResourcePack:
		*s = VersionFileFileTypeRequiredResourcePack
		return nil
	case VersionFileFileTypeOptionalResourcePack:
		*s = VersionFileFileTypeOptionalResourcePack
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A map of hashes of the file. The key is the hashing algorithm and the value is the string version
// of the hash.
// Ref: #/components/schemas/VersionFileHashes
type VersionFileHashes struct {
	Sha512 OptString `json:"sha512"`
	SHA1   OptString `json:"sha1"`
}

// GetSha512 returns the value of Sha512.
func (s *VersionFileHashes) GetSha512() OptString {
	return s.Sha512
}

// GetSHA1 returns the value of SHA1.
func (s *VersionFileHashes) GetSHA1() OptString {
	return s.SHA1
}

// SetSha512 sets the value of Sha512.
func (s *VersionFileHashes) SetSha512(val OptString) {
	s.Sha512 = val
}

// SetSHA1 sets the value of SHA1.
func (s *VersionFileHashes) SetSHA1(val OptString) {
	s.SHA1 = val
}

// VersionFromHashNotFound is response for VersionFromHash operation.
type VersionFromHashNotFound struct{}

func (*VersionFromHashNotFound) versionFromHashRes() {}

type VersionRequestedStatus string

const (
	VersionRequestedStatusListed   VersionRequestedStatus = "listed"
	VersionRequestedStatusArchived VersionRequestedStatus = "archived"
	VersionRequestedStatusDraft    VersionRequestedStatus = "draft"
	VersionRequestedStatusUnlisted VersionRequestedStatus = "unlisted"
)

// AllValues returns all VersionRequestedStatus values.
func (VersionRequestedStatus) AllValues() []VersionRequestedStatus {
	return []VersionRequestedStatus{
		VersionRequestedStatusListed,
		VersionRequestedStatusArchived,
		VersionRequestedStatusDraft,
		VersionRequestedStatusUnlisted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VersionRequestedStatus) MarshalText() ([]byte, error) {
	switch s {
	case VersionRequestedStatusListed:
		return []byte(s), nil
	case VersionRequestedStatusArchived:
		return []byte(s), nil
	case VersionRequestedStatusDraft:
		return []byte(s), nil
	case VersionRequestedStatusUnlisted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VersionRequestedStatus) UnmarshalText(data []byte) error {
	switch VersionRequestedStatus(data) {
	case VersionRequestedStatusListed:
		*s = VersionRequestedStatusListed
		return nil
	case VersionRequestedStatusArchived:
		*s = VersionRequestedStatusArchived
		return nil
	case VersionRequestedStatusDraft:
		*s = VersionRequestedStatusDraft
		return nil
	case VersionRequestedStatusUnlisted:
		*s = VersionRequestedStatusUnlisted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type VersionStatus string

const (
	VersionStatusListed    VersionStatus = "listed"
	VersionStatusArchived  VersionStatus = "archived"
	VersionStatusDraft     VersionStatus = "draft"
	VersionStatusUnlisted  VersionStatus = "unlisted"
	VersionStatusScheduled VersionStatus = "scheduled"
	VersionStatusUnknown   VersionStatus = "unknown"
)

// AllValues returns all VersionStatus values.
func (VersionStatus) AllValues() []VersionStatus {
	return []VersionStatus{
		VersionStatusListed,
		VersionStatusArchived,
		VersionStatusDraft,
		VersionStatusUnlisted,
		VersionStatusScheduled,
		VersionStatusUnknown,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VersionStatus) MarshalText() ([]byte, error) {
	switch s {
	case VersionStatusListed:
		return []byte(s), nil
	case VersionStatusArchived:
		return []byte(s), nil
	case VersionStatusDraft:
		return []byte(s), nil
	case VersionStatusUnlisted:
		return []byte(s), nil
	case VersionStatusScheduled:
		return []byte(s), nil
	case VersionStatusUnknown:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VersionStatus) UnmarshalText(data []byte) error {
	switch VersionStatus(data) {
	case VersionStatusListed:
		*s = VersionStatusListed
		return nil
	case VersionStatusArchived:
		*s = VersionStatusArchived
		return nil
	case VersionStatusDraft:
		*s = VersionStatusDraft
		return nil
	case VersionStatusUnlisted:
		*s = VersionStatusUnlisted
		return nil
	case VersionStatusScheduled:
		*s = VersionStatusScheduled
		return nil
	case VersionStatusUnknown:
		*s = VersionStatusUnknown
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The release channel for this version.
type VersionVersionType string

const (
	VersionVersionTypeRelease VersionVersionType = "release"
	VersionVersionTypeBeta    VersionVersionType = "beta"
	VersionVersionTypeAlpha   VersionVersionType = "alpha"
)

// AllValues returns all VersionVersionType values.
func (VersionVersionType) AllValues() []VersionVersionType {
	return []VersionVersionType{
		VersionVersionTypeRelease,
		VersionVersionTypeBeta,
		VersionVersionTypeAlpha,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VersionVersionType) MarshalText() ([]byte, error) {
	switch s {
	case VersionVersionTypeRelease:
		return []byte(s), nil
	case VersionVersionTypeBeta:
		return []byte(s), nil
	case VersionVersionTypeAlpha:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VersionVersionType) UnmarshalText(data []byte) error {
	switch VersionVersionType(data) {
	case VersionVersionTypeRelease:
		*s = VersionVersionTypeRelease
		return nil
	case VersionVersionTypeBeta:
		*s = VersionVersionTypeBeta
		return nil
	case VersionVersionTypeAlpha:
		*s = VersionVersionTypeAlpha
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// VersionsFromHashesBadRequest is response for VersionsFromHashes operation.
type VersionsFromHashesBadRequest struct{}

func (*VersionsFromHashesBadRequest) versionsFromHashesRes() {}

// WithdrawPayoutNoContent is response for WithdrawPayout operation.
type WithdrawPayoutNoContent struct{}

func (*WithdrawPayoutNoContent) withdrawPayoutRes() {}

// WithdrawPayoutNotFound is response for WithdrawPayout operation.
type WithdrawPayoutNotFound struct{}

func (*WithdrawPayoutNotFound) withdrawPayoutRes() {}
