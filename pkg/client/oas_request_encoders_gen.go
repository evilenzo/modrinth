// Code generated by ogen, DO NOT EDIT.

package client

import (
	"bytes"
	"mime"
	"mime/multipart"
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/uri"
)

func encodeAddGalleryImageRequest(
	req AddGalleryImageReq,
	r *http.Request,
) error {
	switch req := req.(type) {
	case *AddGalleryImageReqEmptyBody:
		// Empty body case.
		return nil
	case *AddGalleryImageReqImageBmp:
		const contentType = "image/bmp"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	case *AddGalleryImageReqImageGIF:
		const contentType = "image/gif"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	case *AddGalleryImageReqImageJpeg:
		const contentType = "image/jpeg"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	case *AddGalleryImageReqImagePNG:
		const contentType = "image/png"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	case *AddGalleryImageReqImageRgb:
		const contentType = "image/rgb"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	case *AddGalleryImageReqImageSvg:
		const contentType = "image/svg"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	case *AddGalleryImageReqImageSvgz:
		const contentType = "image/svgz"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	case *AddGalleryImageReqImageWEBP:
		const contentType = "image/webp"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	default:
		return errors.Errorf("unexpected request type: %T", req)
	}
}

func encodeAddTeamMemberRequest(
	req UserIdentifier,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := new(jx.Encoder)
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}

func encodeChangeProjectIconRequest(
	req ChangeProjectIconReq,
	r *http.Request,
) error {
	switch req := req.(type) {
	case *ChangeProjectIconReqEmptyBody:
		// Empty body case.
		return nil
	case *ChangeProjectIconReqImageBmp:
		const contentType = "image/bmp"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	case *ChangeProjectIconReqImageGIF:
		const contentType = "image/gif"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	case *ChangeProjectIconReqImageJpeg:
		const contentType = "image/jpeg"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	case *ChangeProjectIconReqImagePNG:
		const contentType = "image/png"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	case *ChangeProjectIconReqImageRgb:
		const contentType = "image/rgb"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	case *ChangeProjectIconReqImageSvg:
		const contentType = "image/svg"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	case *ChangeProjectIconReqImageSvgz:
		const contentType = "image/svgz"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	case *ChangeProjectIconReqImageWEBP:
		const contentType = "image/webp"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	default:
		return errors.Errorf("unexpected request type: %T", req)
	}
}

func encodeChangeUserIconRequest(
	req ChangeUserIconReq,
	r *http.Request,
) error {
	switch req := req.(type) {
	case *ChangeUserIconReqEmptyBody:
		// Empty body case.
		return nil
	case *ChangeUserIconReqImageBmp:
		const contentType = "image/bmp"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	case *ChangeUserIconReqImageGIF:
		const contentType = "image/gif"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	case *ChangeUserIconReqImageJpeg:
		const contentType = "image/jpeg"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	case *ChangeUserIconReqImagePNG:
		const contentType = "image/png"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	case *ChangeUserIconReqImageRgb:
		const contentType = "image/rgb"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	case *ChangeUserIconReqImageSvg:
		const contentType = "image/svg"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	case *ChangeUserIconReqImageSvgz:
		const contentType = "image/svgz"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	case *ChangeUserIconReqImageWEBP:
		const contentType = "image/webp"
		body := req
		ht.SetBody(r, body, contentType)
		return nil
	default:
		return errors.Errorf("unexpected request type: %T", req)
	}
}

func encodeCreateVersionRequest(
	req OptCreateVersionBodyMultipart,
	r *http.Request,
) error {
	const contentType = "multipart/form-data"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	request := req.Value

	q := uri.NewFormEncoder(map[string]string{
		"data": "application/json; charset=utf-8",
	})
	{
		// Encode "data" form field.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "data",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}
		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			var enc jx.Encoder
			func(e *jx.Encoder) {
				request.Data.Encode(e)
			}(&enc)
			return e.EncodeValue(string(enc.Bytes()))
		}); err != nil {
			return errors.Wrap(err, "encode query")
		}
	}
	body, boundary := ht.CreateMultipartBody(func(w *multipart.Writer) error {
		if err := q.WriteMultipart(w); err != nil {
			return errors.Wrap(err, "write multipart")
		}
		return nil
	})
	ht.SetCloserBody(r, body, mime.FormatMediaType(contentType, map[string]string{"boundary": boundary}))
	return nil
}

func encodeGetLatestVersionFromHashRequest(
	req OptGetLatestVersionFromHashBody,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := new(jx.Encoder)
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}

func encodeGetLatestVersionsFromHashesRequest(
	req OptGetLatestVersionsFromHashesBody,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := new(jx.Encoder)
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}

func encodeModifyProjectRequest(
	req OptEditableProject,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := new(jx.Encoder)
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}

func encodeModifyReportRequest(
	req OptModifyReportReq,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := new(jx.Encoder)
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}

func encodeModifyTeamMemberRequest(
	req ModifyTeamMemberBody,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := new(jx.Encoder)
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}

func encodeModifyUserRequest(
	req OptEditableUser,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := new(jx.Encoder)
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}

func encodeModifyVersionRequest(
	req OptEditableVersion,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := new(jx.Encoder)
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}

func encodePatchProjectsRequest(
	req OptPatchProjectsBody,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := new(jx.Encoder)
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}

func encodeScheduleProjectRequest(
	req OptSchedule,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := new(jx.Encoder)
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}

func encodeScheduleVersionRequest(
	req OptSchedule,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := new(jx.Encoder)
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}

func encodeSendThreadMessageRequest(
	req OptThreadMessageBody,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := new(jx.Encoder)
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}

func encodeSubmitReportRequest(
	req OptCreatableReport,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := new(jx.Encoder)
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}

func encodeTransferTeamOwnershipRequest(
	req UserIdentifier,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := new(jx.Encoder)
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}

func encodeVersionsFromHashesRequest(
	req OptHashList,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := new(jx.Encoder)
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
